/*****************************************************************************
 * Copyright 1986-2009 by mental images GmbH, Fasanenstr. 81, D-10623 Berlin,
 * Germany. All rights reserved.
 *****************************************************************************/
/*** This code was generated by gen_msl ***/

shader mia_physicalsun {

input:

	bool on = true;
	float multiplier = 1.0;
	Color rgb_unit_conversion = float4(0.0001,0.0001,0.0001,1.0);
	float haze = 0.0;
	float redblueshift = 0.0;
	float saturation = 1.0;
	float horizon_height = 0.0;
	float shadow_softness = 1.0;
	int samples = 8;
	float3 photon_bbox_min = float3(-10.0,-10.0,-10.0);
	float3 photon_bbox_max = float3(10.0,10.0,10.0);
	bool automatic_photon_energy = false;
	bool y_is_up = true;

output:

	Color result;
	Color light_shadow;

	void main()
	{
		result = float4(0.0,0.0,0.0,0.0);
		light_shadow = float4(1.0,1.0,1.0,1.0);
		if(!(multiplier <= 0.0 || !on))
			{
				Color X0000000 = rgb_unit_conversion;
				if(X0000000.r <= 0.0)
					{
						X0000000.r = 1.0 / 80000.0;
						X0000000.g = X0000000.r;
						X0000000.b = X0000000.r;
					}
				X0000000 *= multiplier;
				float X0000001 = 2.0 * haze;
				if(X0000001 < 2.0)
					{
						X0000001 = 2.0;
					}
				float X0000002 = 0.0;
				if(saturation > 1.0)
					{
						X0000002 = saturation;
					}
				else
					{
						float X0000003 = pow(saturation,3.0);
						X0000001 -= 2.0;
						X0000001 /= 15.0;
						if(X0000001 < 0.0)
							{
								X0000001 = 0.0;
							}
						if(X0000001 > 1.0)
							{
								X0000001 = 1.0;
							}
						X0000001 = pow(X0000001,3.0);
						X0000002 = X0000002 * (1.0 - X0000001) + X0000003 * X0000001;
					}
				Color X0000004 = float4(0.0,0.0,0.0,0.0);
				float3 X0000005 = transform_vector("internal","world",light_direction) * float(-1);
				float X0000006 = ((y_is_up) ? (X0000005.y) : (X0000005.z));
				if(X0000006 > 0.0)
					{
						float X0000007 = 1.0 / (X0000006 + 0.15 * pow(93.885 - (acos(X0000006) * 180.0) / 3.14159265358979323846,-1.253));
						float X0000008 = 0.04608 * X0000001 - 0.04586;
						float X0000009 = 1.3;
						Color X0000010 = float4(0.0,0.0,0.0,0.0);
						Color X0000011 = float4(0.610,0.550,0.470,0.0);
						X0000010.r = exp((-X0000007 * X0000008) * pow(X0000011.r,-X0000009));
						X0000010.g = exp((-X0000007 * X0000008) * pow(X0000011.g,-X0000009));
						X0000010.b = exp((-X0000007 * X0000008) * pow(X0000011.b,-X0000009));
						float X0000012 = 0.0035;
						Color X0000013 = float4(0.0,0.0,0.0,0.0);
						Color X0000014 = float4(12.0,8.5,0.9,0.0);
						X0000013.r = exp((-X0000007 * X0000014.r) * X0000012);
						X0000013.g = exp((-X0000007 * X0000014.g) * X0000012);
						X0000013.b = exp((-X0000007 * X0000014.b) * X0000012);
						Color X0000015 = float4(0.0,0.0,0.0,0.0);
						X0000015.r = exp((-X0000007 * 0.008735) * pow(X0000011.r,-4.08));
						X0000015.g = exp((-X0000007 * 0.008735) * pow(X0000011.g,-4.08));
						X0000015.b = exp((-X0000007 * 0.008735) * pow(X0000011.b,-4.08));
						Color X0000016 = float4((1.0 * 127500.0) / 0.9878,(0.992 * 127500.0) / 0.9878,(0.911 * 127500.0) / 0.9878,0.0);
						X0000004 = ((X0000015 * X0000010) * X0000013) * X0000016;
						result = X0000004 * X0000000;
						light_shadow = shadowing();
					}
			}
		result.a = 1.0;
	}

}
	{
		shader_type("light");
	};

/*** end of file ***/
