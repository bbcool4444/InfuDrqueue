/*****************************************************************************
 * Copyright 1986-2011 by mental images GmbH, Fasanenstr. 81, D-10623 Berlin,
 * Germany. All rights reserved.
 *****************************************************************************/

shader Light_photometric
{
    input:
        Color light_color = Color(1,1,1,1) 
        {		
                display_name("Color");
                soft_range(Color(0,0,0,0), Color(1,1,1,1));
                description( "The color that the light will shine on the scene." );
        };
        Light_profile profile = "downlight.ies"
        {
                display_name("Light profile");
                description( "The IES light profile used to specify the light distribution." );
        };
        float multiplier = 1.0
        {	
                display_name("Multiplier value");
                soft_range(float(0), float(100));
                description("Scales the brigthness of the light.");
        };
        bool flip_orientation = true
        {	
                display_name("Reorient the light profile's up vector");
                description( "Reorients the light profile's up vector, which is oriented towards "
                             "the y direction by default, towards the z direction.");
        };

    output:
        Color result;
        Color light_shadow;
    
    void main()
    {	
	    result       = light_color;
	    light_shadow = Color(1,1,1,1);

	    float3 dir = normalize(transform_vector("internal", "light", light_to_surface));

        if(flip_orientation)
            dir.xyz = float3(dir.x, dir.z, -dir.y);

        float phi   = 0.0;
        if(abs(dir.z)>0.00001 || abs(dir.x)>0.00001)
            phi = atan2(dir.z, dir.x);        // [-PI,PI]
        if(phi<0.0)
            phi = phi + TWO_PI;               // [-PI, 0] -> [PI,2*PI]
        float theta = acos(dir.y);

        Color intensity = multiplier*profile.lookup(phi, theta); 
        intensity *= 1.0/(light_distance*light_distance);
        result.rgb *= intensity.rgb;
            
	    // Shadowing 
	    light_shadow = shadowing();
    }
}
{ 
        shader_type( "light" );
        description( "Creates an photometric light source centered at "
                     "a point in the world. The accompany IES file specifies the "
                     "light source's light distribution. " );
}
;
