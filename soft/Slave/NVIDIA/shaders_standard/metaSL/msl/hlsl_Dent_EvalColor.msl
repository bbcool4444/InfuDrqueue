/******************************************************************************
 * Copyright 1986-2009 by mental images GmbH, Fasanenstr. 81, D-10623 Berlin,
 * Germany. All rights reserved.
 *****************************************************************************/

// see tex_dent.cpp
#define DENTSIZE         50.0
#define NOISE_DIM_PLUS_1 21
#define FNOISE_DIM       20.0

shader hlsl_Dent_EvalColor {
 input:
  Shader Map1;
  Shader Map2;
  Color Color1 = Color(0.0, 0.0, 0.0, 1.0) {
    display_name("Color #1");
  };
  Color Color2 = Color(1.0, 1.0, 1.0, 1.0) {
    display_name("Color #2");
  };
  const bool Map1Enabled = false {
    display_name("Map1 Enabled");
  };
  const bool Map2Enabled = false {
    display_name("Map2 Enabled");
  };
  float Size = 200.0 {
    display_name("Size");
    hard_range(0.0, 1000.0);
  };
  float Strength = 20.0 {
    display_name("Strength");
    hard_range(0.0, 1000.0);
  };
  const int Iterations = 2 {
    display_name("Iterations");
    hard_range(2, 5);
  };
  Shader Coords;
  // TODO: int GBufferID

  // textures
  Texture2d noise_table = "dent_noise_out.dds" {
    disable_filtering();
    texture_coord_u("clamp");
    texture_coord_v("clamp");
  };

 output:
  Color result;

  // see tex_dent.cpp
  float maxDentNoise(in float x,
		     in float y,
		     in float z) {
    float mx = fmod(x, FNOISE_DIM);
    if (mx < 0.0) mx += FNOISE_DIM;
    float my = fmod(y, FNOISE_DIM);
    if (my < 0.0) my += FNOISE_DIM;
    float mz = fmod(z, FNOISE_DIM);
    if (mz < 0.0) mz += FNOISE_DIM;
    int ix = (int) mx;
    int iy = (int) my;
    int iz = (int) mz;
    float fx = fmod(mx, 1.0);
    float fy = fmod(my, 1.0);
    float fz = fmod(mz, 1.0);
    int index = 0;
    float tx = 0.0;
    float ty = 0.0;
    float n = 0.0;
    // n = noiseTable[ix][iy][iz];
    index = iy * NOISE_DIM_PLUS_1 + ix;
    tx = (2.0 * float(index) + 1.0) / (2.0 * 441.0);
    ty = (2.0 * float(iz) + 1.0) / (2.0 * 21.0);
    Color c =  
      Texture2D_sampler_color(noise_table, 0.0, "none").lookup(float2(tx, ty));
    n = c.r;
    // n00 = n + fx*(noiseTable[ix+1][iy][iz]-n);
    index = iy * NOISE_DIM_PLUS_1 + (ix + 1);
    tx = (2.0 * float(index) + 1.0) / (2.0 * 441.0);
    ty = (2.0 * float(iz) + 1.0) / (2.0 * 21.0);
    c =  
      Texture2D_sampler_color(noise_table, 0.0, "none").lookup(float2(tx, ty));
    float n00 = n + fx * (c.r - n);
    // n = noiseTable[ix][iy][iz+1];
    index = iy * NOISE_DIM_PLUS_1 + ix;
    tx = (2.0 * float(index) + 1.0) / (2.0 * 441.0);
    ty = (2.0 * float(iz + 1) + 1.0) / (2.0 * 21.0);
    c =  
      Texture2D_sampler_color(noise_table, 0.0, "none").lookup(float2(tx, ty));
    n = c.r;
    // n01 = n + fx*(noiseTable[ix+1][iy][iz+1]-n);
    index = iy * NOISE_DIM_PLUS_1 + (ix + 1);
    tx = (2.0 * float(index) + 1.0) / (2.0 * 441.0);
    ty = (2.0 * float(iz + 1) + 1.0) / (2.0 * 21.0);
    c =  
      Texture2D_sampler_color(noise_table, 0.0, "none").lookup(float2(tx, ty));
    float n01 = n + fx * (c.r - n);
    // n = noiseTable[ix][iy+1][iz];
    index = (iy + 1) * NOISE_DIM_PLUS_1 + ix;
    tx = (2.0 * float(index) + 1.0) / (2.0 * 441.0);
    ty = (2.0 * float(iz) + 1.0) / (2.0 * 21.0);
    c =  
      Texture2D_sampler_color(noise_table, 0.0, "none").lookup(float2(tx, ty));
    n = c.r;
    // n10 = n + fx*(noiseTable[ix+1][iy+1][iz]-n);
    index = (iy + 1) * NOISE_DIM_PLUS_1 + (ix + 1);
    tx = (2.0 * float(index) + 1.0) / (2.0 * 441.0);
    ty = (2.0 * float(iz) + 1.0) / (2.0 * 21.0);
    c =  
      Texture2D_sampler_color(noise_table, 0.0, "none").lookup(float2(tx, ty));
    float n10 = n + fx * (c.r - n);
    // n = noiseTable[ix][iy+1][iz+1];
    index = (iy + 1) * NOISE_DIM_PLUS_1 + ix;
    tx = (2.0 * float(index) + 1.0) / (2.0 * 441.0);
    ty = (2.0 * float(iz+1) + 1.0) / (2.0 * 21.0);
    c =  
      Texture2D_sampler_color(noise_table, 0.0, "none").lookup(float2(tx, ty));
    n = c.r;
    // n11 = n + fx*(noiseTable[ix+1][iy+1][iz+1]-n);
    index = (iy + 1) * NOISE_DIM_PLUS_1 + (ix + 1);
    tx = (2.0 * float(index) + 1.0) / (2.0 * 441.0);
    ty = (2.0 * float(iz+1) + 1.0) / (2.0 * 21.0);
    c =  
      Texture2D_sampler_color(noise_table, 0.0, "none").lookup(float2(tx, ty));
    float n11 = n + fx * (c.r - n);
    float n0 = n00 + fy * (n10 - n00);
    float n1 = n01 + fy * (n11 - n01);
    return (n0 + fz * (n1 - n0)) / 32768.0;
  } // maxDentNoise

  void main() {
    result = Color(0.0, 0.0, 0.0, 0.0);
    // xyz-coords
    float3 xyz_coords = transform_point("internal", "object", position);
    // try to call hlsl_base_UVGenerator
    Color shader_return = Color(0.0, 0.0, 0.0, 0.0);
    if (Coords.call("output", "result", shader_return)) {
      xyz_coords.xyz = shader_return.rgb;
    }
    else {
      xyz_coords *= 100.0;
    }
    // call other shader parameters
    Color Map1Color = Color(0.0, 0.0, 0.0, 0.0);
    bool useMap1 = false;
    if (Map1Enabled &&
	Map1.call("output", "result", Map1Color)) {
      useMap1 = true;
    }
    Color Map2Color = Color(0.0, 0.0, 0.0, 0.0);
    bool useMap2 = false;
    if (Map2Enabled &&
	Map2.call("output", "result", Map2Color)) {
      useMap2 = true;
    }
    // use xyz-coords

    // begin of maxDent_EvalColor
    float px = 0.0;
    float py = 0.0;
    float pz = 0.0;
    px = xyz_coords.x;
    py = xyz_coords.y;
    pz = xyz_coords.z;
    float size = (Size != 0.0) ? Size : 0.0001;
    px *= DENTSIZE / size;
    py *= DENTSIZE / size;
    pz *= DENTSIZE / size;
    // begin of maxDentFunc
    int i = 0;
    float s = 1.0;
    float mag = 0.0;
    for (i = 0; i < Iterations; i++) {
      mag += abs(0.5 - maxDentNoise(px, py, pz)) / s;
      s *= 2.0;
      px *= 2.0;
      py *= 2.0;
      pz *= 2.0;
    } // for (i = 0; i < Iterations; i++)
    float d = mag * mag * mag * Strength;
    // end of maxDentFunc
    if (d < 0.0005) {
      if (useMap1) {
	result = Map1Color;
        return;
      } // if (useMap1)
      else {
	result = Color1;
	return;
      } // else [ if (useMap1) ]
    } // if (d < 0.0005)
    else if (d >= 0.9995) {
      if (useMap2) {
	result = Map2Color;
        return;
      } // if (useMap2)
      else {
	result = Color2;
	return;
      } // else [ if (useMap2) ]
    } // else if (d >= 0.9995)
    Color c1 = Color1;
    if (useMap1) {
      c1 = Map1Color;
    } // if (useMap1)
    Color c2 = Color2;
    if (useMap2) {
      c2 = Map2Color;
    } // if (useMap2)
    result.r = (1.0 - d) * c1.r + d * c2.r;
    result.g = (1.0 - d) * c1.g + d * c2.g;
    result.b = (1.0 - d) * c1.b + d * c2.b;
    result.a = (1.0 - d) * c1.a + d * c2.a;
  } // main
};
