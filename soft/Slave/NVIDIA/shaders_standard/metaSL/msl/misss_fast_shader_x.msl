/******************************************************************************
 * Copyright 1986-2009 by mental images GmbH, Fasanenstr. 81, D-10623 Berlin,
 * Germany. All rights reserved.
 *****************************************************************************/
/*** This code was generated by gen_msl ***/

shader misss_fast_shader_x {

input:

	texture2D lightmap = "default.dds";
	texture2D depthmap = "default.dds";
	Shader bump;
	Shader diffuse_illum;
	Color diffuse_color = float4(1.0,1.0,1.0,1.0);
	Shader specular_illum;
	float diffuse_weight = 0.5;
	Color front_sss_color = float4(0.8,0.4,0.1,1.0);
	float front_sss_weight = 0.5;
	float front_sss_radius = 10.0;
	Color back_sss_color = float4(0.8,0.4,0.1,1.0);
	float back_sss_weight = 0.5;
	float back_sss_radius = 10.0;
	float back_sss_depth = 0.0;
	float scale_conversion = 1.0;
	bool screen_composit = true;
	bool output_sss_only = false;
	float falloff = 2.0;
	int samples = 64;

output:

	Color result;
	Color diffuse_result;
	Color diffuse_raw;
	Color diffuse_level;
	Color specular_result;
	Color front_result;
	Color front_raw;
	Color front_level;
	Color back_result;
	Color back_raw;
	Color back_level;

	void X0000000(inout Color X0000001,Color X0000002,bool X0000003)
	{
		if(X0000003)
			{
				if(X0000001.g > 1.0)
					{
						float X0000004 = X0000001.g - 1.0;
						X0000001.r += X0000004;
						X0000001.b += X0000004;
						X0000001.g = 1.0;
					}
				if(X0000001.r > 1.0)
					{
						float X0000005 = X0000001.r - 1.0;
						X0000001.b += X0000005;
						X0000001.g += X0000005;
						if(X0000001.g > 1.0)
							X0000001.g = 1.0;
						X0000001.r = 1.0;
					}
				if(X0000001.b > 1.0)
					{
						float X0000006 = X0000001.b - 1.0;
						X0000001.r += X0000006;
						if(X0000001.r > 1.0)
							X0000001.r = 1.0;
						X0000001.g += X0000006;
						if(X0000001.g > 1.0)
							X0000001.g = 1.0;
						X0000001.b = 1.0;
					}
				X0000001.r = 1.0 - (1.0 - X0000001.r) * (1.0 - X0000002.r);
				X0000001.g = 1.0 - (1.0 - X0000001.g) * (1.0 - X0000002.g);
				X0000001.b = 1.0 - (1.0 - X0000001.b) * (1.0 - X0000002.b);
			}
		else
			{
				X0000001.r += X0000002.r;
				X0000001.g += X0000002.g;
				X0000001.b += X0000002.b;
			}
	}


	void main()
	{
		specular_result = float4(float(0));
		back_result = float4(float(0));
		float X0000007 = 0.5;
		Color X0000008 = float4(float(0),float(0),float(0),float(0));
		Color X0000009 = float4(float(0),float(0),float(0),float(0));
		Light_iterator X0000010;
		foreach(X0000010)
			{
				if(X0000010.dot_nl > 0.0)
					{
						float X0000011 = pow(saturate(X0000010.dot_nl),X0000007);
						X0000008 += (X0000011 * X0000010.contribution) / 3.14159265358979323846;
						X0000009 += (X0000010.dot_nl * X0000010.contribution) / 3.14159265358979323846;
					}
			}
		if(!(diffuse_illum.call("output","result",diffuse_raw)))
			{
				diffuse_raw = X0000009;
			}
		diffuse_level = diffuse_color * diffuse_weight;
		diffuse_result = diffuse_raw * diffuse_level;
		result.rgb = diffuse_result.rgb;
		result.a = diffuse_raw.a;
		if(specular_illum.call("output","result",specular_result))
			X0000000(result,specular_result,screen_composit);
		float X0000012 = (3.0 + pow(((dot_nd < 0.0) ? (-dot_nd) : (0.0)) + 0.1,0.5)) / 4.0;
		back_raw = (back_result = float4(float(0),float(0),float(0),float(0)));
		back_level = (diffuse_color * back_sss_weight) * back_sss_color;
		front_raw = X0000008;
		front_level = (diffuse_color * front_sss_weight) * front_sss_color;
		front_result = front_raw * front_level;
		Color X0000013 = front_result;
		if(!output_sss_only)
			{
				X0000000(X0000013,result,screen_composit);
			}
		result = X0000013;
	}

};

/*** end of file ***/
