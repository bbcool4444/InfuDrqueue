/******************************************************************************
 * Copyright 1986-2010 by mental images GmbH, Fasanenstr. 81, D-10623 Berlin,
 * Germany. All rights reserved.
 *****************************************************************************/

// $Revision$
//#version 1.1

#import <mi_msl_shared.msl>

#define TRANSP_SUB		0
#define TRANSP_ADD		1
#define TRANSP_FILTER	2

#define HLSL

          // Max structs and macros
  
    
   struct mrIllumParams {
        Color ambIllumOut;
        Color diffIllumOut;
        Color specIllumOut;
        Color selfIllumOut;
        Color reflIllumOut;
        Color transIllumOut;         /* This is really for storing refraction*/
        Color realTransIllumOut;	 /* This is for storing the real transparency 
                                         (non-additive)*/
        Color additiveTransIllumOut; /* This is for storing additive transparency, 
                                     which is handled differently*/
        Color irradianceIllumOut;
        float diffIllumIntens;
        float finalOpac;
        float finalAttenuation;
        Color finalC;
        Color finalT;                /* This is the final transparency color of 
                                     all the layers composited together */
        Color localT;                /* This is the transparency color of the 
                                     current layer/material only */
    };



shader max_StandardMultiLayerMaterial {
input:

    Color Parameters_Ambient = Color(0.588, 0.588, 0.588, 1.0){
    };
    Color Parameters_Diffuse = Color(0.588, 0.588, 0.588, 1.0){
    };
    Color Parameters_SelfIllumColor = Color(0, 0, 0, 1.0){
    };
    float Parameters_SelfIllumAmount = 0.0{
    };
    float Parameters_DiffuseLevel = 1.0{
    };
    float Parameters_DiffuseRoughness = 0.0{
    };
    Color Parameters_Specular = Color(0.9, 0.9, 0.9, 1.0){
    };
    float Parameters_SpecularLevel = 0.0{
    };
    float Parameters_Glossiness = 0.1{
    };
    float Parameters_Anisotropy = 0.0{
    };
    float Parameters_Orientation = 0.0{
    };
    Color Parameters_Specular2 = Color(0.9, 0.9, 0.9, 1.0){
    };
    float Parameters_SpecularLevel2 = 0.0{
    };
    float Parameters_Glossiness2 = 0.25{
    };
    float Parameters_Anisotropy2 = 0.0{
    };
    float Parameters_Orientation2 = 0.0{
    };
    const bool Parameters_ADLock = true{
    };
    const bool Parameters_UseSelfIllumColor = false{
    };
     
    
    //from max_StandardMaterial
    const bool StdParameters_Wire = false{
    };
    const bool StdParameters_TwoSided = false{
    };
    const bool StdParameters_FaceMap = false{
    };
    const bool StdParameters_Faceted = false{
    };

    int StdExtendedParameters_OpacityType = 0{
    };
    float StdExtendedParameters_Opacity = 1.0{
    };
    Color StdExtendedParameters_FilterColor = Color(0.5){
    };
    Texture2d StdExtendedParameters_FilterMap = "default.dds"{
    };
    int StdExtendedParameters_OpacityFallOffType = 0{
    };
    float StdExtendedParameters_OpacityFallOff = 0{
    };
    float StdExtendedParameters_Ior = 1.5{
    };
    float StdExtendedParameters_WireSize = 1{
    };
    int StdExtendedParameters_WireUnits = 0{
    };
    const bool StdExtendedParameters_ApplyReflectionDimming = false{
    };
    float StdExtendedParameters_DimLevel = 0.0{
    };
    float StdExtendedParameters_ReflectionLevel = 3.0{
    };

    const bool StdMaps_On__0 = true;
    Shader     StdMaps_Map_0 = Shader();
    float      StdMaps_Amt_0 = 0.0;

    const bool StdMaps_On__1 = true;
    Shader     StdMaps_Map_1 = Shader();
    float      StdMaps_Amt_1 = 0.0;

    const bool StdMaps_On__2 = true;
    Shader     StdMaps_Map_2 = Shader();
    float      StdMaps_Amt_2 = 0.0;

    const bool StdMaps_On__3 = true;
    Shader     StdMaps_Map_3 = Shader();
    float      StdMaps_Amt_3 = 0.0;

    const bool StdMaps_On__4 = true;
    Shader     StdMaps_Map_4 = Shader();
    float      StdMaps_Amt_4 = 0.0;

    const bool StdMaps_On__5 = true;
    Shader     StdMaps_Map_5 = Shader();
    float      StdMaps_Amt_5 = 0.0;

    const bool StdMaps_On__6 = true;
    Shader     StdMaps_Map_6 = Shader();
    float      StdMaps_Amt_6 = 0.0;

    const bool StdMaps_On__7 = true;
    Shader     StdMaps_Map_7 = Shader();
    float      StdMaps_Amt_7 = 0.0;

    const bool StdMaps_On__8 = true;
    Shader     StdMaps_Map_8 = Shader();
    float      StdMaps_Amt_8 = 0.0;

    const bool StdMaps_On__9 = true;
    Shader     StdMaps_Map_9 = Shader();
    float      StdMaps_Amt_9 = 0.0;

    const bool StdMaps_On__10 = true;
    Shader     StdMaps_Map_10 = Shader();
    float      StdMaps_Amt_10 = 0.0;

    const bool StdMaps_On__11 = true;
    Shader     StdMaps_Map_11 = Shader();
    float      StdMaps_Amt_11 = 0.0;

    const bool StdMaps_On__12 = true;
    Shader     StdMaps_Map_12 = Shader();
    float      StdMaps_Amt_12 = 0.0;

    const bool StdMaps_On__13 = true;
    Shader     StdMaps_Map_13 = Shader();
    float      StdMaps_Amt_13 = 0.0;

    const bool StdMaps_On__14 = true;
    Shader     StdMaps_Map_14 = Shader();
    float      StdMaps_Amt_14 = 0.0;

    const bool StdMaps_On__15 = true;
    Shader     StdMaps_Map_15 = Shader();
    float      StdMaps_Amt_15 = 0.0;

    const bool StdMaps_On__16 = true;
    Shader     StdMaps_Map_16 = Shader();
    float      StdMaps_Amt_16 = 0.0;

    const bool StdMaps_On__17 = true;
    Shader     StdMaps_Map_17 = Shader();
    float      StdMaps_Amt_17 = 0.0;

    const bool StdMaps_On__18 = true;
    Shader     StdMaps_Map_18 = Shader();
    float      StdMaps_Amt_18 = 0.0;

    const bool StdMaps_On__19 = true;
    Shader     StdMaps_Map_19 = Shader();
    float      StdMaps_Amt_19 = 0.0;

    const bool StdMaps_On__20 = true;
    Shader     StdMaps_Map_20 = Shader();
    float      StdMaps_Amt_20 = 0.0;

    bool    StdMaps_ADTextureLock = true{
    };


output:
    Color result;
    
#define LIMITMINMAX(x, min, max) if ((x) < (min)) (x) = (min); else if ((x) > (max)) (x) = (max);

#define ColorMax(c)   ((c.r > c.g) ? ((c.r > c.b) ? c.r : c.b) : \
                        ((c.g > c.b) ? c.g : c.b))
#define maxMAX3(a,b,c) ((a)>(b)?((a)>(c)?(a):(c)):((b)>(c)?(b):(c)))
#define maxMIN3(a,b,c) ((a)<(b)?((a)<(c)?(a):(c)):((b)<(c)?(b):(c)))

#define DEFAULT_K_REFL 1.0

    // Evaluate a bump map. 
#define doBumps(enabled, amount, map) if (enabled) \
        { \
            Color bumpresult = Color(0); \
            map.call("input", "evalNormal", true, \
                     "output", "result", bumpresult)  ;\
            normal += float3(bumpresult.rgb) * amount; \
            normal = normalize(normal); \
        } 

// Evaulate a color map into the mapArray
#define doColorMap(enabled, map, res) if (enabled) \
        { \
            map.call("output", "result", res); \
        } 

// Check the mono output of the map, if any
#define doMonoMap(enabled, map, res) if (enabled) \
        { \
            float f; \
            if (map.call("output", "mono_result", f)) \
            { \
               res = Color(f,f,f,f); \
            } \
            else \
            { \
               map.call("output", "result", res); \
            } \
        } 

#define doReflMap(enabled, map, res) if (enabled)	\
    {									\
      map.call( "output", "result", res);		\
    } 


  // Evaulate a refraction map into the mapArray
#define doRefrMap(enabled, map, res) if (enabled)	\
    {									\
      map.call(	 "output", "result", res);		\
    } 

  // Macros used to evaluate a given texture in the illumination shader

#define lerpColorMap(enabled, map, amount, variable, c) if (enabled)	\
    {\
      c *= amount;\
      variable = (variable * (1.0 - c.a)) + c;\
    }

#define lerpMonoMap(enabled, map, amount, variable, c) if (enabled)	\
    {\
      float a = amount;\
      variable = (variable * (1.0 - a)) + (c.r * a);\
    }


 /* does not use weight for r,g, b */
    float maxIntensity(Color c) 
    {	
        float f = (c.r + c.g + c.b)*0.333333333f;
        return f;
    }

    Color max_transpColor(in int type, in float opac, in Color filt, in Color diff)
    {
        Color fc = Color(0);
        if(type == TRANSP_ADD)
        {
            fc = Color(1.0 - opac);
        }
        else if(type == TRANSP_FILTER)
        {
            if(opac > 0.5)
            {
                /* darken as opac goes ( 0.5--> 1.0)
                  ** so that max component reaches 0.0f when opac reaches 1.0
                  ** find max component of filt
                  */
                float m = maxMAX3(filt.r, filt.g, filt.b);
                float d = 2.0 * (opac - 0.5) * m;
                fc = filt - d;
                fc = saturate(fc);
                fc.a = 0.0;
               
                
            }
            else
            {
                /* lighten as opac goes ( 0.5--> 0.0)
                 ** so that min component reaches 1.0f when opac reaches 1.0
                 ** find min component of filt
                 */
                float m = maxMIN3(filt.r, filt.g, filt.b);
                float d = (1.0 - 2.0 * opac) * (1.0 - m);
                fc = filt + d;
                fc = saturate(fc);
                fc.a = 0.0;
                

            }
        }
        else
        {
           Color f = 1.0 - diff;
           fc = (1.0 - opac) * f;
           fc.a = 0.0;

        }
        return fc;

    }


   void max_ShadeReflection(inout mrIllumParams param_ip, 
                             in Color param_reflection, 
                             in float param_amount,
                             in Color param_specular,
                             in bool param_dim_reflection,
                             in float param_dim_intensity,
                             in float param_dim_multiplier)
    {

        //phong2_AffectReflection
        param_reflection *= param_specular * DEFAULT_K_REFL;
        if(param_dim_reflection)
        {
            float dim_factor = (1.0 - param_dim_intensity) * param_ip.diffIllumIntens 
                                    * param_dim_multiplier + param_dim_intensity;
            param_amount *= dim_factor;
        }
        param_ip.reflIllumOut = param_reflection * param_amount;
    }

    void max_ShadeTransmission(inout mrIllumParams param_ip, 
                               in Color param_refraction, 
                               in float param_amount,
                               in float param_opacity,
                               in int param_tr_type,
                               in Color param_filter,
                               in Color param_diffuse)
    {

        if(param_tr_type == 0)
            param_tr_type = TRANSP_FILTER;
        else if(param_tr_type == 2)
            param_tr_type = TRANSP_ADD;
        else 
            param_tr_type = TRANSP_SUB;

        if(any(param_refraction))
        {
            float max, newOpac;
            Color transpColor;

            /* Set up attenuation opacity for Refraction map. dim diffuse &
                spec by this */
            param_ip.finalAttenuation = param_opacity * (1.0f - param_amount);

            /* Make more opaque when specular hilite occurs */
            max = ColorMax(param_ip.specIllumOut);
            if(max > 1.0)
                max = 1.0;
            newOpac = param_opacity + max - param_opacity * max;

            /* Evaluate refraction map, filtered by filter color */
            
            transpColor = max_transpColor(param_tr_type, newOpac, 
				          param_filter,  param_diffuse);
            param_ip.transIllumOut += param_refraction * transpColor;
            
            /* no transparency when doing refraction */
            param_ip.finalT = Color(0);

        }
        else
        {
            if(param_opacity != 1.0)
            {
                float max, newOpac;
                Color t_ray_col = Color(0);
                Color tCol = Color(0);

                param_ip.finalAttenuation = param_opacity;
                /* Make more opaque where specular hilite occurs, 
	                so you can still see the hilite */
	            max = maxMAX3(param_ip.specIllumOut.r, 
                              param_ip.specIllumOut.g, 
                              param_ip.specIllumOut.b);
	            if ( max > 1.0f ) 
	               max = 1.0f;

                newOpac = param_opacity + max - param_opacity * max;

                /* Compute the color of the transparent filter color */
	
	            tCol = max_transpColor( param_tr_type, newOpac, 
				            param_filter, 
				            param_diffuse);
	            param_ip.localT = param_ip.finalT = tCol;

//in viewport, we do not want the trace to happen but the integration to composite  based on alpha value
#ifndef HLSL 
                //trace a transparent ray
                Trace_options to;
                to.set_ray_type("transparent");

                Ray ray = Ray(position, direction);
                Ray dx;
                Ray dy;
                trace(ray, dx, dy, to, "result", t_ray_col);
#endif
                switch(param_tr_type)
                {
                case TRANSP_ADD:
                    param_ip.additiveTransIllumOut.rgb = t_ray_col.rgb;
                    break;
                default:
                case TRANSP_SUB:
                case TRANSP_FILTER:
                    param_ip.realTransIllumOut.rgb = tCol.rgb * t_ray_col.rgb;
                    break;
                }//end switch
                param_ip.finalT *= (1.0 - t_ray_col.a);
            }
            else
            {
                param_ip.finalT = Color(0);
                param_ip.finalAttenuation = 1.0;
            }

        }
    }

    void max_CombineComponentsComp( inout mrIllumParams ip )
    { 

        Color spec = ip.specIllumOut + ip.reflIllumOut;
        Color rem = 1.0 - spec;
        Color diff = ip.ambIllumOut + ip.diffIllumOut + ip.selfIllumOut + ip.irradianceIllumOut;
        ip.finalC = (spec + rem  * (ip.finalAttenuation * diff + 
                                    ip.transIllumOut + 
                                    ip.realTransIllumOut) + ip.additiveTransIllumOut);

    }

   float3 rotate_vector(in float3 p,
                        in float3 a,
                        float rdn)
   {
       float3 t_out;
       float c = cos( rdn );
	    float t = 1 - c;
	    float s = sin( rdn );
	    float txy = t * a.x * a.y;
	    float tyz = t * a.y * a.z;
	    float txz = t * a.x * a.z;
	    float sx = s * a.x;
	    float sy = s * a.y;
	    float sz = s * a.z;

	    t_out.x = p.x *(t* a.x * a.x + c) + p.y * (txy - sz) + p.z * (txz + sy);
	    t_out.y = p.x *(txy + sz) + p.y * (t* a.y * a.y + c) + p.z * (tyz - sx);
	    t_out.z = p.x *(txz - sy) + p.y * (tyz + sx) + p.z * (t* a.z * a.z + c);
	    return t_out;
   }



     //see shd_util.cpp
   float3 max_get_tangent(in float3 param_state_normal)
   {
       float3 U = float3(0.0, 0.0, 1.0);
       float3 T = float3(0);
       float UN = 1.0;

       U = transform_vector("object", "internal", U);
       U = normalize(U);
       UN = dot(U, param_state_normal);

       if(UN > 0.9999)
       {
           U = float3(0.0, 1.0, 0.0);
           U = transform_vector("object", "internal", U);
           U = normalize(U);
           UN = dot(U, param_state_normal);
       }

       T = U - param_state_normal*UN;
       T = normalize(T);
       return T;
   }

   //see shd_util.cpp
#define ALPHA_MIN	0.015f
#define ALPHA_MAX	0.5f
#define SPEC_MAX	0.5f

#define ALPHA_SZ	0.485 //(ALPHA_MAX - ALPHA_MIN)
#define DEFAULT_GLOSS2	0.03f	


   float max_gauss_high_light(in float3 V,
                              in float3 N,
                              in float gloss,
                              in float aniso,
                              in float orient,
                              in float3 L, 
                              in float3 T,
                              float pNL,
                              bool has_pNL)
   {
       float t_out = 0;
       float asz = (1.0 - gloss) * (ALPHA_SZ);
       float ax = ALPHA_MIN + asz;
       float ay = ALPHA_MIN + asz * (1.0 - aniso);
       float3 H; 
       float NH;

       if(ax < 0.0)ax = 0.0;
       if(ay < 0.0)ay = 0.0;

        H = L - V;
        H = normalize(H);
        NH = dot(N, H);

        if(NH > 0.0)
        {
            float axy = DEFAULT_GLOSS2;
            float norm = 1.0/(4.0*PI*axy);
            float NV = -dot(N, V);
            float g;
            float3 B;
            float ord;
            float x, y, e;
            float NL;
            if(has_pNL)
                NL = pNL;
            else
                NL = dot(N, L);
            float3 T1;
            if(NV < 0.001)
                NV = 0.001;

            g = 1.0 / sqrt(NL* NV);
            if(g > 3.0) 
                g = 3.0;
            ord = orient * 180.0;
            T1 = T;
            if(ord != 0.0)
            {
                T1 = rotate_vector(T, N, ord*PI/180.0);
            }

            B = cross(T1, N);

            x = dot(H, T1)/ax;
            y = dot(H, B) / ay;
            e = exp(-2.0*(x*x + y*y)/(1.0+NH));
            t_out = norm*g*e*SPEC_MAX;

        }
        return t_out;
   }


 
  //see shd_util.cpp
   Color max_OrenNayarIllum(in float3 V_in,
                            in float3 N,
                            in float3 L,
                            in float rough,
                            in Color rho,
                            out float pDiffIntensOut,
                            float NL)
   {
       float a  = 0;
       float b = 0;
       float NV = 0;
       float3 V = float3(0);
       float3 tanV = float3(0);
       float3 tanL = float3(0);
       float w = 0;
       float cosDPhi = 0;
       float bCube = 0;

       float sigma2 = 0;
       float sigma3 = 0;
       float c1 = 0;
       float c2 = 0;
       float c3 = 0;
       float tanB = 0;
       float tanAB = 0;
       Color o;
       float l1 = 0;
       float l2 = 0;
       float l = 0;

       V = V_in;

       if(NL < -1.0)
           NL = dot(N, L);
       if(NL < 0.9999)
           a = acos(NL);
       a = clamp( a, -PI*0.49, PI*0.49); 

       NV = dot(N, V);

       //need this to accomodate double sided materials
       if(NV < 0.0)
       {
           NV = -NV;
           V = -V;
       }

       if(NV < 0.9999)
           b = acos(NV);

       if(b > a)
       {
           float tmp = b;
           b = a;
           a = tmp;
       }

       // N.V is the length of the projection of v onto n; times N is a vector along N of that 
	   // length V - that pt gives a tangent vector in the plane of N, for measuring phi
	   tanV = V - N * NV;
       tanL = L - N * NL;
       w = length(tanV) * length(tanL);
       cosDPhi = 1.0;
       if(abs(w) >= 0.0004)
       {
           cosDPhi = dot(tanV, tanL)/w;
       }
       cosDPhi = clamp(cosDPhi, -1.0, 1.0);

       if(cosDPhi >= 0.0)
       {
            bCube = 2.0*-b*1.0/PI;
            bCube *= (bCube*bCube);
       }
       else
       {
           bCube = 2.0*b*1.0/PI;
           bCube *= (bCube*bCube);
       }

       sigma2 = sqrt(rough);
       sigma3 = sigma2 / (sigma2 + 0.09);
       c1 = 1.0 - 0.5 * (sigma2 / (sigma2 + 0.33));
       c2 = 0.45 * sigma3 * (sin(a) - bCube);
       c3 = 0.125 * sigma3 * sqrt(4.0*a*b*1.0/TWO_PI);
       tanB = tan(b);
       tanAB = tan((a+b) * 0.5);
       tanB = clamp(tanB, -100.0, 100.0);
       tanAB = clamp(tanAB, -100.0, 100.0);

       l1 = (c1 + c2 * cosDPhi * tanB + c3 * ( 1.0 - abs(cosDPhi)) * tanAB);
       l2 = 0.17 * (sigma2 / (sigma2 + 0.13)) * ( 1.0 - cosDPhi * sqrt(2.0 * b * 1.0/PI));
       pDiffIntensOut = l1 + l2;
       o.rgb = l1*rho.rgb + l2 * sqrt(rho.rgb);
       o.rgb = clamp(o.rgb, 0.0, 1.0);//clamp it to 0, 1
       o.a = 0.0;
       return o;
        
   }

    //From StandardMaterial
    float max_GetEffOpacity ( in float param_opacity_falloff, 
                              in int param_opacity_falloff_type,
                              in float param_opacity)
    {
      if (( param_opacity != 1.0f ) || ( param_opacity_falloff != 0.0f )) 
      {
          if ( param_opacity_falloff != 0.0f) 
	      {
              float d = abs (dot(normal, direction));
	          if( param_opacity_falloff_type == 1 ) 
	                d = 1.0f-d;
	          return param_opacity * (1.0f - param_opacity_falloff * d);
	      }
          else
          {
	          return param_opacity;
          }
      }
      else
      {
          return 1.0f;
      }
    }

    Color compute_bumped_irradiance(in float3 param_orig_normal, 
                in float param_bump_scale)
    {
        Color res;
        Irradiance_options io;
        res = irradiance(io);
        res /= PI;

        return res;
    }


 

    // The original code has complicated remapping tables, but for
    // efficiency these are hardcoded for the MetaSL conversion,
    // since they never change. Here is the texture map order for:
    //    MultiLayer 
    //      0 = Ambient Color
    //      1 = Diffuse Color
    //      2 = Diffuse Level
    //      3 = Diffuse Roughness
    //      4 = Specular Color 1
    //      5 = Specular Level 1
    //      6 = Glossiness 1
    //      7 = Anisotropy 1
    //      8 = Orientation 1
    //      9 = Specular Color 2
    //     10 = Specular Level 2
    //     11 = Glossiness 2
    //     12 = Anisotropy 2
    //     13 = Orientation 2
    //     14 = Self-Illumination
    //     15 = Opacity
    //     16 = Filter Color
    //     17 = Bump
    //     18 = Reflection
    //     19 = Refraction
    //     20 = Displacement

    void main()
    {

        result = Color(0);
        Color map_color = Color(0);

       // Faceted? 
        if (StdParameters_Faceted)
            normal = geometry_normal;     
        

        
        // Optimized code destilling the "essence" from
        // max_base_BlinnIllumination() function with the callback
        // functions unrolled and map channel remappings resolved

         // Optimized code destilling the "essence" from
        // max_base_MetalIllumination_exit() function with the callback
        // functions unrolled and map channel remappings resolved

        Color	ambient		= (Parameters_ADLock?
                                   Parameters_Diffuse:Parameters_Ambient);
        Color	diffuse		= Parameters_Diffuse;
        float   diffuse_level = Parameters_DiffuseLevel;
        float   diffuse_rough = Parameters_DiffuseRoughness;
        Color	specular	= Parameters_Specular;
        float   specular_level = Parameters_SpecularLevel;
        float   glossiness = Parameters_Glossiness;
        float   anisotropy = Parameters_Anisotropy;
        float   orientation = Parameters_Orientation;
        Color   specular2 = Parameters_Specular2;
        float   specular_level2 = Parameters_SpecularLevel2;
        float   glossiness2 = Parameters_Glossiness2;
        float   anisotropy2 = Parameters_Anisotropy2;
        float   orientation2 = Parameters_Orientation2;
        Color	selfIllumClr	= Parameters_SelfIllumColor;
        float	selfIllum	= Parameters_SelfIllumAmount;
        Color filter_color = StdExtendedParameters_FilterColor;


        ambient = clamp(ambient, 0, 1);
        diffuse = clamp(diffuse, 0, 1);
        diffuse_level = clamp(diffuse_level, 0.0, 4.0);
        diffuse_rough = clamp(diffuse_rough, 0.0, 1.0);
        specular = clamp(specular, 0.0, 1.0);
        specular_level = clamp(specular_level, 0.0, 9.99);
        glossiness = clamp(glossiness, 0.0, 1.0);
        anisotropy = clamp(anisotropy, 0.0, 1.0);
        orientation = clamp(orientation, -999.99, 999.99)/1.8;
        specular2 = clamp(specular2, 0.0, 1.0);
        specular_level2 = clamp(specular_level2, 0.0, 9.99);
        glossiness2 = clamp(glossiness2, 0.0, 1.0);
        anisotropy2 = clamp(anisotropy2, 0.0, 1.0);
        orientation2 = clamp(orientation2, -999.99, 999.99)/1.8;


        if (!Parameters_UseSelfIllumColor)
            selfIllumClr = Color(selfIllum, selfIllum, selfIllum, 1.0);

        float3 orig_normal = normal;
        doBumps(StdMaps_On__17, StdMaps_Amt_17, StdMaps_Map_17);

        Color irradiance = compute_bumped_irradiance(orig_normal, 1.0);

        doColorMap (StdMaps_On__1, StdMaps_Map_1, map_color); 
        LIMITMINMAX ( map_color.a, 0.0f, 1.0f ); 
        lerpColorMap(StdMaps_On__1, StdMaps_Map_1, StdMaps_Amt_1, diffuse, map_color);

        // Are Diffuse and Ambient locked?
        if(StdMaps_ADTextureLock)
        {
            ambient = diffuse;
        }
        else
        {
            doColorMap (StdMaps_On__0, StdMaps_Map_0, map_color);
            lerpColorMap(StdMaps_On__0, StdMaps_Map_0, StdMaps_Amt_0, ambient, map_color);
        }

        //opacity
        doMonoMap  (StdMaps_On__15, StdMaps_Map_15, map_color);
        float opamt   = StdMaps_On__15?StdMaps_Amt_15:0.0;
        float opacity = maxIntensity(map_color) * opamt + 
                        (1.0 - opamt)*StdExtendedParameters_Opacity;
        opacity = max_GetEffOpacity(StdExtendedParameters_OpacityFallOff,
                                    StdExtendedParameters_OpacityFallOffType,
                                    opacity);

        doMonoMap  (StdMaps_On__2, StdMaps_Map_2, map_color);
        lerpMonoMap(StdMaps_On__2, StdMaps_Map_2, StdMaps_Amt_2, diffuse_level, map_color);
        doMonoMap  (StdMaps_On__3, StdMaps_Map_3, map_color);
        lerpMonoMap(StdMaps_On__3, StdMaps_Map_3, StdMaps_Amt_3, diffuse_rough, map_color);
        doColorMap (StdMaps_On__4, StdMaps_Map_4, map_color);
        lerpColorMap(StdMaps_On__4, StdMaps_Map_4, StdMaps_Amt_4, specular, map_color);
        doMonoMap  (StdMaps_On__5, StdMaps_Map_5, map_color);
        lerpMonoMap(StdMaps_On__5, StdMaps_Map_5, StdMaps_Amt_5, specular_level, map_color);
        doMonoMap  (StdMaps_On__6, StdMaps_Map_6, map_color);
        lerpMonoMap(StdMaps_On__6, StdMaps_Map_6, StdMaps_Amt_6, glossiness, map_color);
        doMonoMap  (StdMaps_On__7, StdMaps_Map_7, map_color);
        lerpMonoMap(StdMaps_On__7, StdMaps_Map_7, StdMaps_Amt_7, anisotropy, map_color);
        doMonoMap  (StdMaps_On__8, StdMaps_Map_8, map_color);
        lerpMonoMap(StdMaps_On__8, StdMaps_Map_8, StdMaps_Amt_8, orientation, map_color);
        doColorMap (StdMaps_On__9, StdMaps_Map_9, map_color);
        lerpColorMap(StdMaps_On__9, StdMaps_Map_9, StdMaps_Amt_9, specular2, map_color);
        doMonoMap  (StdMaps_On__10, StdMaps_Map_10, map_color);
        lerpMonoMap(StdMaps_On__10, StdMaps_Map_10, StdMaps_Amt_10, specular_level2, map_color);
        doMonoMap  (StdMaps_On__11, StdMaps_Map_11, map_color);
        lerpMonoMap(StdMaps_On__11, StdMaps_Map_11, StdMaps_Amt_11, glossiness2, map_color);
        doMonoMap  (StdMaps_On__12, StdMaps_Map_12, map_color);
        lerpMonoMap(StdMaps_On__12, StdMaps_Map_12, StdMaps_Amt_12, anisotropy2, map_color);
        doMonoMap  (StdMaps_On__13, StdMaps_Map_13, map_color);
        lerpMonoMap(StdMaps_On__13, StdMaps_Map_13, StdMaps_Amt_13, orientation2, map_color);
        map_color = selfIllumClr;
        doColorMap (StdMaps_On__14, StdMaps_Map_14, map_color);
        lerpColorMap(StdMaps_On__14, StdMaps_Map_14, StdMaps_Amt_14, selfIllumClr, map_color);
        doColorMap (StdMaps_On__16, StdMaps_Map_16, map_color);
        lerpColorMap(StdMaps_On__16, StdMaps_Map_16, StdMaps_Amt_16, filter_color, map_color);
       
        // Optimized code destilling the "essence" from
        // the blinn2_illum() and maxBlinn2_IllumAccumulator callback functions


        mrIllumParams ip = mrIllumParams(Color(0),
                                         Color(0),
                                         Color(0),
                                         Color(0),
                                         Color(0),
                                         Color(0),
                                         Color(0),
                                         Color(0),
                                         Color(0),
                                         0,
                                         0,
                                         0,
                                         Color(0),
                                         Color(0),
                                         Color(0));
       
        
        ip.irradianceIllumOut = irradiance * ambient; 

        float3 vdir = direction;


        // The light loop: enumerate lights (see maxAniso_IllumAccumulator)

        // The light loop: enumerate lights (see maxBlinn2_IllumAccumulator)
        Color lcolor;
        Light_iterator light;
        foreach (light)
        {
            lcolor = light.contribution/PI;
            bool ambient_only = false;
            float diff_amt = 1.0, spec_amt = 1.0, diffuseCoef = -1;
            // Is this an "ambient" light?
            light.get_light_parameter("ambient_only",    ambient_only);
            // Are specular on or off?
            light.get_light_parameter("affect_diffuse",  diff_amt);
            light.get_light_parameter("affect_specular", spec_amt);
            // Diffuse Coefficient (== custom dot_nl)
            light.get_light_parameter("diffuseCoef",     diffuseCoef);

            if (false == ambient_only)
            {

                // Supports the 3ds Max "diffuseCoefficient" return allowing a light
                // shader to return a custom "dot_nl" value other than the actual dot_nl
                if (diffuseCoef < 0) 
                    diffuseCoef = light.dot_nl;


                // If the (possibly adjusted above) dot_nl < 0, do nuttin'
                if (diffuseCoef >= 0) 
                {
                    

                    // Diffuse
                    if (diff_amt > 0)
                    {
                        float tmp;
                        float diff_intens = 0;
                        Color d =  max_OrenNayarIllum(vdir,
                                                      normal,
                                                      light.direction,
                                                      diffuse_rough*PI*0.5,
                                                      diffuse,
                                                      diff_intens,
                                                      light.dot_nl);
                        ip.diffIllumOut += d * lcolor * diffuseCoef * 
                                                                diffuse_level * diff_amt;
                        ip.diffIllumIntens += diffuseCoef * 
                                              diff_intens * 
                                              maxIntensity(lcolor);
                    }

                    if (spec_amt > 0)
                    {
                        float3 t = max_get_tangent(normal);
                        float g = max_gauss_high_light(vdir,
                                                       normal,
                                                       glossiness, 
                                                       anisotropy,
                                                       orientation,
                                                       light.direction,
                                                       t, 
                                                       light.dot_nl,
                                                       true);
                        float tmp = diffuseCoef * g * specular_level;

                        Color spec1 = clamp(tmp * specular * lcolor, 0.0, 1.0);
                        

                        float g2 = max_gauss_high_light(vdir,
                                                       normal,
                                                       glossiness2, 
                                                       anisotropy2,
                                                       orientation2,
                                                       light.direction,
                                                       t, 
                                                       light.dot_nl,
                                                       true);

                         tmp = diffuseCoef * g2 * specular_level2;
                         Color spec2 = tmp * specular2 * lcolor;
                         ip.specIllumOut.rgb += spec1.rgb + (1.0 - spec1.rgb)*spec2.rgb; 
                        
                    }
                }
            }
            else
            {
                ip.ambIllumOut += lcolor;
            }
        }



        // End of code from max_metal_IllumAccumulator, back in code from multilayer_illum()
        
        if (!Parameters_UseSelfIllumColor)
        {
            /* lerp between diffuse & white */
            float si = maxIntensity ( selfIllumClr );

            if ( si > 0.0f )
            {
                if(si >= 1.0)
                {
                    ip.selfIllumOut.rgb += diffuse.rgb;
                    ip.diffIllumOut  = Color(0);
                }
                else
                {
                    ip.selfIllumOut = si * diffuse;
                    ip.diffIllumOut *= (1.0f-si);
                    ip.ambIllumOut *= 1.0f-si;	
                }
            }           
        }
        else
        {
            ip.selfIllumOut = selfIllumClr;
        }    
        
        ip.ambIllumOut  *= ambient;


         // ShadeReflection callback evaluates to max_ShadeReflection
        // And our reflection map (already evaluated) is 18
		map_color = Color(0);
        doReflMap(StdMaps_On__18, StdMaps_Map_18, map_color);
        max_ShadeReflection(ip, 
                            map_color, 
                            StdMaps_Amt_18,
                            specular,
                            StdExtendedParameters_ApplyReflectionDimming,
                            StdExtendedParameters_DimLevel,
                            StdExtendedParameters_ReflectionLevel
                            );

        // ShadeTransmission callback evaluates to max_ShadeTransmission
        // And our refraction map (already evaluated) is 19
		map_color = Color(0);
         doRefrMap(StdMaps_On__19, StdMaps_Map_19, map_color);
         max_ShadeTransmission(ip, 
                              map_color, 
                              StdMaps_Amt_19,
                              opacity,
                              StdExtendedParameters_OpacityType,
                              filter_color,
                              diffuse);
       
         // combineComponents callback evaluates to max_CombineComponentsAdd
        max_CombineComponentsComp(ip);

        // Return final color
        result.rgb = ip.finalC.rgb;
        result.a = 1.0 - maxIntensity(ip.finalT);
    }
};
