/******************************************************************************
 * Copyright 1986-2011 by mental images GmbH, Fasanenstr. 81, D-10623 Berlin,
 * Germany. All rights reserved.
 *****************************************************************************/

shader Normals_make_normal
{
  input:
    Color color = Color(0.5, 0.5, 1.0, 0.0) // this will map to +Z
    {
	display_name("Color");
	soft_range(Color(0,0,0,0),Color(1,1,1,1));
	description( "The color that will be transformed into a normal." );
    };
    float amount = 1.0
    {
	display_name("Amount");
	soft_range(-1,1);
	description( "Factor by which to scale the tangent space normal. "
	             "0 results in an unperturbed normal." );
    };

  output:
    float3 result;

    void main()
    {
	// expand into [0,1] range
	float3 n = (color.xyz-0.5)*2.0;

	n.xy *= amount;

	// transform the normal from tangent space
	// into view space and normalize
	result = normalize(n*tangent_space[0]);
    }
}
{
    description( "Transforms a normal in tangent space, often from a normal "
                 "map, into internal space." );
}
;

shader Normals_bumpmap
{
  input:
    Texture2d normalmap = "default_normal.dds"
    {
	display_name("Normal Map Texture");
	description( "The color that will be transformed into a normal." );
    };
    float amount = 1.0
    {
	display_name("Amount");
	soft_range(-1,1);
	description( "Factor by which to scale tangent space normal. "
	              "0 will result in an unperturbed normal." );
    };
    int texture_space = 0
    {
	display_name("Texture Space");
	literal();
	description( "The texture coordinates set to use when sampling the "
	             "input texture." );
	hard_range(0, 3);
    };
    float2 texture_uv = float2(texture_coordinate[texture_space].x,
			       texture_coordinate[texture_space].y)
	{
		display_name("Custom UV Input");
		description("When this parameter is connected, the shader will read "
					"the UV values from there. No effect when not connected.");
	};

  output:
    float3 result;

    void main()
    {
	// expand into [-1,1] range
	float4 n = (tex2D(normalmap, texture_uv)-0.5)*2.0;
	n.xy *= amount;

	// transform the normal witht he normal map according to the tangents
	result = normalize(normal + (n.x *texture_tangent_u[0] + n.y*texture_tangent_v[0]));
    }
}
{
    description( "Modifies the state normal from a normal map." );
}
;
