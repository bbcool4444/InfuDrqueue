/*****************************************************************************
 * Copyright 1986-2011 by mental images GmbH, Fasanenstr. 81, D-10623 Berlin,
 * Germany. All rights reserved.
 *****************************************************************************/
#import  <mi_msl_shared.msl>

shader Illumination_ashikhmin_shirley
{
  input:
    Color  diffuse_color = Color(1,1,1,1)
	{
		display_name("Diffuse Color");
		hard_range(Color(0,0,0,0),Color(1,1,1,1));
		description( "The color used to tint the Diffuse Reflectance Color." );
	};
    float diffuse_scalar = 0.8
	{
		display_name("Diffuse Float");
		hard_range(float(0),float(1));
		description( "The intensity of the light diffusely reflected from "
					 "this surface." );
	};
    Color  specular_color = Color(1,1,1,1)
	{
		display_name("Specular Color");
		hard_range(Color(0,0,0,0),Color(1,1,1,1));
		description( "The color used to tint the Specular Reflectance "
					 "Color." );
	};
    float specular_scalar = 0.1
	{
		display_name("Specular Float");
		hard_range(0,0.3);
		description( "The intensity of the specular light reflections from "
					 "this surface." );
	};
    float shininess_u = 50
	{
		display_name("Shininess U");
		soft_range(0,100);
		description( "The width of specular highlights along the U axis of "
					 "the textures mapped to the surface." );
	};
    float shininess_v = 50
	{
		display_name("Shininess V");
		soft_range(0,100);
		description( "The width of specular highlights along the U axis of "
					 "the textures mapped to the surface." );
	};

  output:
    Color result;
    Color sum;
    Color diffuse;
    Color specular;

    void main()
    {
	diffuse  = Color(0,0,0,0);
	specular = Color(0,0,0,0);

	Color Rd = diffuse_color * diffuse_scalar;
	Color Rs = specular_color * specular_scalar;

	float3 vdir = direction;
	float3 tangent_u = texture_tangent_u[0];
	float3 tangent_v = texture_tangent_v[0];

	// enumerate lights
	Light_iterator light;
	foreach (light)
	{
	    float cos = saturate(light.dot_nl);
	    if (cos > 0.0) {
		Color d = mi_ashikhmin_shirley_diffuse(light.direction,
			vdir, normal, Rd, Rs);

		diffuse += (d * cos) * light.contribution;

		Color s = mi_ashikhmin_shirley_specular(shininess_u,
			shininess_v, light.direction, vdir, normal,
			tangent_u, tangent_v, Rs);
		specular += s * light.contribution * cos;
	    }
	}

	// irradiance term
	Irradiance_options irradiance_options;
	irradiance_options.set_importance(diffuse_scalar);
	diffuse += Rd/PI * irradiance(irradiance_options);

	diffuse.a = 1.0;
	specular.a = 1.0;
	sum = diffuse + specular;
	result = sum;
    }
}
{
	description( "An illumination model for anisotropic surfaces, "
	             "such as brushed metal or cloth." );
}
;
