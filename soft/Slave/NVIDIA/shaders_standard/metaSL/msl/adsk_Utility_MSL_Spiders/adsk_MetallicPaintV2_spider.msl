/******************************************************************************
 * The following code was generated by the mental mill(R)                     *
 * code generator gen_msl, build 126420.5925.2036
 *                                                                            *
 * Portions Copyright (c) 1986-2010 mental images GmbH, Berlin, Germany.      *
 ******************************************************************************/


// Option settings:
//	shader_type : surface


Color adsk_MSL_FNC_rgbTOhsva(in Color RGB)
{
    float R = RGB.r, G = RGB.g, B = RGB.b, A = RGB.a;
    float v, x, f;
    int i = 0;
    Color HSV = float4(0.0f);
    x = R;
    if(G < x)
        x = G;
    if(B < x)
        x = B;
    v = R;
    if(G > v)
        v = G;
    if(B > v)
        v = B;
    HSV.b = v;
    if(v == x) {
        HSV.r = (HSV.g = 0.0f);
    } else {
        f = R == x ? G - B : (G == x ? B - R : R - G);
        i = R == x ? 3 : (G == x ? 5 : 1);
        HSV.r = (float(i) - f / (v - x)) / 6.0f;
        HSV.g = (v - x) / v;
    }
    HSV.a = A;
    return HSV;
}

Color adsk_MSL_FNC_hsvTOrgba(in Color HSV)
{
    Color RGB = float4(0.0f);
    float h = HSV.r, s = HSV.g, v = HSV.b, a = HSV.a;
    if(h == 1.0f || h == 0.0f)
        h = .9999f;
    h *= 6.0f;
    int i;
    float f, p, q, t;
    i = int(floor(h));
    f = h - float(i);
    p = v * (1.0f - s);
    q = v * (1.0f - s * f);
    t = v * (1.0f - s * (1.0f - f));
    switch(i) {
    case 0:
        {
            RGB.r = v;
            RGB.g = t;
            RGB.b = p;
            break;
        }
    case 1:
        {
            RGB.r = q;
            RGB.g = v;
            RGB.b = p;
            break;
        }
    case 2:
        {
            RGB.r = p;
            RGB.g = v;
            RGB.b = t;
            break;
        }
    case 3:
        {
            RGB.r = p;
            RGB.g = q;
            RGB.b = v;
            break;
        }
    case 4:
        {
            RGB.r = t;
            RGB.g = p;
            RGB.b = v;
            break;
        }
    case 5:
        {
            RGB.r = v;
            RGB.g = p;
            RGB.b = q;
            break;
        }
    }
    RGB.a = a;
    return RGB;
}

float adsk_Utility_MSL_Function_ChangeRange(in float the_value,in float i_min,in float i_max,in float o_min,in float o_max)
{
    if(the_value == 0.0f)
        return 0.0f;
    float iRange = i_max - i_min;
    float oRange = o_max - o_min;
    if(iRange == 0.0f) {
        return the_value;
    }
    float ioRatio = oRange / iRange;
    float iDelta = the_value - i_min;
    float iConvert = ioRatio * iDelta;
    return iConvert + o_min;
}

float adsk_Utility_MSL_Function_Threshold(in float the_value,in float o_min,in float o_max)
{
    if(the_value == 0.0f || the_value < o_min)
        return 0.0f;
    if(the_value >= o_max)
        return 1.0f;
    float mix_value = (the_value - o_min) / (o_max - o_min);
    return (mix_value * mix_value) * (3.0f - 2.0f * mix_value);
}

shader adsk_Utility_MSL_HSV_Correct {

output:

    Color result;

input:

    Color iColor = float4(0.0f,0.0f,0.0f,1.0f);
    float hue = 1.0f
            {
                hard_range(0.0f,2.0f);
            };
    float sat = 1.0f
            {
                hard_range(0.0f,2.0f);
            };
    float val = 1.0f
            {
                hard_range(0.0f,2.0f);
            };

member:


    void main()
    {
        result = float4(0.0f);
        Color hColor = float4(0.0f);
        hColor = adsk_MSL_FNC_rgbTOhsva(iColor);
        hColor.r *= hue;
        hColor.g *= sat;
        hColor.b *= val;
        result = adsk_MSL_FNC_hsvTOrgba(hColor);
    }
};


shader adsk_Utility_MSL_BaseOutput {

output:

    Color result;

input:

    Color ColorInput = float4(1.0f,1.0f,0.0f,1.0f);
    float RGBAmount = 1.0f;
    float RGBOffset = 0.0f;
    float OutputAmount = 1.0f;
    bool Invert = false;
    bool Clamp = false;
    bool AlphaFromRGB = false;

member:


    void main()
    {
        result = float4(0.0f,0.0f,0.0f,0.0f);
        result = ColorInput;
        if(RGBAmount != 1.0f)
            result.rgb *= RGBAmount;
        if(RGBOffset != 0.0f)
            result.rgb += RGBOffset * result.a;
        if(OutputAmount != 1.0f)
            result.rgba *= OutputAmount;
        if(Invert)
            result.rgb = 1.0f - result.rgb;
        if(Clamp)
            result = saturate(result);
        if(AlphaFromRGB)
            result.a = ((result.r + result.g) + result.b) / 3.0f;
    }
};


shader adsk_Utility_MSL_SmoothThreshold_Filter {

output:

    float result;

input:

    float input = 0.0f;
    float low = 0.0f;
    float high = 1.0f;
    float filter = 0.0f;

member:


    void main()
    {
        result = 0.0f;
        float al = low - filter;
        float ah = low + filter;
        float bl = high - filter;
        float bh = high + filter;
        if(input < al)
            result = 0.0f;
        if(input > bh)
            result = 1.0f;
        if(input < ah) {
            float u = (input - al) / (ah - al);
            u = (u * u) * (3.0f - 2.0f * u);
            result = (u * (input - low)) / (high - low);
        }
        if(input < bl) {
            result = (input - low) / (high - low);
        } else {
            float u = (input - bl) / (bh - bl);
            u = (u * u) * (3.0f - 2.0f * u);
            result = ((1.0f - u) * (input - low)) / (high - low) + u;
        }
    }
};


shader adsk_Utility_MSL_SmoothThreshold {

output:

    float result;

input:

    float input = 0.0f;
    float low = 0.0f;
    float high = 1.0f;

member:


    void main()
    {
        result = 0.0f;
        if(input < low) {
            result = 0.0f;
            return;
        }
        if(input > high) {
            result = 1.0f;
            return;
        }
        if(low == high) {
            result = input;
            return;
        }
        result = (input - low) / (high - low);
    }
};


shader adsk_Utility_MSL_Change_Range {

output:

    float result;

input:

    float the_value;
    float i_min;
    float i_max;
    float o_min;
    float o_max;

member:


    void main()
    {
        result = 0.0f;
        result = adsk_Utility_MSL_Function_ChangeRange(the_value,i_min,i_max,o_min,o_max);
    }
};


shader adsk_Utility_MSL_Curve_Mix {

output:

    float result;

input:

    float the_value;
    float o_min;
    float o_max;

member:


    void main()
    {
        result = 0.0f;
        result = adsk_Utility_MSL_Function_Threshold(the_value,o_min,o_max);
    }
};


shader adsk_Utility_MSL_MultiplyDivide {

output:

    float3 result;

input:

    int operation;
    float3 input1;
    float3 input2;

member:


    void main()
    {
        result = float3(0.0f,0.0f,0.0f);
        switch(operation) {
        case 0:
            result = input1;
            break;
        case 1:
            result = input1 * input2;
            break;
        case 2:
            if((input2.x == 0.0f || input2.y == 0.0f) || input2.z == 0.0f)
                return;
            result = input1 / input2;
            break;
        case 3:
            result = pow(input1,input2);
            break;
        }
    }
};


shader adsk_Utility_MSL_Condition {

output:

    Color result;

input:

    int operation;
    float firstTerm;
    float secondTerm;
    Color color1 = float4(1.0f,1.0f,1.0f,1.0f);
    Color color2 = float4(0.0f,0.0f,0.0f,0.0f);

member:


    void main()
    {
        result = float4(0.0f,0.0f,0.0f,0.0f);
        switch(operation) {
        case 0:
            if(firstTerm == secondTerm)
                result = color1;
            else
                result = color2;
            break;
        case 1:
            if(firstTerm != secondTerm)
                result = color1;
            else
                result = color2;
            break;
        case 2:
            if(firstTerm > secondTerm)
                result = color1;
            else
                result = color2;
            break;
        case 3:
            if(firstTerm >= secondTerm)
                result = color1;
            else
                result = color2;
            break;
        case 4:
            if(firstTerm < secondTerm)
                result = color1;
            else
                result = color2;
            break;
        case 5:
            if(firstTerm <= secondTerm)
                result = color1;
            else
                result = color2;
            break;
        }
    }
};


shader adsk_Utility_MSL_Gamma {

output:

    float3 result;

input:

    float3 value = float3(0.0f,0.0f,0.0f);
    float3 gamma = float3(1.0f,1.0f,1.0f);

member:


    void main()
    {
        result = float3(0.0f,0.0f,0.0f);
        result = pow(value,gamma);
    }
};


shader adsk_Utility_MSL_Contrast {

output:

    float3 result;

input:

    float3 value = float3(0.0f,0.0f,0.0f);
    float3 contrast = float3(1.0f,1.0f,1.0f);
    float3 bias = float3(0.5f,0.5f,0.5f);

member:


    float MAYA_CLAMP(in float value,in float min,in float max)
    {
        if(value > max)
            value = max;
        else if(value < min)
            value = min;
        return value;
    }

    void main()
    {
        result = float3(0.0f,0.0f,0.0f);
        float xp;
        float log2 = log(2.0f);
        if(value.x <= 0.0f)
            result.x = 0.0f;
        else {
            xp = log2 / log(MAYA_CLAMP(bias.x,0.00001f,0.99999f));
            xp = 2.0f * pow(value.x,-xp);
            result.x = xp <= 1.0f ? 0.5f * pow(xp,contrast.x) : 1.0f - 0.5f * pow((2.0f - xp),contrast.x);
        }
        if(value.y <= 0.0f)
            result.y = 0.0f;
        else {
            xp = log2 / log(MAYA_CLAMP(bias.y,0.00001f,0.99999f));
            xp = 2.0f * pow(value.y,-xp);
            result.y = xp <= 1.0f ? 0.5f * pow(xp,contrast.y) : 1.0f - 0.5f * pow((2.0f - xp),contrast.y);
        }
        if(value.z <= 0.0f)
            result.z = 0.0f;
        else {
            xp = log2 / log(MAYA_CLAMP(bias.z,0.00001f,0.99999f));
            xp = 2.0f * pow(value.z,-xp);
            result.z = xp <= 1.0f ? 0.5f * pow(xp,contrast.z) : 1.0f - 0.5f * pow((2.0f - xp),contrast.z);
        }
    }
};


shader adsk_Utility_MSL_DegToRad {

output:

    float result;

input:

    float iDeg;

member:


    void main()
    {
        result = 0.0f;
        result = (iDeg * 0.005556f) * 3.14159265358979323846f;
    }
};


shader adsk_Utility_MSL_RadToDeg {

output:

    float result;

input:

    float iRad;

member:


    void main()
    {
        result = 0.0f;
        result = (iRad * 180.0f) * 0.31831f;
    }
};


shader adsk_Shd_MSL_MetallicPaint_V2_spider {

output:

    float base_weight;
    float base_bias;
    float reflectivity;
    float refl_gloss;
    float brdf_0_degree_refl;
    float brdf_90_degree_refl;
    float brdf_curve;
    float flake_switcher;
    float flake_reflect;
    float flake_exp;
    float flake_size;
    Color pearl_color;
    float pearl_ior;
    Color spec_color;
    float spec_exp;
    float spec_weight;
    bool highlight_glazing;
    float highlight_factor;
    float highlight_weight;
    bool highlight_bypass_glossy_fx;

input:

    int type;
    Color base_color;
    float base_luma;
    float refl_gloss_i;
    float refl_falloff;
    int flake_enable;
    float flake_size_i;
    int pearl_enable;
    Color pearl_color_i;
    float pearl_ior_i;
    float iSceneToMeterScale;

member:


    void main()
    {
        base_weight = 1.0f;
        base_bias = 1.0f;
        reflectivity = 0.88f;
        refl_gloss = 1.0f;
        brdf_0_degree_refl = 0.2f;
        brdf_90_degree_refl = 1.0f;
        brdf_curve = 7.0f;
        flake_switcher = 0.0f;
        flake_reflect = 1.0f;
        flake_exp = 40.0f;
        flake_size = 0.01f;
        pearl_color = float4(0.0f,0.0f,0.0f,0.0f);
        pearl_ior = 0.0f;
        spec_color = float4(0.0f,0.0f,0.0f,0.0f);
        spec_exp = 10.0f;
        spec_weight = 0.6f;
        highlight_glazing = true;
        highlight_factor = 8.0f;
        highlight_weight = 1.0f;
        highlight_bypass_glossy_fx = false;
        int X0000000 = 0;
        switch(flake_enable) {
        case 0:
            X0000000 = 0;
            break;
        case 1:
            X0000000 = 1;
            break;
        }
        base_bias = 1.0f + base_luma;
        spec_weight *= base_luma;
        if(X0000000 != 0)
            flake_switcher = 1.0f;
        else
            flake_switcher = 0.0f;
        Color X0000001 = float4(0.0f);
        X0000001 = adsk_MSL_FNC_rgbTOhsva(base_color);
        X0000001.r *= 0.9f;
        spec_color = adsk_MSL_FNC_hsvTOrgba(X0000001);
        switch(type) {
        case 0:
            refl_gloss = 1.0f;
            break;
        case 1:
            base_weight = 0.48f;
            spec_weight = 0.1f;
            reflectivity = 0.92f;
            refl_gloss = 1.0f;
            brdf_0_degree_refl = 0.78f;
            flake_exp = 120.0f;
            if(X0000000 != 0)
                flake_switcher = 0.5f;
            break;
        case 2:
            spec_color = float4(0.0f);
            spec_weight = 0.0f;
            highlight_glazing = false;
            refl_gloss = 0.52f;
            brdf_0_degree_refl = 0.12f;
            brdf_90_degree_refl = 0.78f;
            brdf_curve = 5.0f;
            if(X0000000 != 0) {
                flake_switcher = 0.6f;
                flake_reflect = 0.0f;
                flake_exp = 24.0f;
            }
            break;
        case 3:
            if(refl_gloss_i == 1.0f)
                highlight_glazing = true;
            else
                highlight_glazing = false;
            highlight_factor = 0.0f;
            highlight_bypass_glossy_fx = true;
            brdf_0_degree_refl = 1.0f - refl_falloff;
            brdf_90_degree_refl = 0.72f;
            brdf_curve = 5.0f;
            refl_gloss = 90.0f * refl_gloss_i + 10.0f;
            highlight_weight = (1.0f * brdf_0_degree_refl) * refl_gloss_i;
            spec_color = float4(1.0f);
            spec_exp = 30.0f * refl_gloss_i + 4.0f;
            spec_weight = (1.0f * brdf_0_degree_refl) * refl_gloss_i;
            if(X0000000 != 0) {
                flake_switcher = 1.0f * (brdf_0_degree_refl / 1.5f);
                flake_exp = 45.0f * (refl_gloss / 2.0f) + 12.0f;
            }
            break;
        }
        flake_switcher *= 2.0f;
        switch(pearl_enable) {
        case 0:
            pearl_ior = 0.000f;
            break;
        case 1:
            pearl_color = pearl_color_i;
            pearl_ior = pearl_ior_i;
            break;
        case 2:
            pearl_ior = pearl_ior_i;
            pearl_color = pearl_color_i;
            break;
        }
        flake_size = flake_size_i * 0.66f;
    }
};
