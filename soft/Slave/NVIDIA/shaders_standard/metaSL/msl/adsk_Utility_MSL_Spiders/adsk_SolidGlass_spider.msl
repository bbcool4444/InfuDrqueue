/******************************************************************************
 * The following code was generated by the mental mill(R)                     *
 * code generator gen_msl, build 126420.5925.2036
 *                                                                            *
 * Portions Copyright (c) 1986-2010 mental images GmbH, Berlin, Germany.      *
 ******************************************************************************/


// Option settings:
//	shader_type : surface


shader adsk_Shd_MSL_SolidGlass_spider {

output:

    Color refl_color;
    float brdf_0_degree_refl;
    Color refr_color;
    float refr_falloff_dist;
    Color refr_falloff_color;
    float glossiness;
    float3 bump_tiling;
    float bump_amount;
    float bump_map_amount;

input:

    int transmittance_color;
    Color transmittance_map;
    float reflectance;
    float refr_falloff_dist_i;
    float glossiness_i;
    int bump_switch;
    float bump_amount_i;
    float iSceneToMeterScale;

member:


    float X0000000(Color X0000007)
    {
        float X0000008 = X0000007.r;
        if(X0000008 < X0000007.g)
            X0000008 = X0000007.g;
        if(X0000008 < X0000007.b)
            X0000008 = X0000007.b;
        return X0000008;
    }

    float X0000001(Color X0000009)
    {
        float X0000010 = (0.265f * X0000009.r + 0.67f * X0000009.g) + 0.065f * X0000009.b;
        return X0000010;
    }

    Color X0000002(Color X0000011)
    {
        Color X0000012;
        float X0000013 = X0000000(X0000011);
        X0000012 = X0000011 / X0000013;
        return X0000012;
    }

    Color X0000003(Color X0000014,Color X0000015)
    {
        Color X0000016;
        float X0000017 = 1.0f - X0000000(X0000014);
        X0000016 = X0000015 / X0000017;
        return X0000016;
    }

    Color X0000004(Color X0000018,Color X0000019,int X0000020)
    {
        Color X0000021;
        if(X0000020 == 1) {
            X0000021 = X0000003(X0000018,X0000019);
        } else {
            Color X0000022 = X0000003(X0000018,X0000019);
            float X0000023 = pow(1.0f - X0000001(X0000018),float(X0000020));
            X0000021 = X0000019 / X0000023;
            Color X0000024;
            X0000024 = X0000021 - X0000022;
            X0000021 = X0000022 - X0000024;
        }
        return X0000021;
    }

    float X0000005(Color X0000025)
    {
        Color X0000026 = X0000002(X0000025);
        float X0000027 = X0000001(X0000026);
        float X0000028 = X0000001(X0000025);
        float X0000029 = X0000028 / X0000027;
        return X0000029;
    }

    Color X0000006(Color X0000030,Color X0000031)
    {
        float X0000032 = pow(1.0f - X0000001(X0000030),2.0f);
        Color X0000033;
        X0000033 = X0000031 * X0000032;
        return X0000033;
    }

    void main()
    {
        refl_color = float4(1.0f,1.0f,1.0f,1.0f);
        brdf_0_degree_refl = 0.2f;
        refr_color = float4(1.0f,1.0f,1.0f,1.0f);
        refr_falloff_dist = 0.0f;
        refr_falloff_color = float4(1.0f,1.0f,1.0f,1.0f);
        glossiness = 1.0f;
        bump_tiling = float3(1.0f,1.0f,1.0f);
        bump_amount = 0.0f;
        bump_map_amount = 0.0f;
        Color X0000034 = float4(reflectance,reflectance,reflectance,1.0f);
        Color X0000035 = float4(0.0f,0.0f,0.0f,1.0f);
        Color X0000036 = float4(0.858f,0.893f,0.879f,1.0f);
        Color X0000037 = float4(0.676f,0.797f,0.737f,1.0f);
        Color X0000038 = float4(0.451f,0.449f,0.472f,1.0f);
        Color X0000039 = float4(0.367f,0.514f,0.651f,1.0f);
        Color X0000040 = float4(0.654f,0.788f,0.772f,1.0f);
        Color X0000041 = float4(0.583f,0.516f,0.467f,1.0f);
        switch(transmittance_color) {
        case 0:
            X0000035 = X0000036;
            break;
        case 1:
            X0000035 = X0000037;
            break;
        case 2:
            X0000035 = X0000038;
            break;
        case 3:
            X0000035 = X0000039;
            break;
        case 4:
            X0000035 = X0000040;
            break;
        case 5:
            X0000035 = X0000041;
            break;
        case 6:
            X0000035 = transmittance_map;
            break;
        }
        Color X0000042 = float4(1.0f,1.0f,1.0f,1.0f);
        if(reflectance > 0.0f) {
            refl_color = X0000002(X0000034);
            brdf_0_degree_refl = X0000005(X0000034);
        } else {
            refl_color = X0000042;
            brdf_0_degree_refl = reflectance;
        }
        refr_color = X0000035;
        refr_falloff_color = X0000006(X0000034,X0000035);
        refr_falloff_dist = refr_falloff_dist;
        glossiness = 1.0f - glossiness_i;
        float X0000043 = 0.0254f;
        if(iSceneToMeterScale != 0.0f)
            X0000043 = iSceneToMeterScale;
        float X0000044 = 1.0f / X0000043;
        float X0000045 = 39.370079f;
        bump_amount = bump_amount_i;
        bump_map_amount = 0.0f;
        float X0000046 = 6.0f;
        switch(bump_switch) {
        case 0:
            bump_amount = 0.0f;
            bump_map_amount = 0.0f;
            break;
        case 1:
            bump_amount *= 0.1f;
            bump_tiling.x = (39.370079f / X0000044) * X0000046;
            bump_tiling.y = (39.370079f / X0000044) * X0000046;
            bump_tiling.z = (39.370079f / X0000044) * X0000046;
            break;
        case 2:
            bump_amount *= 0.1f;
            bump_tiling.x = (39.370079f / X0000044) * X0000046;
            bump_tiling.y = (11.8110237f / X0000044) * X0000046;
            bump_tiling.z = (11.8110237f / X0000044) * X0000046;
            break;
        case 3:
            bump_amount = 0.0f;
            bump_map_amount = bump_amount_i * 10.0f;
            break;
        }
    }
}
{
    description("MetaSL SolidGlass Spider");
};
