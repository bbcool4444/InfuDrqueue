/******************************************************************************
 * The following code was generated by the mental mill(R)                     *
 * code generator gen_msl, build 126420.5925.2036
 *                                                                            *
 * Portions Copyright (c) 1986-2010 mental images GmbH, Berlin, Germany.      *
 ******************************************************************************/


// Option settings:
//	shader_type : surface


shader adsk_Shd_MSL_WallPaint_spider {

output:

    float diffuse_roughness;
    float reflectivity;
    float refl_gloss;
    float brdf_curve;
    bool refl_hl_only;
    float bump_amount;
    float3 noise_tiling;

input:

    int finish;
    int application;
    float iSceneToMeterScale;

member:


    void main()
    {
        refl_hl_only = false;
        switch(finish) {
        case 0:
            diffuse_roughness = 0.15f;
            reflectivity = 0.4f;
            refl_gloss = 0.13f;
            brdf_curve = 2.5f;
            break;
        case 1:
            diffuse_roughness = 0.2f;
            reflectivity = 0.55f;
            refl_gloss = 0.21f;
            brdf_curve = 3.9f;
            break;
        case 2:
            diffuse_roughness = 0.2f;
            reflectivity = 0.575f;
            refl_gloss = 0.3f;
            brdf_curve = 3.9f;
            break;
        case 3:
            diffuse_roughness = 0.18f;
            reflectivity = 0.6f;
            refl_gloss = 0.35f;
            brdf_curve = 3.9f;
            break;
        case 4:
            diffuse_roughness = 0.14f;
            reflectivity = 0.6f;
            refl_gloss = 0.4f;
            brdf_curve = 2.8f;
            break;
        case 5:
            diffuse_roughness = 0.15f;
            reflectivity = 0.46f;
            refl_gloss = 0.54f;
            brdf_curve = 2.8f;
            break;
        }
        switch(application) {
        case 0:
            bump_amount = 0.01f;
            break;
        case 1:
            bump_amount = 0.01f;
            break;
        case 2:
            bump_amount = 0.0f;
            break;
        }
        float X0000000 = 0.0254f;
        if(iSceneToMeterScale != 0.0f)
            X0000000 = iSceneToMeterScale;
        noise_tiling.z = 0.0f;
        if(application == 0) {
            noise_tiling.x = 1.2f / X0000000;
            noise_tiling.y = 0.7f / X0000000;
        } else if(application == 1) {
            noise_tiling.x = .5f / X0000000;
            noise_tiling.y = 5.0f / X0000000;
        }
    }
};
