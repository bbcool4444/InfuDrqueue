/******************************************************************************
 * The following code was generated by the mental mill(R)                     *
 * code generator gen_msl, build 126420.5925.2036
 *                                                                            *
 * Portions Copyright (c) 1986-2010 mental images GmbH, Berlin, Germany.      *
 ******************************************************************************/


// Option settings:
//	shader_type : surface


shader adsk_Shd_MSL_Metal_spider {

output:

    float diffuse_weight;
    float diffuse_roughness;
    float reflectivity;
    float refl_gloss;
    bool refl_is_metal;
    float brdf_0_degree_refl;
    float brdf_curve;
    float bump_global_amount;
    float bump_local_amount;
    int bump_switcher;
    int bump_custom_switcher;
    int aniso_switcher;
    int anisorot_switcher;
    Color diffuse_color;
    float anisotropy;
    float aniso_map_amount;
    float anisorot_map_amount;
    float rw_uv_scale;

input:

    int type;
    Color diffuse_color_i;
    int application;
    int patterns;
    float iBump;
    float rw_uv_scale_i;
    float iSceneToMeterScale;

member:


    void main()
    {
        diffuse_weight = 0.0f;
        diffuse_roughness = 0.0f;
        reflectivity = 0.0f;
        refl_gloss = 0.0f;
        refl_is_metal = false;
        brdf_0_degree_refl = 0.0f;
        brdf_curve = 0.0f;
        bump_global_amount = 0.0f;
        bump_local_amount = 0.0f;
        bump_switcher = 0;
        bump_custom_switcher = 0;
        aniso_switcher = 0;
        anisorot_switcher = 0;
        diffuse_color = float4(0.0f,0.0f,0.0f,0.0f);
        anisotropy = 0.0f;
        aniso_map_amount = 0.0f;
        anisorot_map_amount = 0.0f;
        rw_uv_scale = 0.0f;
        bump_global_amount = 0.1f;
        refl_is_metal = true;
        bump_global_amount = iBump;
        bump_local_amount = iBump;
        switch(type) {
        case 0:
            diffuse_color.r = (diffuse_color.g = (diffuse_color.b = 0.957f));
            diffuse_weight = .8f;
            diffuse_roughness = 0.2f;
            reflectivity = 0.8f;
            brdf_0_degree_refl = 0.4f;
            brdf_curve = 2.0f;
            anisotropy = 0.25f;
            anisorot_switcher = 1;
            switch(application) {
            case 0:
                refl_gloss = 1.0f;
                break;
            case 1:
                refl_gloss = 0.425f;
                break;
            case 2:
                refl_gloss = 0.225f;
                bump_global_amount = 0.065f;
                break;
            }
            break;
        case 1:
            diffuse_color = diffuse_color_i;
            diffuse_weight = .8f;
            diffuse_roughness = 0.2f;
            reflectivity = 0.8f;
            refl_gloss = 0.3f;
            brdf_0_degree_refl = 0.6f;
            brdf_curve = 1.0f;
            aniso_switcher = 4;
            anisorot_switcher = 4;
            break;
        case 2:
            diffuse_color.r = (diffuse_color.g = (diffuse_color.b = 0.957f));
            diffuse_weight = 1.0f;
            diffuse_roughness = 0.5f;
            reflectivity = 1.0f;
            brdf_0_degree_refl = 0.88f;
            brdf_curve = 4.8f;
            anisotropy = 1.0f;
            switch(application) {
            case 0:
                refl_gloss = 0.92f;
                break;
            case 1:
                refl_gloss = 0.5f;
                break;
            case 2:
                refl_gloss = 0.275f;
                bump_global_amount = 0.065f;
                break;
            }
            break;
        case 3:
            diffuse_color.r = 0.737f;
            diffuse_color.g = 0.314f;
            diffuse_color.b = 0.184f;
            diffuse_weight = .8f;
            diffuse_roughness = 0.0f;
            reflectivity = 1.0f;
            brdf_0_degree_refl = 0.9f;
            brdf_curve = 5.0f;
            anisotropy = 0.25f;
            switch(application) {
            case 0:
                refl_gloss = 0.9f;
                break;
            case 1:
                refl_gloss = 0.6f;
                break;
            case 2:
                reflectivity = 0.8f;
                refl_gloss = 0.225f;
                bump_global_amount = 0.065f;
                break;
            }
            break;
        case 4:
            diffuse_color.r = 0.796f;
            diffuse_color.g = 0.604f;
            diffuse_color.b = 0.231f;
            diffuse_weight = 0.1f;
            diffuse_roughness = 0.0f;
            reflectivity = 1.0f;
            brdf_0_degree_refl = 0.9f;
            brdf_curve = 5.0f;
            anisotropy = 0.25f;
            switch(application) {
            case 0:
                refl_gloss = 0.9f;
                break;
            case 1:
                refl_gloss = 0.6f;
                break;
            case 2:
                refl_gloss = 0.225f;
                bump_global_amount = 0.065f;
                break;
            }
            break;
        case 5:
            diffuse_color.r = 0.412f;
            diffuse_color.g = 0.302f;
            diffuse_color.b = 0.231f;
            diffuse_weight = 1.0f;
            diffuse_roughness = 0.0f;
            reflectivity = 0.7f;
            refl_gloss = 0.25f;
            brdf_0_degree_refl = 0.9f;
            brdf_curve = 5.0f;
            anisotropy = 0.25f;
            switch(application) {
            case 0:
                refl_gloss = 0.9f;
                break;
            case 1:
                refl_gloss = 0.6f;
                break;
            case 2:
                reflectivity = 0.7f;
                refl_gloss = 0.25f;
                bump_global_amount = 0.065f;
                break;
            }
            break;
        case 6:
            diffuse_color.r = 0.745f;
            diffuse_color.g = 0.737f;
            diffuse_color.b = 0.729f;
            diffuse_weight = 1.0f;
            diffuse_roughness = 0.0f;
            reflectivity = 0.65f;
            brdf_0_degree_refl = 0.9f;
            brdf_curve = 5.0f;
            anisotropy = 0.25f;
            switch(application) {
            case 0:
                reflectivity = 0.9f;
                refl_gloss = 0.9f;
                break;
            case 1:
                reflectivity = 0.8f;
                refl_gloss = 0.6f;
                break;
            case 2:
                reflectivity = 0.8f;
                refl_gloss = 0.225f;
                bump_global_amount = 0.065f;
                break;
            }
            break;
        case 7:
            diffuse_color.r = 0.647f;
            diffuse_color.g = 0.678f;
            diffuse_color.b = 0.694f;
            diffuse_weight = 1.0f;
            diffuse_roughness = 0.0f;
            reflectivity = 0.85f;
            brdf_0_degree_refl = 0.9f;
            brdf_curve = 5.0f;
            anisotropy = 0.25f;
            diffuse_roughness = 0.0f;
            refl_gloss = 0.225f;
            aniso_switcher = (anisorot_switcher = 2);
            aniso_map_amount = 0.6f;
            anisorot_map_amount = 0.8f;
            break;
        }
        if(application == 3 && type != 7) {
            diffuse_color.r = 0.808f;
            diffuse_color.g = 0.824f;
            diffuse_color.b = 0.839f;
            diffuse_roughness = 0.4f;
            refl_gloss = 0.2f;
            aniso_switcher = (anisorot_switcher = 2);
            aniso_map_amount = 0.6f;
            anisorot_map_amount = 0.8f;
        }
        switch(patterns) {
        case 0:
            bump_global_amount = 0.0f;
            bump_local_amount = 0.0f;
            break;
        case 1:
            bump_local_amount = 0.0f;
            bump_switcher = 2;
            break;
        case 2:
            bump_local_amount = 0.0f;
            bump_switcher = 3;
            break;
        case 3:
            bump_local_amount = 0.0f;
            bump_switcher = 4;
            break;
        case 4:
            bump_global_amount = 0.0f;
            bump_switcher = 5;
            bump_custom_switcher = 1;
            break;
        }
        bump_global_amount *= 2.0f;
        if(diffuse_weight > 0.7f)
            diffuse_weight *= 0.5f;
        float X0000000 = 0.0254f;
        if(iSceneToMeterScale != 0.0f)
            X0000000 = iSceneToMeterScale;
        float X0000001 = 1.0f / X0000000;
        float X0000002 = 39.370079f;
        rw_uv_scale = ((1.0f / rw_uv_scale_i) * (20.0f / X0000002)) * X0000001;
    }
};
