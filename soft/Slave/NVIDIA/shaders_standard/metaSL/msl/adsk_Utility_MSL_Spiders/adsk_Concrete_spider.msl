/******************************************************************************
 * The following code was generated by the mental mill(R)                     *
 * code generator gen_msl, build 126420.5925.2036
 *                                                                            *
 * Portions Copyright (c) 1986-2010 mental images GmbH, Berlin, Germany.      *
 ******************************************************************************/


// Option settings:
//	shader_type : surface


shader adsk_Shd_MSL_Concrete_spider {

output:

    int brightmode_switcher;
    float diffuse_roughness;
    float reflectivity_noiseColX1;
    float reflectivity_noiseColX2;
    bool refl_hl_only;
    float refl_gloss_noiseColX1;
    float refl_gloss_noiseColX2;
    float brdf_0_degree_refl;
    float brdf_90_degree_refl;
    float brdf_curve;
    float bump_amount;
    int bump_switcher;
    float3 brightauto_tiling;
    float3 noisereflect_tiling;
    float uv_tile;

input:

    int surfacefinish = 0
            {
                hard_range(0,4);
            };
    int sealant = 0
            {
                hard_range(0,2);
            };
    int brightness_variation = 0
            {
                hard_range(0,2);
            };
    float bump_amount_i;
    float uv_x_tile;
    float iSceneToMeterScale;

member:


    void main()
    {
        brightmode_switcher = 0;
        diffuse_roughness = 0.0f;
        reflectivity_noiseColX1 = 0.0f;
        reflectivity_noiseColX2 = 0.0f;
        refl_hl_only = false;
        refl_gloss_noiseColX1 = 0.0f;
        refl_gloss_noiseColX2 = 0.0f;
        brdf_0_degree_refl = 0.0f;
        brdf_90_degree_refl = 0.0f;
        brdf_curve = 0.0f;
        bump_amount = 0.0f;
        bump_switcher = 0;
        brightauto_tiling = float3(0.0f,0.0f,0.0f);
        noisereflect_tiling = float3(0.0f,0.0f,0.0f);
        uv_tile = 0.0f;
        int X0000000 = sealant;
        refl_hl_only = false;
        bump_switcher = surfacefinish;
        switch(surfacefinish) {
        case 0:
            switch(X0000000) {
            case 0:
                diffuse_roughness = 0.5f;
                reflectivity_noiseColX1 = 0.501961f;
                reflectivity_noiseColX2 = 0.882353f;
                refl_hl_only = true;
                refl_gloss_noiseColX1 = 0.117647f;
                refl_gloss_noiseColX2 = 0.352941f;
                brdf_0_degree_refl = 0.9f;
                brdf_90_degree_refl = 0.1f;
                brdf_curve = 0.75f;
                bump_amount = 0.5f;
                break;
            case 1:
                diffuse_roughness = 0.6f;
                reflectivity_noiseColX1 = 0.784314f;
                reflectivity_noiseColX2 = 0.921569f;
                refl_gloss_noiseColX1 = 0.235294f;
                refl_gloss_noiseColX2 = 0.411765f;
                brdf_0_degree_refl = 0.2f;
                brdf_90_degree_refl = 1.0f;
                brdf_curve = 3.0f;
                bump_amount = 0.05f;
                break;
            case 2:
                diffuse_roughness = 0.6f;
                reflectivity_noiseColX1 = 0.784314f;
                reflectivity_noiseColX2 = 0.921569f;
                refl_gloss_noiseColX1 = 0.54902f;
                refl_gloss_noiseColX2 = 0.705882f;
                brdf_0_degree_refl = 0.2f;
                brdf_90_degree_refl = 1.0f;
                brdf_curve = 3.0f;
                bump_amount = 0.03f;
                break;
            }
            break;
        case 1:
            switch(X0000000) {
            case 0:
                diffuse_roughness = 0.5f;
                reflectivity_noiseColX1 = 0.501961f;
                reflectivity_noiseColX2 = 0.882353f;
                refl_hl_only = true;
                refl_gloss_noiseColX1 = 0.137255f;
                refl_gloss_noiseColX2 = 0.333333f;
                brdf_0_degree_refl = 0.9f;
                brdf_90_degree_refl = 0.1f;
                brdf_curve = 0.5f;
                bump_amount = 0.85f;
                break;
            case 1:
                diffuse_roughness = 0.6f;
                reflectivity_noiseColX1 = 0.784314f;
                reflectivity_noiseColX2 = 0.921569f;
                refl_hl_only = true;
                refl_gloss_noiseColX1 = 0.235294f;
                refl_gloss_noiseColX2 = 0.411765f;
                brdf_0_degree_refl = 0.2f;
                brdf_90_degree_refl = 1.0f;
                brdf_curve = 3.0f;
                bump_amount = 0.05f;
                break;
            case 2:
                diffuse_roughness = 0.6f;
                reflectivity_noiseColX1 = 0.784314f;
                reflectivity_noiseColX2 = 0.921569f;
                refl_hl_only = true;
                refl_gloss_noiseColX1 = 0.54902f;
                refl_gloss_noiseColX2 = 0.705882f;
                brdf_0_degree_refl = 0.2f;
                brdf_90_degree_refl = 1.0f;
                brdf_curve = 3.0f;
                bump_amount = 0.03f;
                break;
            }
            break;
        case 2:
            switch(X0000000) {
            case 0:
                diffuse_roughness = 0.6f;
                reflectivity_noiseColX1 = 0.235294f;
                reflectivity_noiseColX2 = 0.501961f;
                refl_gloss_noiseColX1 = 0.235294f;
                refl_gloss_noiseColX2 = 0.352941f;
                brdf_0_degree_refl = 0.9f;
                brdf_90_degree_refl = 0.1f;
                brdf_curve = 0.5f;
                bump_amount = 0.5f;
                break;
            case 1:
                diffuse_roughness = 0.6f;
                reflectivity_noiseColX1 = 0.784314f;
                reflectivity_noiseColX2 = 0.921569f;
                refl_gloss_noiseColX1 = 0.235294f;
                refl_gloss_noiseColX2 = 0.411765f;
                brdf_0_degree_refl = 0.2f;
                brdf_90_degree_refl = 1.0f;
                brdf_curve = 3.0f;
                bump_amount = 0.05f;
                break;
            case 2:
                diffuse_roughness = 0.6f;
                reflectivity_noiseColX1 = 0.784314f;
                reflectivity_noiseColX2 = 0.921569f;
                refl_gloss_noiseColX1 = 0.54902f;
                refl_gloss_noiseColX2 = 0.705882f;
                brdf_0_degree_refl = 0.2f;
                brdf_90_degree_refl = 1.0f;
                brdf_curve = 3.0f;
                bump_amount = 0.03f;
                break;
            }
            break;
        case 3:
            switch(X0000000) {
            case 0:
                diffuse_roughness = 0.5f;
                reflectivity_noiseColX1 = 0.392157f;
                reflectivity_noiseColX2 = 0.54902f;
                refl_gloss_noiseColX1 = 0.352941f;
                refl_gloss_noiseColX2 = 0.509804f;
                brdf_0_degree_refl = 0.6f;
                brdf_90_degree_refl = 0.3f;
                brdf_curve = 1.0f;
                bump_amount = 0.0f;
                break;
            case 1:
                diffuse_roughness = 0.6f;
                reflectivity_noiseColX1 = 0.784314f;
                reflectivity_noiseColX2 = 0.921569f;
                refl_gloss_noiseColX1 = 0.235294f;
                refl_gloss_noiseColX2 = 0.411765f;
                brdf_0_degree_refl = 0.2f;
                brdf_90_degree_refl = 1.0f;
                brdf_curve = 3.0f;
                bump_amount = 0.02f;
                break;
            case 2:
                diffuse_roughness = 0.6f;
                reflectivity_noiseColX1 = 0.784314f;
                reflectivity_noiseColX2 = 0.921569f;
                refl_gloss_noiseColX1 = 0.54902f;
                refl_gloss_noiseColX2 = 0.705882f;
                brdf_0_degree_refl = 0.2f;
                brdf_90_degree_refl = 1.0f;
                brdf_curve = 3.0f;
                bump_amount = 0.03f;
                break;
            }
            break;
        case 4:
            switch(X0000000) {
            case 0:
                diffuse_roughness = 0.6f;
                reflectivity_noiseColX1 = 0.335294f;
                reflectivity_noiseColX2 = 0.501961f;
                refl_hl_only = true;
                refl_gloss_noiseColX1 = 0.235294f;
                refl_gloss_noiseColX2 = 0.352941f;
                brdf_0_degree_refl = 0.9f;
                brdf_90_degree_refl = 0.2f;
                brdf_curve = 0.5f;
                bump_amount = bump_amount_i;
                break;
            case 1:
                diffuse_roughness = 0.6f;
                reflectivity_noiseColX1 = 0.784314f;
                reflectivity_noiseColX2 = 0.921569f;
                refl_gloss_noiseColX1 = 0.235294f;
                refl_gloss_noiseColX2 = 0.411765f;
                brdf_0_degree_refl = 0.2f;
                brdf_90_degree_refl = 1.0f;
                brdf_curve = 3.0f;
                bump_amount = bump_amount;
                break;
            case 2:
                diffuse_roughness = 0.6f;
                reflectivity_noiseColX1 = 0.784314f;
                reflectivity_noiseColX2 = 0.921569f;
                refl_gloss_noiseColX1 = 0.54902f;
                refl_gloss_noiseColX2 = 0.705882f;
                brdf_0_degree_refl = 0.2f;
                brdf_90_degree_refl = 1.0f;
                brdf_curve = 3.0f;
                bump_amount = bump_amount_i;
                break;
            }
            break;
        }
        switch(brightness_variation) {
        case 0:
            brightmode_switcher = 0;
            break;
        case 1:
            brightmode_switcher = 1;
            break;
        case 2:
            brightmode_switcher = 2;
            break;
        }
        float X0000001 = 0.0254f;
        if(iSceneToMeterScale != 0.0f)
            X0000001 = iSceneToMeterScale;
        float X0000002 = 1.0f / X0000001;
        float X0000003 = 39.370079f;
        brightauto_tiling.x = (brightauto_tiling.y = (brightauto_tiling.z = (noisereflect_tiling.x = (noisereflect_tiling.y = (noisereflect_tiling.z = (0.2f * X0000003) / X0000002)))));
        float X0000004 = X0000003;
        uv_tile = (uv_x_tile * (20.0f / X0000003)) * X0000002;
    }
};
