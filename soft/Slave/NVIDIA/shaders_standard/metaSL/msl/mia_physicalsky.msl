// $Revision: 477 $

/*** This code was generated by gen_msl ***/

shader mia_physicalsky {

input:

	Bool on = true
		{
			display_name("On");
			description("activates / deactivates shader");
		};
	Scalar multiplier = 0.025
		{
			display_name("Multiplier");
			description("Scales the lightness of the environment");
			soft_range(0.0,1.0);
		};
	Color rgb_unit_conversion = Color(0.000666667,0.000666667,0.000666667,1.0)
		{
			display_name("RGB Unit conversion");
			description("When not using logarithmic exposure, use this value to scale color intensities to lie in a manageable range");
			soft_range(Color(0.0,0.0,0.0,0.0),Color(1.0,1.0,1.0,1.0));
		};
	Scalar haze = 0.5
		{
			display_name("Haze");
			description("Sets the amount of haze in the air");
		};
	Scalar redblueshift = 0.0
		{
			display_name("Red/Blue tint");
			description("Lets you shift the color towards blue / red");
			hard_range(-1.0,1.0);
		};
	Scalar saturation = 0.5
		{
			display_name("Saturation");
			description("Lets you adjust the saturation of the sky. A value of 0 gives a grayscale sky, 1 is neutral and 2 boosts the colors");
			hard_range(0.0,2.0);
		};
	Scalar horizon_height = 0.001
		{
			display_name("Horizon height");
			description("vertical position of the horizon");
			soft_range(-3.0,3.0);
		};
	Scalar horizon_blur = 0.1
		{
			display_name("Horizon blur");
			description("Sets the blurriness of the horizon. At 0, the horizon is completely sharp");
			hard_range(0.0,10.0);
		};
	Color ground_color = Color(0.4,0.4,0.4,1.0)
		{
			display_name("Ground color");
			description("The color of the virtual ground plane");
			soft_range(Color(0.0,0.0,0.0,0.0),Color(1.0,1.0,1.0,1.0));
		};
	Color night_color = Color(0.0,0.0,0.0,1.0)
		{
			display_name("Night Color");
			description("The maximum darkest value that the sky can be");
			soft_range(Color(0.0,0.0,0.0,0.0),Color(1.0,1.0,1.0,1.0));
		};
	Vector3 sun_direction = Vector3(0.0,0.229271,0.418882)
		{
			display_name("Sun direction");
			description("A vector value that describes the position of the sun. The Y-component describes the horizontal height");
			soft_range(Vector3(-1.0,-1.0,-1.0),Vector3(1.0,1.0,1.0));
		};
	Scalar sun_disk_intensity = 0.01
		{
			display_name("Sun disk intensity");
			description("The intensity of the visible sun disk");
			soft_range(0.0,1.0);
		};
	Scalar sun_disk_scale = 0.5
		{
			display_name("Sun disk scale");
			description("The size of the visible sun disk");
			soft_range(0.0,30.0);
		};
	Scalar sun_glow_intensity = 1.0
		{
			display_name("");
			description("");
		};
	Bool y_is_up
		{
			display_name("Y is up");
			description("Defines what direction is up");
		};

output:

	Color result;

	void X0000000(inout Scalar X0000011,inout Scalar X0000012,in Scalar X0000013,in Scalar X0000014)
	{
		Scalar X0000015 = 2 * X0000013 - 1;
		Scalar X0000016 = 2 * X0000014 - 1;
		if(X0000015 == 0.0 && X0000016 == 0.0)
			{
				X0000012 = 0.0;
				X0000011 = 0.0;
			}
		else
			{
				if(X0000015 > -X0000016)
					{
						if(X0000015 > X0000016)
							{
								X0000011 = X0000015;
								X0000012 = (3.14159265358979323846f / 4.0) * (1.0 + X0000016 / X0000015);
							}
						else
							{
								X0000011 = X0000016;
								X0000012 = (3.14159265358979323846f / 4.0) * (3.0 - X0000015 / X0000016);
							}
					}
				else
					{
						if(X0000015 < X0000016)
							{
								X0000011 = -X0000015;
								X0000012 = (3.14159265358979323846f / 4.0) * (5.0 + X0000016 / X0000015);
							}
						else
							{
								X0000011 = -X0000016;
								X0000012 = (3.14159265358979323846f / 4.0) * (7.0 - X0000015 / X0000016);
							}
					}
			}
	}


	void X0000001(inout Vector3 X0000017,in Vector3 X0000018,in Scalar X0000019,in Scalar X0000020,in Scalar X0000021)
	{
		Vector3 X0000022;
		Vector3 X0000023;
		Vector3 X0000024 = X0000018 * Matrix3x3(object_to_internal);
		if(abs(X0000024.x) < abs(X0000024.y))
			{
				X0000022.x = 0.0;
				X0000022.y = -(X0000024.z);
				X0000022.z = X0000024.y;
			}
		else
			{
				X0000022.x = X0000024.z;
				X0000022.y = 0.0;
				X0000022.z = -(X0000024.x);
			}
		X0000022 = Matrix3x3(object_to_internal) * X0000022;
		if(length(X0000022) == 0.0)
			{
				if(abs(X0000018.x) < abs(X0000018.y))
					{
						X0000022.x = 0.0;
						X0000022.y = -(X0000018.z);
						X0000022.z = X0000018.y;
					}
				else
					{
						X0000022.x = X0000018.z;
						X0000022.y = 0.0;
						X0000022.z = -(X0000018.x);
					}
			}
		X0000022 = normalize(X0000022);
		X0000023 = cross(X0000018,X0000022);
		X0000017 = (X0000019 * X0000022 + X0000020 * X0000023) + X0000021 * X0000018;
	}


	void X0000002(inout Vector3 X0000025,in Vector3 X0000026,in Vector2 X0000027)
	{
		Scalar X0000028 = 0.0001;
		Scalar X0000029 = 0.0;
		Scalar X0000030 = 0.0;
		X0000000(X0000029,X0000030,X0000027.x,X0000027.y);
		Scalar X0000031 = X0000029 * cos(X0000030);
		Scalar X0000032 = X0000029 * sin(X0000030);
		Scalar X0000033 = (1.0 - X0000031 * X0000031) - X0000032 * X0000032;
		Scalar X0000034;
		if(X0000033 > 0.0)
			{
				X0000034 = sqrt(X0000033);
			}
		else
			{
				X0000034 = 0.0;
			}
		X0000001(X0000025,X0000026,X0000031,X0000032,X0000034);
	}


	Scalar X0000003(in Vector3 X0000035,in Vector3 X0000036,in Scalar X0000037)
	{
		Scalar X0000038 = dot(X0000036,X0000035);
		if(X0000038 < 0.0)
			{
				X0000038 = 0.0;
			}
		if(X0000038 > 1.0)
			{
				X0000038 = 2.0 - X0000038;
			}
		Scalar X0000039 = acos(X0000038);
		Scalar X0000040 = X0000035.z;
		Scalar X0000041 = X0000036.z;
		Scalar X0000042 = acos(X0000041);
		Scalar X0000043 = 0.178721 * X0000037 - 1.463037;
		Scalar X0000044 = -0.355402 * X0000037 + 0.427494;
		Scalar X0000045 = -0.022669 * X0000037 + 5.325056;
		Scalar X0000046 = 0.120647 * X0000037 - 2.577052;
		Scalar X0000047 = -0.066967 * X0000037 + 0.370275;
		Scalar X0000048 = ((1 + X0000043 * exp(X0000044 / X0000040)) * ((1 + X0000045 * exp(X0000046 * X0000039)) + (X0000047 * X0000038) * X0000038)) / ((1 + X0000043 * exp(X0000044 / 1.0)) * ((1 + X0000045 * exp(X0000046 * X0000042)) + (X0000047 * X0000041) * X0000041));
		return X0000048;
	}


	Vector3 X0000004(in Vector3 X0000049,in Vector3 X0000050,in Scalar X0000051,in Scalar X0000052)
	{
		Vector3 X0000053;
		Scalar X0000054;
		Scalar X0000055;
		Scalar X0000056;
		Scalar X0000057;
		Scalar X0000058;
		Scalar X0000059 = dot(X0000050,X0000049);
		if(X0000059 > 1.0)
			{
				X0000059 = 2.0 - X0000059;
			}
		Scalar X0000060 = acos(X0000059);
		Scalar X0000061 = X0000049.z;
		Scalar X0000062 = X0000050.z;
		Scalar X0000063 = acos(X0000062);
		Scalar X0000064 = X0000051 * X0000051;
		Scalar X0000065 = X0000063 * X0000063;
		Scalar X0000066 = X0000065 * X0000063;
		Scalar X0000067 = ((((+0.001650 * X0000066 - 0.003742 * X0000065) + 0.002088 * X0000063) + 0) * X0000064 + (((-0.029028 * X0000066 + 0.063773 * X0000065) - 0.032020 * X0000063) + 0.003948) * X0000051) + (((+0.116936 * X0000066 - 0.211960 * X0000065) + 0.060523 * X0000063) + 0.258852);
		Scalar X0000068 = ((((+0.002759 * X0000066 - 0.006105 * X0000065) + 0.003162 * X0000063) + 0) * X0000064 + (((-0.042149 * X0000066 + 0.089701 * X0000065) - 0.041536 * X0000063) + 0.005158) * X0000051) + (((+0.153467 * X0000066 - 0.267568 * X0000065) + 0.066698 * X0000063) + 0.266881);
		X0000053.y = X0000052;
		X0000054 = -0.019257 * X0000051 - (0.29 - pow(X0000062,0.5) * 0.09);
		X0000055 = -0.066513 * X0000051 + 0.000818;
		X0000056 = -0.000417 * X0000051 + 0.212479;
		X0000057 = -0.064097 * X0000051 - 0.898875;
		X0000058 = -0.003251 * X0000051 + 0.045178;
		Scalar X0000069 = ((1 + X0000054 * exp(X0000055 / X0000061)) * ((1 + X0000056 * exp(X0000057 * X0000060)) + (X0000058 * X0000059) * X0000059)) / ((1 + X0000054 * exp(X0000055 / 1.0)) * ((1 + X0000056 * exp(X0000057 * X0000063)) + (X0000058 * X0000062) * X0000062));
		X0000054 = -0.016698 * X0000051 - 0.260787;
		X0000055 = -0.094958 * X0000051 + 0.009213;
		X0000056 = -0.007928 * X0000051 + 0.210230;
		X0000057 = -0.044050 * X0000051 - 1.653694;
		X0000058 = -0.010922 * X0000051 + 0.052919;
		Scalar X0000070 = ((1 + X0000054 * exp(X0000055 / X0000061)) * ((1 + X0000056 * exp(X0000057 * X0000060)) + (X0000058 * X0000059) * X0000059)) / ((1 + X0000054 * exp(X0000055 / 1.0)) * ((1 + X0000056 * exp(X0000057 * X0000063)) + (X0000058 * X0000062) * X0000062));
		Scalar X0000071 = 1.0;
		X0000069 = X0000067 * (X0000069 * X0000071 + (1.0 - X0000071));
		X0000070 = X0000068 * (X0000070 * X0000071 + (1.0 - X0000071));
		X0000053.x = (X0000069 / X0000070) * X0000053.y;
		X0000053.z = (((1.0 - X0000069) - X0000070) / X0000070) * X0000053.y;
		return X0000053;
	}


	Color X0000005(in Vector3 X0000072,in Vector3 X0000073,in Scalar X0000074)
	{
		Color X0000075 = Color(0.0,0.0,0.0,0.0);
		Scalar X0000076 = acos(X0000072.z);
		Scalar X0000077 = (4.0 / 9.0 - X0000074 / 120.0) * (3.14159265358979323846f - 2 * X0000076);
		Scalar X0000078 = ((1000.0 * (4.0453 * X0000074 - 4.9710)) * tan(X0000077) - 0.2155 * X0000074) + 2.4192;
		X0000078 *= X0000003(X0000073,X0000072,X0000074);
		Vector3 X0000079 = X0000004(X0000073,X0000072,X0000074,X0000078);
		X0000075.r = (3.241 * X0000079.x - 1.537 * X0000079.y) - 0.499 * X0000079.z;
		X0000075.g = (-0.969 * X0000079.x + 1.876 * X0000079.y) + 0.042 * X0000079.z;
		X0000075.b = (0.056 * X0000079.x - 0.204 * X0000079.y) + 1.057 * X0000079.z;
		X0000075 *= 3.14159265358979323846f;
		X0000075.a = 0.0;
		return X0000075;
	}


	Color X0000006(in Vector3 X0000080,in Scalar X0000081)
	{
		Color X0000082 = Color(0.0,0.0,0.0,0.0);
		Vector3 X0000083 = Vector3(0.0,0.0,1.0);
		Vector3 X0000084 = X0000083;
		Vector3 X0000085 = X0000080;
		if(X0000085.z < 0.001)
			{
				X0000085.z = 0.001;
				X0000085 = normalize(X0000085);
			}
		Vector2 X0000086 = Vector2(0.0,0.0);
		Vector3 X0000087 = Vector3(0.0,0.0,0.0);
		Color X0000088 = Color(0.0,0.0,0.0,0.0);
		X0000086 = Vector2(0.000000,0.000000);
		X0000002(X0000087,X0000083,X0000086);
		X0000088 = X0000005(X0000085,X0000087,X0000081);
		X0000082 += X0000088;
		X0000086 = Vector2(0.125000,0.062500);
		X0000002(X0000087,X0000083,X0000086);
		X0000088 = X0000005(X0000085,X0000087,X0000081);
		X0000082 += X0000088;
		X0000086 = Vector2(0.250000,0.031250);
		X0000002(X0000087,X0000083,X0000086);
		X0000088 = X0000005(X0000085,X0000087,X0000081);
		X0000082 += X0000088;
		X0000086 = Vector2(0.375000,0.093750);
		X0000002(X0000087,X0000083,X0000086);
		X0000088 = X0000005(X0000085,X0000087,X0000081);
		X0000082 += X0000088;
		X0000086 = Vector2(0.500000,0.015625);
		X0000002(X0000087,X0000083,X0000086);
		X0000088 = X0000005(X0000085,X0000087,X0000081);
		X0000082 += X0000088;
		X0000086 = Vector2(0.625000,0.078125);
		X0000002(X0000087,X0000083,X0000086);
		X0000088 = X0000005(X0000085,X0000087,X0000081);
		X0000082 += X0000088;
		X0000086 = Vector2(0.750000,0.046875);
		X0000002(X0000087,X0000083,X0000086);
		X0000088 = X0000005(X0000085,X0000087,X0000081);
		X0000082 += X0000088;
		X0000086 = Vector2(0.875000,0.109375);
		X0000002(X0000087,X0000083,X0000086);
		X0000088 = X0000005(X0000085,X0000087,X0000081);
		X0000082 += X0000088;
		X0000082 /= 8.0;
		return X0000082;
	}


	void X0000007(inout Scalar X0000089,in Scalar X0000090)
	{
		Scalar X0000091 = pow(X0000089,3.0);
		if(X0000089 <= 1.0)
			{
				Scalar X0000092 = X0000090;
				X0000092 -= 2.0;
				X0000092 /= 15.0;
				if(X0000092 < 0.0)
					X0000092 = 0.0;
				if(X0000092 > 1.0)
					X0000092 = 1.0;
				X0000092 = pow(X0000092,3.0);
				X0000089 = X0000089 * (1.0 - X0000092) + X0000091 * X0000092;
			}
	}


	Color X0000008(in Vector3 X0000093,in Scalar X0000094)
	{
		Color X0000095 = Color(0.0,0.0,0.0,0.0);
		Color X0000096 = Color(12.0,8.5,0.9,0.0);
		Color X0000097 = Color(0.610,0.550,0.470,0.0);
		Color X0000098 = Color((1.0 * 127500) / 0.9878,(0.992 * 127500) / 0.9878,(0.911 * 127500) / 0.9878,0.0);
		if(X0000093.z > 0.0)
			{
				Scalar X0000099 = 1.0 / (X0000093.z + 0.15 * pow(93.885 - (acos(X0000093.z) * 180) / 3.14159265358979323846f,-1.253));
				Scalar X0000100 = 0.04608 * X0000094 - 0.04586;
				Scalar X0000101 = 1.3;
				Color X0000102;
				Color X0000103;
				Color X0000104;
				X0000102.r = exp((-X0000099 * X0000100) * pow(X0000097.r,-X0000101));
				X0000102.g = exp((-X0000099 * X0000100) * pow(X0000097.g,-X0000101));
				X0000102.b = exp((-X0000099 * X0000100) * pow(X0000097.b,-X0000101));
				Scalar X0000105 = 0.0035;
				X0000103.r = exp((-X0000099 * X0000096.r) * X0000105);
				X0000103.g = exp((-X0000099 * X0000096.g) * X0000105);
				X0000103.b = exp((-X0000099 * X0000096.b) * X0000105);
				X0000104.r = exp((-X0000099 * 0.008735) * pow(X0000097.r,-4.08));
				X0000104.g = exp((-X0000099 * 0.008735) * pow(X0000097.g,-4.08));
				X0000104.b = exp((-X0000099 * 0.008735) * pow(X0000097.b,-4.08));
				X0000095.r = ((X0000104.r * X0000102.r) * X0000103.r) * X0000098.r;
				X0000095.g = ((X0000104.g * X0000102.g) * X0000103.g) * X0000098.g;
				X0000095.b = ((X0000104.b * X0000102.b) * X0000103.b) * X0000098.b;
			}
		return X0000095;
	}


	void X0000009(inout Vector3 X0000106,in Bool X0000107,in Scalar X0000108)
	{
		if(X0000107)
			{
				Scalar X0000109 = X0000106.z;
				X0000106.z = X0000106.y;
				X0000106.y = X0000109;
			}
		if(X0000108 != 0)
			{
				X0000106.z -= X0000108;
				X0000106 = normalize(X0000106);
			}
	}


	void X0000010(inout Color X0000110,in Scalar X0000111,in Scalar X0000112)
	{
		Color X0000113 = Color(0.212671,0.715160,0.072169,0.0);
		Scalar X0000114 = (X0000110.r * X0000113.r + X0000110.g * X0000113.g) + X0000110.b * X0000113.b;
		if(X0000110.r < 0.0)
			X0000110.r = 0.0;
		if(X0000110.g < 0.0)
			X0000110.g = 0.0;
		if(X0000110.b < 0.0)
			X0000110.b = 0.0;
		if(X0000111 <= 0.0)
			{
				X0000110.r = (X0000110.g = (X0000110.b = X0000114));
			}
		else
			{
				X0000110 = X0000110 * X0000111 + X0000114 * (1.0 - X0000111);
				if(X0000111 > 1.0)
					{
						if(X0000110.r < 0.0)
							X0000110.r = 0.0;
						if(X0000110.g < 0.0)
							X0000110.g = 0.0;
						if(X0000110.b < 0.0)
							X0000110.b = 0.0;
					}
			}
		X0000110.r *= 1.0 + X0000112;
		X0000110.b *= 1.0 - X0000112;
	}


	void main()
	{
		result = Color(0.0,0.0,0.0,0.0);
		Vector3 X0000115 = Matrix3x3(internal_to_world) * direction;
		Scalar X0000116 = horizon_height / 10.0;
		X0000009(X0000115,y_is_up,X0000116);
		Scalar X0000117 = saturation;
		Scalar X0000118 = 2.0 + haze;
		if(X0000118 < 2.0)
			{
				X0000118 = 2.0;
			}
		X0000007(X0000117,X0000118);
		Color X0000119 = rgb_unit_conversion;
		if(X0000119.r < 0.0)
			{
				X0000119.r = (X0000119.g = (X0000119.b = 1.0 / 80000.0));
			}
		X0000119 *= multiplier;
		if(!(multiplier <= 0.0 || !on))
			{
				Scalar X0000120 = X0000115.z;
				if(X0000115.z < 0.001)
					{
						X0000115.z = 0.001;
						X0000115 = normalize(X0000115);
					}
				Vector3 X0000121 = sun_direction;
				X0000121 = normalize(X0000121);
				X0000009(X0000121,y_is_up,X0000116);
				Scalar X0000122 = 1.0;
				Scalar X0000123 = 1.0;
				if(X0000121.z < 0.001)
					{
						if(X0000121.z < 0.0)
							{
								X0000122 = 1.0 + X0000121.z;
							}
						X0000121.z = 0.001;
						X0000121 = normalize(X0000121);
					}
				Color X0000124 = X0000005(X0000121,X0000115,X0000118);
				if(X0000122 < 1.0)
					{
						X0000124.r *= X0000122;
						X0000124.g *= X0000122;
						X0000124.b *= X0000122;
					}
				Color X0000125 = X0000008(X0000121,X0000118);
				if(sun_disk_intensity > 0.0 && sun_disk_scale > 0.0)
					{
						Scalar X0000126 = acos(dot(X0000115,X0000121));
						Scalar X0000127 = (0.00465 * sun_disk_scale) * 10.0;
						if(X0000126 < X0000127)
							{
								Scalar X0000128 = (1.0 - X0000126 / X0000127) * 10.0;
								X0000128 = (pow(X0000128 / 10.0,3.0) * 2.0) * sun_glow_intensity + (smoothstep(8.5,9.5 + X0000118 / 50.0,X0000128) * 100.0) * sun_disk_intensity;
								X0000124 += X0000125 * X0000128;
							}
					}
				Color X0000129 = Color(0.0,0.0,0.0,0.0);
				X0000129.r = X0000124.r * X0000119.r;
				X0000129.g = X0000124.g * X0000119.g;
				X0000129.b = X0000124.b * X0000119.b;
				if(X0000120 <= 0.0)
					{
						Color X0000130 = Color(0.0,0.0,0.0,0.0);
						Scalar X0000131 = ray_length;
						Vector3 X0000132 = Matrix3x3(internal_to_world) * direction;
						Vector3 X0000133 = (internal_to_world * Vector4(position,1.0)).xyz;
						if(X0000120 < 0.0)
							{
								X0000131 = -(X0000133.z) / X0000120;
							}
						else
							{
								X0000131 = 10000000000.0;
							}
						Scalar X0000134 = X0000131;
						Vector3 X0000135 = X0000133 + X0000132 * X0000131;
						Vector3 X0000136 = Vector3(0.0,0.0,1.0);
						Vector3 X0000137 = Vector3(0.0,0.0,1.0);
						Color X0000138 = ground_color;
						Scalar X0000139 = 2.0 + haze;
						if(X0000139 < 2.0)
							{
								X0000139 = 2.0;
							}
						X0000130 = X0000006(X0000121,X0000139);
						X0000138 *= (X0000130 + X0000125 * X0000121.z) * X0000119;
						Scalar X0000140 = horizon_blur / 10.0;
						if(X0000140 > 0.0)
							{
								Scalar X0000141 = -X0000120;
								X0000141 /= X0000140;
								if(X0000141 > 1.0)
									{
										X0000141 = 1.0;
									}
								X0000141 = smoothstep(0.0,1.0,X0000141);
								X0000129 = X0000129 * (1.0 - X0000141) + X0000138 * X0000141;
								X0000123 = 1.0 - X0000141;
							}
						else
							{
								X0000129 = X0000138;
								X0000123 = 0.0;
							}
					}
				X0000010(X0000129,X0000117,redblueshift);
				result = X0000129;
				if(X0000123 > 0.0)
					{
						Color X0000142 = night_color;
						X0000142 *= X0000123;
						if(result.r < X0000142.r)
							result.r = X0000142.r;
						if(result.g < X0000142.g)
							result.g = X0000142.g;
						if(result.b < X0000142.b)
							result.b = X0000142.b;
					}
				//[James]Since we have viewport tone mapping , disable tone mapper in physical sky path. 
				//Scalar X0000143 = 1500.0 / 3.14159265358979323846f;
				Scalar X0000143 = 1.0;
				Color X0000144 = Color(0.0,0.0,0.0,0.0);
				X0000144.r = result.r * X0000143;
				X0000144.g = result.g * X0000143;
				X0000144.b = result.b * X0000143;
				Scalar X0000145 = 45.5;
				Scalar X0000146 = -4.725;
				Scalar X0000147 = pow(10.0,X0000146) * 5.5;
				Scalar X0000148 = 2.0;
				Scalar X0000149 = X0000147 * 3.0;
				X0000147 *= 3.14159265358979323846f;
				
				if(X0000144.r >= 0.0)
					{
						//[James]Since we have viewport tone mapping , disable tone mapper in physical sky path.
						//X0000144.r *= X0000149 / (X0000147 * X0000144.r + X0000148);
					}
				else
					{
						X0000144.r = 0.0;
					}
				if(X0000144.g >= 0.0)
					{
					  //[James]Since we have viewport tone mapping , disable tone mapper in physical sky path.
						//X0000144.g *= X0000149 / (X0000147 * X0000144.g + X0000148);
					}
				else
					{
						X0000144.g = 0.0;
					}
				if(X0000144.b >= 0.0)
					{
						//[James]Since we have viewport tone mapping , disable tone mapper in physical sky path.
						//X0000144.b *= X0000149 / (X0000147 * X0000144.b + X0000148);
					}
				else
					{
						X0000144.b = 0.0;
					}
	
				result.r = X0000144.r;
				result.g = X0000144.g;
				result.b = X0000144.b;
			}
		result.a = 1.0;
	}

}
	{
		shader_type("environment");
	};

/*** end of file ***/
