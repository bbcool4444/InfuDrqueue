/******************************************************************************
 * The following code was generated by the mental mill(R)                     *
 * code generator gen_msl, build 126420.5925.2036
 *                                                                            *
 * Portions Copyright (c) 1986-2010 mental images GmbH, Berlin, Germany.      *
 ******************************************************************************/


// Option settings:
//	shader_type : surface


shader mib_blackbody {

output:

    Color result;

input:

    float temperature = 0.0f;
    float intensity = 0.0f;
    bool evalNormal = false;

member:


    float X0000001(in float X0000012,in float X0000013)
    {
        float X0000014 = X0000013 * X0000013;
        X0000014 *= X0000014 * X0000013;
        float X0000015 = 1.438786e+7f;
        return X0000014 / (exp((X0000015 * X0000013) * X0000012) - 1.0f);
    }

    void X0000000(inout Color X0000002,in float X0000003,in float X0000004)
    {
        Color X0000005;
        Color X0000006[41] = 
                {
                    float4(0.001368000000f,0.000039000000f,0.006450001000f,0.002632f),
                    float4(0.004243000000f,0.000120000000f,0.020050010000f,0.002564f),
                    float4(0.014310000000f,0.000396000000f,0.067850010000f,0.0025f),
                    float4(0.043510000000f,0.001210000000f,0.207400000000f,0.002439f),
                    float4(0.134380000000f,0.004000000000f,0.645600000000f,0.002381f),
                    float4(0.283900000000f,0.011600000000f,1.385600000000f,0.002326f),
                    float4(0.348280000000f,0.023000000000f,1.747060000000f,0.002273f),
                    float4(0.336200000000f,0.038000000000f,1.772110000000f,0.002222f),
                    float4(0.290800000000f,0.060000000000f,1.669200000000f,0.002174f),
                    float4(0.195360000000f,0.090980000000f,1.287640000000f,0.002128f),
                    float4(0.095640000000f,0.139020000000f,0.812950100000f,0.002083f),
                    float4(0.032010000000f,0.208020000000f,0.465180000000f,0.002041f),
                    float4(0.004900000000f,0.323000000000f,0.272000000000f,0.002f),
                    float4(0.009300000000f,0.503000000000f,0.158200000000f,0.001961f),
                    float4(0.063270000000f,0.710000000000f,0.078249990000f,0.001923f),
                    float4(0.165500000000f,0.862000000000f,0.042160000000f,0.001887f),
                    float4(0.290400000000f,0.954000000000f,0.020300000000f,0.001852f),
                    float4(0.433449900000f,0.994950100000f,0.008749999000f,0.001818f),
                    float4(0.594500000000f,0.995000000000f,0.003900000000f,0.001786f),
                    float4(0.762100000000f,0.952000000000f,0.002100000000f,0.001754f),
                    float4(0.916300000000f,0.870000000000f,0.001650001000f,0.001724f),
                    float4(1.026300000000f,0.757000000000f,0.001100000000f,0.001695f),
                    float4(1.062200000000f,0.631000000000f,0.000800000000f,0.001667f),
                    float4(1.002600000000f,0.503000000000f,0.000340000000f,0.001639f),
                    float4(0.854449900000f,0.381000000000f,0.000190000000f,0.001613f),
                    float4(0.642400000000f,0.265000000000f,0.000049999990f,0.001587f),
                    float4(0.447900000000f,0.175000000000f,0.000020000000f,0.001563f),
                    float4(0.283500000000f,0.107000000000f,0.000000000000f,0.001538f),
                    float4(0.164900000000f,0.061000000000f,0.000000000000f,0.001515f),
                    float4(0.087400000000f,0.032000000000f,0.000000000000f,0.001493f),
                    float4(0.046770000000f,0.017000000000f,0.000000000000f,0.001471f),
                    float4(0.022700000000f,0.008210000000f,0.000000000000f,0.001449f),
                    float4(0.011359160000f,0.004102000000f,0.000000000000f,0.001429f),
                    float4(0.005790346000f,0.002091000000f,0.000000000000f,0.001408f),
                    float4(0.002899327000f,0.001047000000f,0.000000000000f,0.001389f),
                    float4(0.001439971000f,0.000520000000f,0.000000000000f,0.00137f),
                    float4(0.000690078600f,0.000249200000f,0.000000000000f,0.001351f),
                    float4(0.000332301100f,0.000120000000f,0.000000000000f,0.001333f),
                    float4(0.000166150500f,0.000060000000f,0.000000000000f,0.001316f),
                    float4(0.000083075270f,0.000030000000f,0.000000000000f,0.001299f),
                    float4(0.000041509940f,0.000014990000f,0.000000000000f,0.001282f)
                };
        float X0000007, X0000008;
        float3 X0000009;
        X0000003 = 1.0f / (X0000003 == 0.0f ? 6500.0f : X0000003);
        if(X0000004 == 0.0f)
            X0000004 = 1.0f;
        X0000007 = X0000001(X0000003,(X0000006[0]).a);
        X0000009 = (0.5f * X0000007) * (X0000006[0]).rgb;
        for(int X0000010 = 1; X0000010 < 40; X0000010++) {
            X0000007 = X0000001(X0000003,(X0000006[X0000010]).a);
            X0000009 += X0000007 * (X0000006[X0000010]).rgb;
        }
        X0000007 = X0000001(X0000003,(X0000006[40]).a);
        X0000009 += (0.5f * X0000007) * (X0000006[40]).rgb;
        X0000004 /= X0000009.y;
        float3 X0000011 = X0000009 * X0000004;
        X0000005 = float4(dot(X0000011,float3(3.240479f,-1.537150f,-0.498535f)),dot(X0000011,float3(-0.969256f,1.875992f,0.041556f)),dot(X0000011,float3(0.055648f,-0.204043f,1.057311f)),1.0f);
        X0000002 = X0000005;
    }

    void main()
    {
        X0000000(result,temperature,intensity);
    }
};
