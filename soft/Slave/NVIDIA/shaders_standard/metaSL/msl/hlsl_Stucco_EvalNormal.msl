/******************************************************************************
 * Copyright 1986-2009 by mental images GmbH, Fasanenstr. 81, D-10623 Berlin,
 * Germany. All rights reserved.
 *****************************************************************************/

// see tex_stucco.cpp
#define CRV 0.2
#define K   0.625 // (0.5/(1.0-CRV))
#define K1  3.125 // (K/CRV)
#define del 0.1

// see max_texutil.cpp
#define B 512 // 0x200
#define RN 10000.0
#define maxS_curve(t) ( t * t * (3.0 - 2.0 * t) )
#define maxLerp(t, a, b) ( a + t * (b - a) )

shader hlsl_Stucco_EvalNormal {
 input:
  float Size = 3.0 {
    display_name("Size");
  };
  float Thickness = 0.22 {
    display_name("Thickness");
  };
  float Threshold = 0.39 {
    display_name("Threshold");
  };
  Color Color1 = Color(0.517647, 0.0, 0.0, 1.0) {
    display_name("Color #1");
  };
  Color Color2 = Color(0.9, 0.9, 0.9, 1.0) {
    display_name("Color #2");
  };
  Shader Map1;
  Shader Map1Normal; // additional input !!!
  Shader Map2;
  Shader Map2Normal; // additional input !!!
  const bool Map1On = false {
    display_name("Map1 Enabled");
  };
  const bool Map2On = false {
    display_name("Map2 Enabled");
  };
  Shader Coords;
  // TODO: int GBufferID

  // textures
  Texture2d noise_tables = "noise_out.dds" {
    disable_filtering();
    texture_coord_u("clamp");
    texture_coord_v("clamp");
  };

 output:
  Color result;

  // see max_texutil.cpp
  void maxSetup(in float v,
		out int b0, out int b1,
		out float r0, out float r1) {
    float t = v + RN;
    int it = (int) t;
    b0 = it - (it / B) * B; // ((int)t) & BM;
    // (b0+1) & BM;
    b1 = b0 + 1;
    if (b1 >= B) b1 = 0;
    r0 = (float)(t - (int) t);
    r1 = r0 - 1.0; // what if r0 < 1.0?
  } // maxSetup

  // additional functions for texture lookup
  int p(in int i1) {
    // int x_pix = i1 % 114;
    int y_pix = i1 / 114; // 0 <= y < 9
    // float x = (2.0 * float(x_pix) + 1.0) / (2.0 * 114.0);
    float x = (2.0 * fmod(i1, 114) + 1.0) / (2.0 * 114.0); // use fmod !!!
    float y = (2.0 * float(y_pix) + 1.0) / (2.0 * 45.0);
    // return int((511.0 * tex2d(noise_tables, float2(x, y)).r + 0.5));
    Color c = 
      Texture2D_sampler_color(noise_tables, 0.0, "none").lookup(float2(x, y));
    return int((c.r + 0.5));
  } // p

  float g3(in int i1, in int i2) {
    // int x_pix = i1 % 114;
    int y_pix = 27 + i1 / 114; // 27 <= y < 36
    // float x = (2.0 * float(x_pix) + 1.0) / (2.0 * 114.0);
    float x = (2.0 * fmod(i1, 114) + 1.0) / (2.0 * 114.0); // use fmod !!!
    float y = (2.0 * float(y_pix) + 1.0) / (2.0 * 45.0);
    Color c = 
      Texture2D_sampler_color(noise_tables, 0.0, "none").lookup(float2(x, y));
    if (i2 == 0)
      return c.r;
    else if (i2 == 1)
      return c.g;
    else if (i2 == 2)
      return c.b;
    else {
      error("g3(%d, %d)", i1, i2);
      return 0.0;
    }
  } // g3

  // see max_texutil.cpp
  float maxNoise3(float vecx, float vecy, float vecz) {
    int bx0 = 0;
    int bx1 = 0;
    float rx0 = 0.0;
    float rx1 = 0.0;
    maxSetup(vecx, bx0, bx1, rx0, rx1);
    int by0 = 0;
    int by1 = 0;
    float ry0 = 0.0;
    float ry1 = 0.0;
    maxSetup(vecy, by0, by1, ry0, ry1);
    int bz0 = 0;
    int bz1 = 0;
    float rz0 = 0.0;
    float rz1 = 0.0;
    maxSetup(vecz, bz0, bz1, rz0, rz1);
    int i = p(bx0);
    int j = p(bx1);
    int b00 = p(i + by0);
    int b10 = p(j + by0);
    int b01 = p(i + by1);
    int b11 = p(j + by1);
    float sx = maxS_curve(rx0);
    float sy = maxS_curve(ry0);
    float sz = maxS_curve(rz0);
    float u = 0.0;
    float v = 0.0;
    u = (rx0 * g3(b00 + bz0, 0) +
	 ry0 * g3(b00 + bz0, 1) +
	 rz0 * g3(b00 + bz0, 2));
    v = (rx1 * g3(b10 + bz0, 0) +
	 ry0 * g3(b10 + bz0, 1) +
	 rz0 * g3(b10 + bz0, 2));
    float a = maxLerp(sx, u, v);
    u = (rx0 * g3(b01 + bz0, 0) +
	 ry1 * g3(b01 + bz0, 1) +
	 rz0 * g3(b01 + bz0, 2));
    v = (rx1 * g3(b11 + bz0, 0) +
	 ry1 * g3(b11 + bz0, 1) +
	 rz0 * g3(b11 + bz0, 2));
    float b = maxLerp(sx, u, v);
    float c = maxLerp(sy, a, b);
    u = (rx0 * g3(b00 + bz1, 0) +
	 ry0 * g3(b00 + bz1, 1) +
	 rz1 * g3(b00 + bz1, 2));
    v = (rx1 * g3(b10 + bz1, 0) +
	 ry0 * g3(b10 + bz1, 1) +
	 rz1 * g3(b10 + bz1, 2));
    a = maxLerp(sx, u, v);
    u = (rx0 * g3(b01 + bz1, 0) +
	 ry1 * g3(b01 + bz1, 1) +
	 rz1 * g3(b01 + bz1, 2));
    v = (rx1 * g3(b11 + bz1, 0) +
	 ry1 * g3(b11 + bz1, 1) +
	 rz1 * g3(b11 + bz1, 2));
    b = maxLerp(sx, u, v);
    float d = maxLerp(sy, a, b);
    return maxLerp(sz, c, d);
  } // maxNoise3

  // see tex_stucco.cpp
  float maxCompscl(float3 dp, float size) {
    float f = 0.0;
    float scl = abs(dp.x);
    f = abs(dp.y);
    if (f > scl) scl = f;
    f = abs(dp.z);
    if (f > scl) scl = f;
    scl /= size;
    return scl;
  } // maxCompscl

  // see tex_stucco.cpp
  float maxStuccoFunc(in float px,
		      in float py,
		      in float pz,
		      in float scl) {
    // get number from 0.0 to 1.0
    float f = 0.5 * (maxNoise3(px, py, pz)+1.0);
    if (f <= Threshold) return 0.0;
    float t = Thickness + 0.5 * scl;
    f = (f - Threshold) / t;
    if (f >= 1.0) return 1.0;
    if (f < CRV) return (K1 * f * f);
    else {
      if (f < (1.0f-CRV)) return K * ((2.0 * f) - CRV);
      else {
	f = 1.0 - f;
	return (1.0 - K1 * (f * f));
      } // else [ if (f < (1.0f-CRV)) ]
    } // else [ if (f < CRV) ]
  } //maxStuccoFunc

  // see max_support.cpp
  float maxIntensity(in Color c) {
    float f = (c.r + c.g + c.b) * 0.333333333;
    return f;
  } // maxIntensity

  void main() {
    result = Color(0.0, 0.0, 0.0, 0.0);
    // xyz-coords
    float3 xyz_coords = transform_point("internal", "object", position);
    float3 xtra_dP = float3(0.0, 0.0, 0.0);
    float3 xtra_bumpDP_0 = float3(1.0, 0.0, 0.0);
    float3 xtra_bumpDP_1 = float3(0.0, 1.0, 0.0);
    float3 xtra_bumpDP_2 = float3(0.0, 0.0, 1.0);
    // try to call hlsl_base_UVGenerator
    Color shader_return = Color(0.0, 0.0, 0.0, 0.0);
    if (Coords.call("output", "result", shader_return,
		    "output", "xtra_dP", xtra_dP,
		    "output", "xtra_bumpDP_0", xtra_bumpDP_0,
		    "output", "xtra_bumpDP_1", xtra_bumpDP_1,
		    "output", "xtra_bumpDP_2", xtra_bumpDP_2)) {
      xyz_coords.xyz = shader_return.rgb;
    }
    else {
      xyz_coords *= 100.0;
    }
    // call other shader parameters
    Color Map1Color = Color(0.0, 0.0, 0.0, 0.0);
    Color Map1NormalColor = Color(0.0, 0.0, 0.0, 0.0);
    bool useMap1 = false;
    if (Map1On &&
	Map1.call("output", "result", Map1Color) &&
	Map1Normal.call("output", "result", Map1NormalColor)) {
      useMap1 = true;
    }
    Color Map2Color = Color(0.0, 0.0, 0.0, 0.0);
    Color Map2NormalColor = Color(0.0, 0.0, 0.0, 0.0);
    bool useMap2 = false;
    if (Map2On &&
	Map2.call("output", "result", Map2Color) &&
	Map2Normal.call("output", "result", Map2NormalColor)) {
      useMap2 = true;
    }
    // use xyz-coords
    float3 np = float3(0.0, 0.0, 0.0);
    float size = (Size != 0.0) ? Size : 0.0001;
    float3 q = float3(0.0, 0.0, 0.0);
    q.x = xyz_coords.x / size;
    q.y = xyz_coords.y / size;
    q.z = xyz_coords.z / size;
    float scl = maxCompscl(xtra_dP, size);
    float d = maxStuccoFunc(q.x, q.y, q.z, scl);
    float k = 0.25 / del;
    np.x = (maxStuccoFunc(q.x + del * xtra_bumpDP_0.x,
			  q.y + del * xtra_bumpDP_0.y,
			  q.z + del * xtra_bumpDP_0.z,
			  scl)
	    - d) * k;
    np.y = (maxStuccoFunc(q.x + del * xtra_bumpDP_1.x,
			  q.y + del * xtra_bumpDP_1.y,
			  q.z + del * xtra_bumpDP_1.z,
			  scl)
	    - d) * k;
    np.z = (maxStuccoFunc(q.x + del * xtra_bumpDP_2.x,
			  q.y + del * xtra_bumpDP_2.y,
			  q.z + del * xtra_bumpDP_2.z,
			  scl)
	    - d) * k;
    float4x4 m = get_transform("object", "internal");
    float3 v = float3(0.0, 0.0, 0.0);
    float3 vn = float3(0.0, 0.0, 0.0);
    v = float3(m[0][0], m[1][0], m[2][0]);
    vn = normalize(v);
    m[0][0] = vn.x;
    m[1][0] = vn.y;
    m[2][0] = vn.z;
    v = float3(m[0][1], m[1][1], m[2][1]);
    vn = normalize(v);
    m[0][1] = vn.x;
    m[1][1] = vn.y;
    m[2][1] = vn.z;
    v = float3(m[0][2], m[1][2], m[2][2]);
    vn = normalize(v);
    m[0][2] = vn.x;
    m[1][2] = vn.y;
    m[2][2] = vn.z;
    float3x3 m2;
    m2[0] = m[0].xyz;
    m2[1] = m[1].xyz;
    m2[2] = m[2].xyz;
    np = m2 * np;
    if (useMap1 || useMap2) {
      float a = 0.0;
      float b = 0.0;
      float3 da = float3(0.0, 0.0, 0.0);
      float3 db = float3(0.0, 0.0, 0.0);
      if (useMap1) {
	a = (Map1Color.r + Map1Color.g + Map1Color.b) / 3.0; // COLOR->MONO
	da.x = Map1NormalColor.r;
	da.y = Map1NormalColor.g;
	da.z = Map1NormalColor.b;
      } // if (useMap1)
      else {
	a = maxIntensity(Color1);
	da = float3(0.0, 0.0, 0.0);
      } // if (useMap1)
      if (useMap2) {
       	b = (Map2Color.r + Map2Color.g + Map2Color.b) / 3.0; // COLOR->MONO
	db.x = Map2NormalColor.r;
	db.y = Map2NormalColor.g;
	db.z = Map2NormalColor.b;
      } // if (useMap2)
      else {
	b = maxIntensity(Color2);
	db = float3(0.0, 0.0, 0.0);
      } // if (useMap2)
      np.x = (b - a) * np.x + d * (db.x - da.x) + da.x;
      np.y = (b - a) * np.y + d * (db.y - da.y) + da.y;
      np.z = (b - a) * np.z + d * (db.z - da.z) + da.z;
    } // if (useMap1 || useMap2)
    else {
      float s = (maxIntensity(Color2) - maxIntensity(Color1));
      np.x *= s;
      np.y *= s;
      np.z *= s;
    } // else [ if (useMap1 || useMap2) ]
    result.rgb = np.xyz;
    result.a = 1.0;
  } // main
};
