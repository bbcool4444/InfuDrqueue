/*****************************************************************************
* Copyright 1986-2011 by mental images GmbH, Fasanenstr. 81, D-10623 Berlin,
 * Germany. All rights reserved.
 *****************************************************************************/

shader Generator_gabor_noise {
input:
    float total_scale = 4.5 {
        display_name("Noise Total Scale");
        soft_range(0.0, 25.0);
        description("Scales the entire noise");
    };
    int max_num = 5 {
        display_name("Number of Kernels");
        soft_range(1, 16);
        description("Number of Gabor kernels generated per cell");
    };
    float seed = 0.0 {
        display_name("Seed");
        description("Initialized the noise with different random numbers");
    };
    float sigma = 0.02 {
        display_name("Kernel Size");
        in_group("Gabor Kernel Settings");
        soft_range(0.0, 0.05);
    };
    float theta = 0.0    {
        display_name("Kernel Rotation");
        in_group("Gabor Kernel Settings");
        description("The rotation of the gabor kernel");
    };
    float lambda = 20 {
        display_name("Sine Frequency");
        in_group("Gabor Kernel Settings");
        soft_range(0.0, 100.0);
        description("Frequency of the ");
    };
    float psi = 0.0 { /* the kernel's phase */
    
        display_name("Sine Phase");
        in_group("Gabor Kernel Settings");
        soft_range(0.0, 6.0);
        description("The Phase of the kernel's since wave");
    };
    float gamma = 1.0 { /* squash / stretch of the kernel */
        display_name("Kernel Squash");
        in_group("Gabor Kernel Settings");
        description("Sets the squash / stretch for the kernel. A value of 1.0 means that"
        " the circle is perfectly round");
    }; 
    float deviation_pos = 1.0 {
        display_name("Position Randomness");
        in_group("Kernel Randomization");
        soft_range(0.0, 1.0);
        description("Amount of how much each Gabor kernel will be randomly offset");
    };
    float deviation_size = .5 {
        display_name("Size Randomness");
        in_group("Kernel Randomization");
        soft_range(0.0, 2.0);
        description("Adds a random offset to the size of each Gabor Kernel.");
    };
    float deviation_rotation = 1.0 {
        display_name("Rotation Randomness");
        in_group("Kernel Randomization");
        soft_range(0.0, 2.0);
        description("Amount of random rotation offset per kernel. ");
    };
    float freq_deviation = 0.0
    {
        display_name("Frequency Randomness");
        in_group("Kernel Randomization");
        soft_range(0.0, 100.0);
        description("Strength of random frequency offset per kernel");
    };
    float psi_deviation = 3.0 {
        display_name("Phase Randomness");
        in_group("Kernel Randomization");
        soft_range(0.0, 7.0);
        description("");
    };
    float intensity_randomness = 0.0 {
        display_name("Kernel Intensity Randomness");
        in_group("Kernel Randomization");
        soft_range(0.0, 2.0);
        description("Strength of the random attenuation of the Gabor kernels");
    };
    int texture_space = 0 { 
        display_name("Texture Space");
        in_group("Misc");
        literal(); 
        description( "Texture coordinates to use for noise generation.");        
        hard_range(0, 3);
    };
    float2 texture_uv = texture_coordinate[texture_space].xy {
        display_name("Custom UV input");
        in_group("Misc");
        description("The UV coordinates to use.");
    };
    texture1D noise_perm_texture      = "perm4.dds" {
        display_name("Noise Permutation Texture");
        in_group("Misc");
        description("The texture containing the permutation table used in "
                    "generating the noise.");
        disable_filtering();
        texture_coord_u("wrap");
    };
    
output:
    Color result;
    float result_float;
    
    //this function takes an input ranging from 0...1 and turns it into an
    //integer between a and b.
    float range_float_to_int(int a, int b, float input) {
        float range;
        if(a == b)
            range = 1.0;
        else
            range = b-a;
            
        return lerp((float)a, (float)(b), input)*range; 
    }
    
    float gabor_fn(float in_sigma,
                    float theta,
                    float lambda,
                    float psi,
                    float gamma,
                    float2 coords) {
        coords = (coords - float2(0.5)) * 0.1;

        float2 sigma = float2(0, 0);
        float nstds = 3;
        
        sigma.x = in_sigma;
        sigma.y = in_sigma/gamma;
        
        float xmax = max(abs(nstds * sigma.x * cos(theta)), abs(nstds * sigma.y * sin(theta)));
        xmax = ceil(max(1, xmax));
        
        float ymax = max(abs(nstds * sigma.x * sin(theta)), abs(nstds * sigma.y * cos(theta)));
        ymax = ceil(max(1, ymax));
        
        // Rotation
        float x_theta, y_theta;
        x_theta = coords.x * cos(theta) + coords.y * sin(theta);
        y_theta = -coords.x * sin(theta) + coords.y * cos(theta);
        
        return exp(-((x_theta*x_theta + y_theta*y_theta*gamma*gamma)/(2*sigma.x*sigma.x))) *
                cos((2* PI* x_theta)*lambda + psi);
    }

    // using the biger 4-channel permutation texture
    float4 cell_noise(float2 coord, float seed, Texture1D_sampler_color perm, 
                        out float4 rand_1, out float4 rand_2) {
        float4 AA;
        float2 p;
        float2 P;
        int i, j;
        
        p  = coord;
        P = fmod(floor(p), 256.0);
        P = P / 255.0;
        p -= floor(p);
        
        float4 seed_seed = perm.lookup(seed);
        float4 A = perm.lookup(P.x +seed_seed.x) + P.y; 

        AA = perm.lookup(A.x);        

        rand_1 = perm.lookup(A.y);
        rand_2 = perm.lookup(A.z    + seed_seed.y);

        return AA;
    }

    void main() {
        Texture1D_sampler_color perm(noise_perm_texture,0,"data");
        float4 AA;
        int i, j;
        float2 coord_space = texture_uv*total_scale;
        float4 rand_1, rand_2;
        
        result = Color(0.0);
        
        for(i = -1; i <= 1; i++){
            for(j = -1; j <= 1; j++) {
                float2 cell_coord = floor(coord_space + float2(i, j));
                // do the randomization for some random lookup values
                // only once. This includes: Number of Gabor Kernels per cell
                // and the position deviation
                // 'normalize' seed (make it an int) to lie between 0 and 1 in 256 discrete steps:
                float n_seed = floor(cell_coord.x)/256.0;    
                float P = fmod(floor(cell_coord.y), 256.0)/256.0;
                
                // The texture with the permutation values is 256 pixels wide.
                // To perform a pixel lookup in the center, the lookup is offset
                // by half a pixel which will guarantee a pixel accurate lookup.
                float A = perm.lookup(P+0.5/256.0).x + n_seed;
                float4 rnd_num_pos = perm.lookup(A+0.5/256.0);
                    
                for(int n = 0; n < max_num; n++) {
                    AA = cell_noise(coord_space + float2(i, j), seed+n/256.0, perm, rand_1, rand_2);
                    // result += Color(gabor_fn(AA.x*0.02, AA.y*3.14, AA.z * 0.025 + 
                    // 0.002, psi, gamma, 
                    // frac(coord_space) + (float2(AA.x, AA.z)-0.5)*deviation_pos));
                    float gabor = gabor_fn(sigma + AA.x*0.02*deviation_size,
                                        theta + deviation_rotation*(AA.y-0.5)*PI,
                                        lambda + freq_deviation*AA.z,
                                        psi + rand_1.x*6*psi_deviation,
                                        gamma,
                                        frac(coord_space) - float2(i, j)+
                                            (float2(AA.x, AA.z)-0.5)*deviation_pos);
                    result += Color(gabor * (rand_1.y*intensity_randomness+1-intensity_randomness));
                }
            }
        }
        result /= i;
        result =  result_float = ((result + 1)*.5).x; 
    }
};