/******************************************************************************
 * Copyright 1986-2009 by mental images GmbH, Fasanenstr. 81, D-10623 Berlin,
 * Germany. All rights reserved.
 *****************************************************************************/

// $Revision$

shader mib_blackbody {
 input:

   
    float temperature = 0.0{
    };
    float intensity = 0.0{
    };

    bool evalNormal = false;

 output:
  Color result;
  

    //baselight.cpp 
    float blackbody(in float param_temperature, in float param_wavelength)
    {
        float w5 = param_wavelength*param_wavelength;
        w5 *= w5*param_wavelength;
        //static const float c = 1.438786e+7;  /* hc/k * 10^9, [m*K] */
        float c = 1.438786e+7;
        return (float) (w5/(exp(c*param_wavelength*param_temperature)-1.0));
    }

member:

#ifdef USE_CONSTRUCTOR
  Color m_color;//the calculated color
  Color m_ciexyz31_10[41];//lookups

  mib_blackbody(){

      init_function(m_color,
                    temperature,
                    intensity);

  }
  
#endif

  void init_function(inout Color color_result,
                     in float paras_temperature, 
                     in float paras_intensity){

#ifndef USE_CONSTRUCTOR
    Color m_color;
    Color m_ciexyz31_10[41] = {Color(0.001368000000, 0.000039000000, 0.006450001000, 380.0),
                               Color(0.004243000000, 0.000120000000, 0.020050010000, 390.0 ),
                               Color( 0.014310000000, 0.000396000000, 0.067850010000, 400.0 ),
                               Color(0.043510000000, 0.001210000000, 0.207400000000, 410.0 ),
                               Color(0.134380000000, 0.004000000000, 0.645600000000, 420.0),
                               Color(0.283900000000, 0.011600000000, 1.385600000000, 430.0),
                               Color(0.348280000000, 0.023000000000, 1.747060000000, 440.0),
                               Color(0.336200000000, 0.038000000000, 1.772110000000, 450.0 ),
                               Color(0.290800000000, 0.060000000000, 1.669200000000, 460.0),
                               Color( 0.195360000000, 0.090980000000, 1.287640000000, 470.0),
                               Color(0.095640000000, 0.139020000000, 0.812950100000, 480.0),
                        	   Color(0.032010000000, 0.208020000000, 0.465180000000, 490.0 ),
                        	   Color(0.004900000000, 0.323000000000, 0.272000000000, 500.0),
                        	   Color(0.009300000000, 0.503000000000, 0.158200000000, 510.0),
                        	   Color(0.063270000000, 0.710000000000, 0.078249990000, 520.0 ),
                        	   Color(0.165500000000, 0.862000000000, 0.042160000000, 530.0 ),
                        	   Color(0.290400000000, 0.954000000000, 0.020300000000, 540.0 ),
                        	   Color(0.433449900000, 0.994950100000, 0.008749999000, 550.0 ),
                        	   Color(0.594500000000, 0.995000000000, 0.003900000000, 560.0 ),
                         	   Color(0.762100000000, 0.952000000000, 0.002100000000, 570.0 ),
                        	   Color(0.916300000000, 0.870000000000, 0.001650001000, 580.0),
                        	   Color(1.026300000000, 0.757000000000, 0.001100000000, 590.0),
                        	   Color(1.062200000000, 0.631000000000, 0.000800000000, 600.0),
                        	   Color(1.002600000000, 0.503000000000, 0.000340000000, 610.0),
                        	   Color(0.854449900000, 0.381000000000, 0.000190000000, 620.0),
                        	   Color(0.642400000000, 0.265000000000, 0.000049999990, 630.0),
                        	   Color(0.447900000000, 0.175000000000, 0.000020000000, 640.0),
                        	   Color(0.283500000000, 0.107000000000, 0.000000000000, 650.0),
                               Color(0.164900000000, 0.061000000000, 0.000000000000, 660.0),
                        	   Color(0.087400000000, 0.032000000000, 0.000000000000, 670.0),
                        	   Color(0.046770000000, 0.017000000000, 0.000000000000, 680.0),
                        	   Color(0.022700000000, 0.008210000000, 0.000000000000, 690.0),
                        	   Color(0.011359160000, 0.004102000000, 0.000000000000, 700.0),
                        	   Color(0.005790346000, 0.002091000000, 0.000000000000, 710.0),
                        	   Color(0.002899327000, 0.001047000000, 0.000000000000, 720.0),
                        	   Color(0.001439971000, 0.000520000000, 0.000000000000, 730.0),
                        	   Color(0.000690078600, 0.000249200000, 0.000000000000, 740.0),
                        	   Color(0.000332301100, 0.000120000000, 0.000000000000, 750.0),
                        	   Color(0.000166150500, 0.000060000000, 0.000000000000, 760.0),
                        	   Color(0.000083075270, 0.000030000000, 0.000000000000, 770.0),
                               Color(0.000041509940, 0.000014990000, 0.000000000000, 780.0)};
#else
    	/* store x_bar, y_bar, z_bar, wavelength in miColor */
	m_ciexyz31_10[0] = 
	   Color(0.001368000000, 0.000039000000, 0.006450001000, 380.0);
	m_ciexyz31_10[1] =    
       Color(0.004243000000, 0.000120000000, 0.020050010000, 390.0 );
	m_ciexyz31_10[2] = 
       Color( 0.014310000000, 0.000396000000, 0.067850010000, 400.0 );
	m_ciexyz31_10[3] = 
        Color(0.043510000000, 0.001210000000, 0.207400000000, 410.0 );
	m_ciexyz31_10[4] =    
        Color(0.134380000000, 0.004000000000, 0.645600000000, 420.0);
	m_ciexyz31_10[5] =   
        Color(0.283900000000, 0.011600000000, 1.385600000000, 430.0);
    m_ciexyz31_10[6] = 
	    Color(0.348280000000, 0.023000000000, 1.747060000000, 440.0);
    m_ciexyz31_10[7] = 
	    Color(0.336200000000, 0.038000000000, 1.772110000000, 450.0 );
    m_ciexyz31_10[8] = 
	    Color(0.290800000000, 0.060000000000, 1.669200000000, 460.0);
    m_ciexyz31_10[9] =
	   Color( 0.195360000000, 0.090980000000, 1.287640000000, 470.0);
	m_ciexyz31_10[10] =
       Color(0.095640000000, 0.139020000000, 0.812950100000, 480.0);
    m_ciexyz31_10[11] =
	   Color(0.032010000000, 0.208020000000, 0.465180000000, 490.0 );
    m_ciexyz31_10[12] =
	   Color(0.004900000000, 0.323000000000, 0.272000000000, 500.0);
    m_ciexyz31_10[13] =
	   Color(0.009300000000, 0.503000000000, 0.158200000000, 510.0);
    m_ciexyz31_10[14] =
	   Color(0.063270000000, 0.710000000000, 0.078249990000, 520.0 );
    m_ciexyz31_10[15] = 
	   Color(0.165500000000, 0.862000000000, 0.042160000000, 530.0 );
    m_ciexyz31_10[16] =
	   Color(0.290400000000, 0.954000000000, 0.020300000000, 540.0 );
    m_ciexyz31_10[17] =
	   Color(0.433449900000, 0.994950100000, 0.008749999000, 550.0 );
    m_ciexyz31_10[18] =
	   Color(0.594500000000, 0.995000000000, 0.003900000000, 560.0 );
    m_ciexyz31_10[19] =
 	   Color(0.762100000000, 0.952000000000, 0.002100000000, 570.0 );
    m_ciexyz31_10[20] =
	   Color(0.916300000000, 0.870000000000, 0.001650001000, 580.0);
    m_ciexyz31_10[21] =
	   Color(1.026300000000, 0.757000000000, 0.001100000000, 590.0);
    m_ciexyz31_10[22] =
	   Color(1.062200000000, 0.631000000000, 0.000800000000, 600.0);
    m_ciexyz31_10[23] =
	   Color(1.002600000000, 0.503000000000, 0.000340000000, 610.0);
    m_ciexyz31_10[24] =
	   Color(0.854449900000, 0.381000000000, 0.000190000000, 620.0);
    m_ciexyz31_10[25] =
	   Color(0.642400000000, 0.265000000000, 0.000049999990, 630.0);
    m_ciexyz31_10[26] =
	   Color(0.447900000000, 0.175000000000, 0.000020000000, 640.0);
    m_ciexyz31_10[27] =
	   Color(0.283500000000, 0.107000000000, 0.000000000000, 650.0);
	m_ciexyz31_10[28] =    
       Color(0.164900000000, 0.061000000000, 0.000000000000, 660.0);
    m_ciexyz31_10[29] =
	   Color(0.087400000000, 0.032000000000, 0.000000000000, 670.0);
    m_ciexyz31_10[30] =
	   Color(0.046770000000, 0.017000000000, 0.000000000000, 680.0);
    m_ciexyz31_10[31] =
	   Color(0.022700000000, 0.008210000000, 0.000000000000, 690.0);
    m_ciexyz31_10[32] =
	   Color(0.011359160000, 0.004102000000, 0.000000000000, 700.0);
    m_ciexyz31_10[33] =
	   Color(0.005790346000, 0.002091000000, 0.000000000000, 710.0);
    m_ciexyz31_10[34] =
	   Color(0.002899327000, 0.001047000000, 0.000000000000, 720.0);
    m_ciexyz31_10[35] =
	   Color(0.001439971000, 0.000520000000, 0.000000000000, 730.0);
    m_ciexyz31_10[36] =
	   Color(0.000690078600, 0.000249200000, 0.000000000000, 740.0);
    m_ciexyz31_10[37] =
	   Color(0.000332301100, 0.000120000000, 0.000000000000, 750.0);
    m_ciexyz31_10[38] =
	   Color(0.000166150500, 0.000060000000, 0.000000000000, 760.0);
    m_ciexyz31_10[39] =
	   Color(0.000083075270, 0.000030000000, 0.000000000000, 770.0);
    m_ciexyz31_10[40] =
	   Color(0.000041509940, 0.000014990000, 0.000000000000, 780.0);
#endif
	
    float bb,w,x,y,z;

    paras_temperature = 1.0/((paras_temperature == 0) ? 6500.0 : paras_temperature);
    if(paras_intensity == 0)paras_intensity = 1.0;
    
    /* integrate using trapzoidal rule */
	w  = 1.0/m_ciexyz31_10[0].a;
	bb  = blackbody(paras_temperature, w);	
   
	x  = 0.5*bb*m_ciexyz31_10[0].r  ;
	y  = 0.5*bb*m_ciexyz31_10[0].g  ;
	z  = 0.5*bb*m_ciexyz31_10[0].b  ;
    
    for(int i=1; i < 40; i++)
    {
        w  = 1.0/m_ciexyz31_10[i].a;
		bb  = blackbody(paras_temperature, w);		
		x += bb*m_ciexyz31_10[i].r ;
		y += bb*m_ciexyz31_10[i].g ;
		z += bb*m_ciexyz31_10[i].b ;
    }//for i

    w  = 1.0/m_ciexyz31_10[40].a;
	bb  = blackbody(paras_temperature, w);		
	x += 0.5*bb*m_ciexyz31_10[40].r ;
	y += 0.5*bb*m_ciexyz31_10[40].g ;
	z += 0.5*bb*m_ciexyz31_10[40].b ;

    paras_intensity /= y; 


    //mi_colorprofile_ciexyz_to_render(c);
    float var_x = x*paras_intensity;       
	float var_y = y*paras_intensity;    
	float var_z = z*paras_intensity;

    //transform ciexyz -> RGB
	float r = var_x *  3.240479 + var_y * -1.537150 + var_z * -0.498535;
	float g = var_x * -0.969256 + var_y *  1.875992 + var_z *  0.041556;
	float b = var_x *  0.055648 + var_y * -0.204043 + var_z *  1.057311;
   
    m_color = Color(r, g, b, 1.0);  

    color_result = m_color;
        
  }


  void main() {

#ifndef USE_CONSTRUCTOR
      init_function(result, 
                    temperature, 
                    intensity);
#else
      result = m_color;
#endif
  } // main
};
