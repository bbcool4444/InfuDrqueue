/*****************************************************************************
 * Copyright 1986-2011 by mental images GmbH, Fasanenstr. 81, D-10623 Berlin,
 * Germany. All rights reserved.
 *****************************************************************************/

native bsdf Bsdf_carpaint
{
  input:
    Color  base_color = Color(1,0,0,1)
        {
            display_name("Base Color");
            soft_range(Color(0,0,0,0),Color(1,1,1,1));
            hard_range(Color(0,0,0,0),Color(1,1,1,1));
            description( "The basic paint color." );
        };
    Color  reflectivity0 = Color(0.1,0.1,0.1,1)
        {
            display_name("Reflectivity 0");
            soft_range(Color(0,0,0,0),Color(1,1,1,1));
            hard_range(Color(0,0,0,0),Color(1,1,1,1));
            description( "The specular reflectivity at 0 degree incidence." );
        };
    Color  reflectivity90 = Color(0.3,0.3,0.3,1)
        {
            display_name("Reflectivity 90");
            soft_range(Color(0,0,0,0),Color(1,1,1,1));
            hard_range(Color(0,0,0,0),Color(1,1,1,1));
            description( "The specular reflectivity at 90 degree incidence." );
        };
    float fresnel_falloff = 5.0
        {
            display_name("Fresnel Falloff");
            soft_range(float(0.1),float(10));
            hard_range(float(0.1),float(10));
            description( "Exponent of the fresnel falloff function." );
        };
    float metallic = 0.3
        {
            display_name("Metallic");
            soft_range(float(0),float(1));
            hard_range(float(0),float(1));
            description( "The weight of the metallic effect." );
        };
    Color  metallic_color = Color(1,1,1,1)
        {
            display_name("Metallic Color");
            soft_range(Color(0,0,0,0),Color(1,1,1,1));
            hard_range(Color(0,0,0,0),Color(1,1,1,1));
            description( "The color of the metallic effect." );
        };
    float metallic_falloff = 8
        {
            display_name("Metallic Falloff");
            soft_range(float(0.1),float(16));
            hard_range(float(0.1),float(16));
            description( "Falloff exponent for the metallic effect." );
        };
    Color  edge_color = Color(1,0,0,1)
        {
            display_name("Edge Color");
            soft_range(Color(0,0,0,0),Color(1,1,1,1));
            hard_range(Color(0,0,0,0),Color(1,1,1,1));
            description( "The edge color of the base paint." );
        };
    float edge_falloff = 2
        {
            display_name("Edge Falloff");
            soft_range(float(0.1),float(10));
            hard_range(float(0.1),float(10));
            description( "Falloff exponent for the edge color." );
        };
    float unit_scale = 1
        {
            display_name("Unit Scale");
            soft_range(float(0),float(100));
            description( "Scale factor of the scene." );
        };
    float sparkle_weight = 0.05
        {
            display_name("Sparkle Weight");
            soft_range(float(0),float(1));
            hard_range(float(0),float(1));
            description( "The weight of the sparkle effect." );
        };
    float sparkle_falloff = 1
        {
            display_name("Sparkle Falloff");
            soft_range(float(0),float(100));
            description( "The distance falloff factor for the sparkle effect." );
        };

  member:
    // There's currently only a built-in software implementation
    // for the BSDF. Thus this shader will not work in hardware
    // rendering so far.
    Spectrum eval(
        in float3           fixed_direction,
        in float3           sampled_direction,
        in Bsdf_components  allowed_components,
        in bool             transport_source)
    {
        // black result
        return Spectrum(0.0);
    }

    Bsdf_components sample(
        in float3           fixed_direction,
        out float3          sampled_direction,
        inout Bsdf_sample   primary_sample,
        out Spectrum        sample_weight,
        inout float         sample_probability,
        in Bsdf_components  allowed_components,
        in bool             transport_source)
    {
        (void)fixed_direction;
        (void)primary_sample;
        (void)sample_probability;
        (void)allowed_components;
        (void)transport_source;
        return state::bsdf_invalid_sample(sampled_direction, sample_weight);
    }

    float pdf(
        in float3           fixed_direction,
        in float3           sampled_direction,
        in Bsdf_components  allowed_components,
        in bool             transport_source)
    {
        (void)fixed_direction;
        (void)sampled_direction;
        (void)allowed_components;
        (void)transport_source;
        return 0.f;
    }

    Bsdf_components get_components()
    {
        // nothing
        return Bsdf_components{};
    }

    Bsdf_components get_active_components()
    {
        // nothing
        return Bsdf_components{};
    }
}
{
    description( "Simple and fast BRDF for metallic paints, including "
                 "a sparkle effect to simulate flakes." );
}
;
