/******************************************************************************
 * Copyright 1986-2009 by mental images GmbH, Fasanenstr. 81, D-10623 Berlin,
 * Germany. All rights reserved.
 *****************************************************************************/
/*** This code was generated by gen_msl ***/

shader misss_fast_shader {

input:

	texture2D lightmap = "default.dds";
	texture2D depthmap = "default.dds";
	Shader bump;
	Shader diffuse_illum;
	Color diffuse_color = float4(1.0,1.0,1.0,1.0);
	Shader specular_illum;
	float diffuse_weight = 0.5;
	Color front_sss_color = float4(0.8,0.4,0.1,1.0);
	float front_sss_weight = 0.5;
	float front_sss_radius = 10.0;
	Color back_sss_color = float4(0.8,0.4,0.1,1.0);
	float back_sss_weight = 0.5;
	float back_sss_radius = 10.0;
	float back_sss_depth = 0.0;
	float scale_conversion = 1.0;
	bool screen_composit = true;
	bool output_sss_only = false;
	float falloff = 2.0;
	int samples = 64;

output:

	Color result;

	void X0000000(inout Color X0000001,Color X0000002,bool X0000003)
	{
		if(X0000003)
			{
				if(X0000001.g > 1.0)
					{
						float X0000004 = X0000001.g - 1.0;
						X0000001.r += X0000004;
						X0000001.b += X0000004;
						X0000001.g = 1.0;
					}
				if(X0000001.r > 1.0)
					{
						float X0000005 = X0000001.r - 1.0;
						X0000001.b += X0000005;
						X0000001.g += X0000005;
						if(X0000001.g > 1.0)
							X0000001.g = 1.0;
						X0000001.r = 1.0;
					}
				if(X0000001.b > 1.0)
					{
						float X0000006 = X0000001.b - 1.0;
						X0000001.r += X0000006;
						if(X0000001.r > 1.0)
							X0000001.r = 1.0;
						X0000001.g += X0000006;
						if(X0000001.g > 1.0)
							X0000001.g = 1.0;
						X0000001.b = 1.0;
					}
				X0000001.r = 1.0 - (1.0 - X0000001.r) * (1.0 - X0000002.r);
				X0000001.g = 1.0 - (1.0 - X0000001.g) * (1.0 - X0000002.g);
				X0000001.b = 1.0 - (1.0 - X0000001.b) * (1.0 - X0000002.b);
			}
		else
			{
				X0000001.r += X0000002.r;
				X0000001.g += X0000002.g;
				X0000001.b += X0000002.b;
			}
	}


	void main()
	{
		Color X0000007;
		Color X0000008;
		Color X0000009;
		Color X0000010;
		Color X0000011;
		Color X0000012;
		Color X0000013;
		Color X0000014;
		Color X0000015;
		Color X0000016;
		float X0000017 = 0.75;
		float3 X0000018 = normal;
		Color X0000019 = float4(float(0),float(0),float(0),float(0));
		Color X0000020 = float4(float(0),float(0),float(0),float(0));
		bump.call("output","normal_result",normal);
		Light_iterator X0000021;
		foreach(X0000021)
			{
				if(X0000021.dot_nl > 0.0)
					{
						float X0000022 = pow(saturate(dot(X0000021.direction,X0000018)),X0000017);
						X0000019 += (X0000022 * X0000021.contribution) / 3.14159265358979323846;
						X0000020 += (X0000021.dot_nl * X0000021.contribution) / 3.14159265358979323846;
					}
			}
		if(!(diffuse_illum.call("output","result",X0000008)))
			{
				X0000008 = X0000020;
			}
		X0000009 = diffuse_color * diffuse_weight;
		X0000007 = X0000008 * X0000009;
		result.rgb = X0000007.rgb;
		result.a = X0000008.a;
		if(specular_illum.call("output","result",X0000010))
			X0000000(result,X0000010,screen_composit);
		float X0000023 = (3.0 + pow(((dot_nd < 0.0) ? (-dot_nd) : (0.0)) + 0.1,0.5)) / 4.0;
		X0000015 = (X0000014 = float4(float(0),float(0),float(0),float(0)));
		X0000016 = (diffuse_color * back_sss_weight) * back_sss_color;
		X0000012 = X0000019;
		X0000013 = (diffuse_color * front_sss_weight) * front_sss_color;
		X0000011 = X0000012 * X0000013;
		Color X0000024 = X0000011;
		if(!output_sss_only)
			{
				X0000000(X0000024,result,screen_composit);
			}
		result = X0000024;
	}

};

/*** end of file ***/
