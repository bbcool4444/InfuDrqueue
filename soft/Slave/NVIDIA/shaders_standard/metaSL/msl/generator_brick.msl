/*****************************************************************************
 * Copyright 1986-2011 by mental images GmbH, Fasanenstr. 81, D-10623 Berlin,
 * Germany. All rights reserved.
 *****************************************************************************/

shader Generator_brick
{
  input:
		Color brick_color    = Color(1.0, 0.2, 0.2, 1.0)
		{			
			display_name("Brick Color");
			soft_range(Color(0,0,0,0),Color(1,1,1,1));
			description( "The base color of the bricks." );
		};
		Color mortar_color   = Color(0.5, 0.5, 0.5, 1.0)
		{		
			display_name("Mortar Color");
			soft_range(Color(0,0,0,0),Color(1,1,1,1));
			description( "The base color of the mortar." );
		};
		float brick_width   = 0.4
		{		
			display_name("Brick Width");
			soft_range(float(0),float(1));
			description( "The width of individual bricks." );
		};
		float brick_height  = 0.2
		{		
			display_name("Brick Height");
			soft_range(float(0),float(1));
			description( "The height of individual bricks." );
		};
		float brick_horizontal_spacing = 0.9
		{		
			display_name("Brick Horizontal Spacing");
			soft_range(float(0),float(1));
			description( "The horizontal spacing between individual bricks." );
		};
		float brick_vertical_spacing = 0.9
		{		
			display_name("Brick Vertical Spacing");
			soft_range(float(0),float(1));
			description( "The vertical spacing between individual bricks." );
		};
		int texture_space = 0 
		{ 
			display_name("Texture Space");
			literal(); 
			description( "Texture coordinates to use when generating "
						 "the brick pattern." );		
			hard_range(0, 3);
		};
		float2 texture_uv = float2(texture_coordinate[texture_space].x,
								texture_coordinate[texture_space].y)
		{
			display_name("Custom UV Input");
	        description("When this parameter is connected, the shader will"
            " read the UV values from there. No effect when not connected.");
		};
    
  output:
    Color result;
    
    void main() 
    {
        result = 0.f;
                
		// The position within a brick
		float2 pos = texture_uv * 4.0 / 
						float2(brick_width, brick_height);
	
		// Offset every other brock row
		if (frac(pos.y * 0.5) > 0.5)
			pos.x += 0.5;
	
		// Either in a brick or mortar	
		pos = frac(pos);	
		float2 useBrick = step(pos, float2(brick_horizontal_spacing, 
			brick_vertical_spacing));	
		Color bc = lerp(mortar_color, brick_color, useBrick.x * useBrick.y);
		
		result   = bc;
		result.a = 1.0;
    }
}
{
	description( "Generates a brick pattern based on the location of the "
	             "input in the range [0-1] x [0-1]." );
}
;
