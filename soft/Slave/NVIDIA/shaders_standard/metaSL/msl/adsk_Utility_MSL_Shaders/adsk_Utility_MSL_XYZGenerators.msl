/******************************************************************************
 * The following code was generated by the mental mill(R)                     *
 * code generator gen_msl, build 126420.5925.3501
 *                                                                            *
 * Portions Copyright (c) 1986-2010 mental images GmbH, Berlin, Germany.      *
 ******************************************************************************/

// Option settings:


shader adsk_Utility_MSL_XYZGenerator {

output:

    Color result;
    float3 xtra_dP;
    float3 xtra_bumpDP_0;
    float3 xtra_bumpDP_1;
    float3 xtra_bumpDP_2;

input:

    int CoordinateSystem = 0
            {
                display_name("Source");
                hard_range(0,3);
            };
    float3 Offset = float3(0.0f,0.0f,0.0f)
            {
                display_name("Offset");
                hard_range(float3(0.0f,0.0f,0.0f),float3(500.0f,500.0f,500.0f));
            };
    float3 Tiling = float3(100.0f,100.0f,100.0f)
            {
                display_name("Tiling");
                hard_range(float3(1.0f,1.0f,1.0f),float3(500.0f,500.0f,500.0f));
            };
    float3 Angle = float3(0.0f,0.0f,0.0f)
            {
                display_name("Angle");
                hard_range(float3(0.0f,0.0f,0.0f),float3(6.28318530717958647692f,6.28318530717958647692f,6.28318530717958647692f));
            };

member:


    void X0000000(inout float3 X0000012,in float3 X0000013,in float4x3 X0000014)
    {
        X0000012.x = (((X0000014[0])[0] * X0000013.x + (X0000014[1])[0] * X0000013.y) + (X0000014[2])[0] * X0000013.z) + (X0000014[3])[0];
        X0000012.y = (((X0000014[0])[1] * X0000013.x + (X0000014[1])[1] * X0000013.y) + (X0000014[2])[1] * X0000013.z) + (X0000014[3])[1];
        X0000012.z = (((X0000014[0])[2] * X0000013.x + (X0000014[1])[2] * X0000013.y) + (X0000014[2])[2] * X0000013.z) + (X0000014[3])[2];
    }

    void X0000001(inout float4x3 X0000015,in float3 X0000016)
    {
        (X0000015[3])[0] = X0000016.x;
        (X0000015[3])[1] = X0000016.y;
        (X0000015[3])[2] = X0000016.z;
    }

    void X0000002(inout float4x3 X0000017,in float X0000018)
    {
        float X0000019 = sin(X0000018);
        float X0000020 = cos(X0000018);
        float X0000021;
        float3 X0000022;
        int X0000023 = 0;
        for(X0000023 = 3; X0000023 >= 0; X0000023--) {
            X0000022 = X0000017[X0000023];
            X0000021 = X0000022[1] * X0000020 - X0000022[2] * X0000019;
            X0000022[2] = X0000022[1] * X0000019 + X0000022[2] * X0000020;
            X0000022[1] = X0000021;
            (X0000017[X0000023])[2] = X0000022[2];
            (X0000017[X0000023])[1] = X0000022[1];
        }
    }

    void X0000003(inout float4x3 X0000024,in float X0000025)
    {
        float X0000026 = sin(X0000025);
        float X0000027 = cos(X0000025);
        float X0000028;
        float3 X0000029;
        int X0000030 = 0;
        for(X0000030 = 3; X0000030 >= 0; X0000030--) {
            X0000029 = X0000024[X0000030];
            X0000028 = X0000029[2] * X0000027 - X0000029[0] * X0000026;
            X0000029[0] = X0000029[2] * X0000026 + X0000029[0] * X0000027;
            X0000029[2] = X0000028;
            (X0000024[X0000030])[0] = X0000029[0];
            (X0000024[X0000030])[2] = X0000029[2];
        }
    }

    void X0000004(inout float4x3 X0000031,in float X0000032)
    {
        float X0000033 = sin(X0000032);
        float X0000034 = cos(X0000032);
        float X0000035;
        float3 X0000036;
        int X0000037 = 0;
        for(X0000037 = 3; X0000037 >= 0; X0000037--) {
            X0000036 = X0000031[X0000037];
            X0000035 = X0000036[0] * X0000034 - X0000036[1] * X0000033;
            X0000036[1] = X0000036[0] * X0000033 + X0000036[1] * X0000034;
            X0000036[0] = X0000035;
            (X0000031[X0000037])[0] = X0000036[0];
            (X0000031[X0000037])[1] = X0000036[1];
        }
    }

    void X0000005(out float X0000038,out float X0000039,out float X0000040,out float X0000041)
    {
        X0000038 = 0.0f;
        X0000039 = 0.0f;
        X0000040 = 0.0f;
        X0000041 = 0.0f;
    }

    void X0000006(out float3 X0000042,out float3 X0000043,out float3 X0000044)
    {
        X0000042 = 0.0f;
        X0000043 = 0.0f;
        X0000044 = 0.0f;
    }

    void X0000007(out float3 X0000045,out float3 X0000046)
    {
        float X0000047 = 0.0f;
        float X0000048 = 0.0f;
        float X0000049 = 0.0f;
        float X0000050 = 0.0f;
        X0000005(X0000047,X0000047,X0000049,X0000049);
        float3 X0000051 = float3(0.0f,0.0f,0.0f);
        float3 X0000052 = float3(0.0f,0.0f,0.0f);
        float3 X0000053 = float3(0.0f,0.0f,0.0f);
        X0000006(X0000051,X0000052,X0000053);
        float3 X0000054 = float3(0.0f,0.0f,0.0f);
        float3 X0000055 = float3(0.0f,0.0f,0.0f);
        X0000054.x = X0000052.x - X0000051.x;
        X0000054.y = X0000052.y - X0000051.y;
        X0000054.z = X0000052.z - X0000051.z;
        X0000055.x = X0000053.x - X0000051.x;
        X0000055.y = X0000053.y - X0000051.y;
        X0000055.z = X0000053.z - X0000051.z;
        float3 X0000056 = float3(0.0f,0.0f,0.0f);
        float3 X0000057 = float3(0.0f,0.0f,0.0f);
        X0000056.x = X0000047 * X0000054.x + X0000049 * X0000055.x;
        X0000056.y = X0000047 * X0000054.y + X0000049 * X0000055.y;
        X0000056.z = X0000047 * X0000054.z + X0000049 * X0000055.z;
        X0000057.x = X0000048 * X0000054.x + X0000050 * X0000055.x;
        X0000057.y = X0000048 * X0000054.y + X0000050 * X0000055.y;
        X0000057.z = X0000048 * X0000054.z + X0000050 * X0000055.z;
        X0000045 = X0000056;
        X0000046 = X0000057;
        return;
    }

    float3 X0000008()
    {
        float3 X0000058 = float3(0.0f,0.0f,0.0f);
        float3 X0000059 = float3(0.0f,0.0f,0.0f);
        X0000007(X0000058,X0000059);
        float3 X0000060 = float3(0.0f,0.0f,0.0f);
        X0000060.x = abs(X0000058.x) + abs(X0000059.x);
        X0000060.y = abs(X0000058.y) + abs(X0000059.y);
        X0000060.z = abs(X0000058.z) + abs(X0000059.z);
        return X0000060;
    }

    void X0000009(inout float4x3 X0000061,in float3 X0000062)
    {
        int X0000063 = 0;
        for(X0000063 = 2; X0000063 >= 0; X0000063--) {
            (X0000061[X0000063])[0] *= X0000062.x;
            (X0000061[X0000063])[1] *= X0000062.y;
            (X0000061[X0000063])[2] *= X0000062.z;
        }
    }

    float3 X0000010(in int X0000064)
    {
        switch(X0000064) {
        case 2:
            error("TODO: mi_MAX_ENV_CONTEXT");
            return float3(0.0f,0.0f,0.0f);
        case 0:
            return X0000008();
        case 1:
            return float3(0.0f,0.0f,0.0f);
        }
        return float3(0.0f,0.0f,0.0f);
    }

    float3 X0000011(in int X0000065)
    {
        float3 X0000066 = float3(0.0f,0.0f,0.0f);
        float3 X0000067 = float3(0.0f,0.0f,0.0f);
        int X0000068 = 0;
        switch(X0000065) {
        case 0:
            return X0000066;
        case 3:
            X0000067 = X0000010(X0000068);
            X0000067 = transform_vector("camera","internal",X0000067);
            X0000067 = transform_vector("internal","world",X0000067);
            return X0000066;
        case 1:
        case 2:
            break;
        default:
            error("TODO: default");
            break;
        }
        return X0000066;
    }

    void main()
    {
        result = float4(0.0f,0.0f,0.0f,0.0f);
        float3 X0000069 = transform_point("internal","object",state::position);
        {
            float X0000070 = X0000069.y;
            X0000069.y = X0000069.z;
            X0000069.z = -X0000070;
        }
        float3 X0000071 = Offset;
        float3 X0000072 = Angle;
        float3 X0000073 = Tiling;
        float4x3 X0000074 = float4x3(1.0f,0.0f,0.0f,0.0f,1.0f,0.0f,0.0f,0.0f,1.0f,0.0f,0.0f,0.0f);
        X0000001(X0000074,X0000071);
        X0000002(X0000074,X0000072.x);
        X0000003(X0000074,X0000072.y);
        X0000004(X0000074,X0000072.z);
        X0000009(X0000074,X0000073);
        float3 X0000075 = X0000074[0];
        float3 X0000076 = X0000074[1];
        float3 X0000077 = X0000074[2];
        X0000075 = normalize(X0000075);
        X0000076 = normalize(X0000076);
        X0000077 = normalize(X0000077);
        xtra_dP = X0000011(CoordinateSystem);
        xtra_bumpDP_0 = X0000075;
        xtra_bumpDP_1 = X0000076;
        xtra_bumpDP_2 = X0000077;
        float3 X0000078 = float3(0.0f,0.0f,0.0f);
        X0000000(X0000078,X0000069,X0000074);
        result.rgb = X0000078.xyz;
        result.a = 1.0f;
    }
};
