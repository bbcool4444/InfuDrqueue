/******************************************************************************
 * The following code was generated by the mental mill(R)                     *
 * code generator gen_msl, build 126420.5925.3501
 *                                                                            *
 * Portions Copyright (c) 1986-2010 mental images GmbH, Berlin, Germany.      *
 ******************************************************************************/

// Option settings:


shader adsk_Utility_MSL_ColorState {

output:

    Color result;

input:

    Color the_color = float4(0.0f,0.0f,0.0f,1.0f);

member:


    void main()
    {
        result = the_color;
    }
};


shader adsk_Utility_MSL_ScalarState {

output:

    float result;

input:

    float the_float = 0.0f;

member:


    void main()
    {
        result = the_float;
    }
};


shader adsk_Utility_MSL_VectorState {

output:

    float3 result;

input:

    float3 the_vector = float3(0.0f,0.0f,0.0f);

member:


    void main()
    {
        result = the_vector;
    }
};


shader adsk_Utility_MSL_IntState {

output:

    int result;

input:

    int the_int = 0;

member:


    void main()
    {
        result = the_int;
    }
};


shader adsk_Utility_MSL_Color_to_Float {

output:

    float result;

input:

    Color the_color = float4(1.0f,1.0f,0.0f,1.0f);

member:


    void main()
    {
        result = ((the_color.r + the_color.g) + the_color.b) / 3.0f;
    }
};


shader adsk_Utility_MSL_Color_to_Float3 {

output:

    float3 result;

input:

    Color the_color = float4(1.0f,1.0f,0.0f,1.0f);

member:


    void main()
    {
        result.x = the_color.r;
        result.y = the_color.g;
        result.z = the_color.b;
    }
};


shader adsk_Utility_MSL_Color_to_Bool {

output:

    bool r_bool;
    bool g_bool;
    bool b_bool;

input:

    Color color = float4(0.0f,0.0f,0.0f,1.0f);
    float threshold;

member:


    void main()
    {
        if(color.r > threshold)
            r_bool = true;
        else
            r_bool = false;
        if(color.g > threshold)
            g_bool = true;
        else
            g_bool = false;
        if(color.b > threshold)
            b_bool = true;
        else
            b_bool = false;
    }
};


shader adsk_Utility_MSL_Float_to_Color {

output:

    Color result;

input:

    float the_scalar;

member:


    void main()
    {
        result.r = the_scalar;
        result.g = the_scalar;
        result.b = the_scalar;
        result.a = 1.0f;
    }
};


shader adsk_Utility_MSL_Float_to_Float3 {

output:

    float3 result;

input:

    float the_scalar;

member:


    void main()
    {
        result.x = the_scalar;
        result.y = the_scalar;
        result.z = the_scalar;
    }
};


shader adsk_Utility_MSL_Float3_to_Color {

output:

    Color result;

input:

    float3 the_vector;

member:


    void main()
    {
        result.rgb = the_vector.xyz;
        result.a = 1.0f;
    }
};


shader adsk_Utility_MSL_Float3_to_Float {

output:

    float result;

input:

    float3 the_vector;

member:


    void main()
    {
        result = ((the_vector.x + the_vector.y) + the_vector.z) / 3.0f;
    }
};


shader adsk_Utility_MSL_Float3_to_Floats {

output:

    float x;
    float y;
    float z;

input:

    float3 the_vector;

member:


    void main()
    {
        x = 0.0f;
        y = 0.0f;
        z = 0.0f;
        x = the_vector.x;
        y = the_vector.y;
        z = the_vector.z;
    }
};


shader adsk_Utility_MSL_Color_to_Floats {

output:

    float r;
    float g;
    float b;
    float a;

input:

    Color the_color = float4(0.0f,0.0f,0.0f,0.0f);

member:


    void main()
    {
        r = 0.0f;
        g = 0.0f;
        b = 0.0f;
        a = 0.0f;
        r = the_color.r;
        g = the_color.g;
        b = the_color.b;
        a = the_color.a;
    }
};


shader adsk_Utility_MSL_Floats_to_Float3 {

output:

    float3 result;

input:

    float x = 0.0f;
    float y = 0.0f;
    float z = 0.0f;

member:


    void main()
    {
        result = float3(0.0f,0.0f,0.0f);
        result.x = x;
        result.y = y;
        result.z = z;
    }
};


shader adsk_Utility_MSL_Bool_to_Int {

output:

    int result;

input:

    bool bool_in;

member:


    void main()
    {
        result = 0;
        if(bool_in)
            result = 1;
    }
};


shader adsk_Utility_MSL_Int_to_Float {

output:

    float result;

input:

    int the_int;

member:


    void main()
    {
        result = 0.0f;
        result = float(the_int);
    }
};


shader adsk_Utility_MSL_UVGen_to_Float3 {

output:

    float3 result;

input:

    Color the_color = float4(0.0f,0.0f,0.0f,0.0f);

member:


    void main()
    {
        result = float3(0.0f,0.0f,0.0f);
        result.xy = the_color.rg;
    }
};
