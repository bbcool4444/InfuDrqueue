/******************************************************************************
 * The following code was generated by the mental mill(R)                     *
 * code generator gen_msl, build 126420.5925.3501
 *                                                                            *
 * Portions Copyright (c) 1986-2010 mental images GmbH, Berlin, Germany.      *
 ******************************************************************************/

// Option settings:


shader adsk_Utility_MSL_Normal_State {

output:

    Color result;
    float3 result_bump;

member:


    void main()
    {
        result = float4(0.0f,0.0f,0.0f,0.0f);
        result_bump = float3(0.0f,0.0f,0.0f);
        result.rgb = state::normal.xyz;
        result.a = 1.0f;
        result_bump = state::normal.xyz;
    }
};


shader adsk_Utility_MSL_Normal_Add {

output:

    float3 result;

input:

    Color add_normal_0 = float4(0.0f,0.0f,0.0f,0.0f);
    Color add_normal_1 = float4(0.0f,0.0f,0.0f,0.0f);
    int enable = 0;

member:


    void main()
    {
        Color X0000000 = float4(0.0f,0.0f,0.0f,0.0f);
        Color X0000001 = float4(0.0f,0.0f,0.0f,0.0f);
        switch(enable) {
        case 0:
            result.xyz = add_normal_0.rgb;
            break;
        case 1:
            result = state::normal;
            X0000000 = add_normal_0;
            X0000001 = add_normal_1;
            X0000000.rgb -= result.xyz;
            X0000001.rgb -= result.xyz;
            result.xyz += X0000000.rgb;
            result.xyz += X0000001.rgb;
            break;
        case 2:
            result = state::normal;
            X0000000 = add_normal_0;
            X0000001 = add_normal_1;
            if((X0000000.r + X0000000.g) + X0000000.b == 0.0f)
                X0000000.rgb = state::normal.xyz;
            if((X0000001.r + X0000001.g) + X0000001.b == 0.0f)
                X0000001.rgb = state::normal.xyz;
            X0000000.rgb -= result.xyz;
            X0000001.rgb -= result.xyz;
            result.xyz += X0000000.rgb;
            result.xyz += X0000001.rgb;
            break;
        }
    }
};


shader adsk_Utility_MSL_Normal_Add_Vector {

output:

    float3 result;

input:

    float3 add_normal_0 = float3(0.0f);
    float3 add_normal_1 = float3(0.0f);
    int enable = 0;

member:


    void main()
    {
        result = state::normal;
        float3 X0000002 = add_normal_0;
        float3 X0000003 = add_normal_1;
        switch(enable) {
        case 0:
            result.xyz = add_normal_0.rgb;
            break;
        case 1:
        case 2:
            if(!all(X0000002))
                X0000002 = state::normal;
            if(!all(X0000003))
                X0000003 = state::normal;
            X0000002 -= result;
            X0000003 -= result;
            result += X0000002;
            result += X0000003;
            break;
        }
    }
};
