/******************************************************************************
 * The following code was generated by the mental mill(R)                     *
 * code generator gen_msl, build 126420.5925.3501
 *                                                                            *
 * Portions Copyright (c) 1986-2010 mental images GmbH, Berlin, Germany.      *
 ******************************************************************************/

// Option settings:


Color adsk_MSL_FNC_rgbTOhsva(in Color X0000000)
{
    float X0000001 = X0000000.r, X0000002 = X0000000.g, X0000003 = X0000000.b, X0000004 = X0000000.a;
    float X0000005, X0000006, X0000007;
    int X0000008 = 0;
    Color X0000009 = float4(0.0f);
    X0000006 = X0000001;
    if(X0000002 < X0000006)
        X0000006 = X0000002;
    if(X0000003 < X0000006)
        X0000006 = X0000003;
    X0000005 = X0000001;
    if(X0000002 > X0000005)
        X0000005 = X0000002;
    if(X0000003 > X0000005)
        X0000005 = X0000003;
    X0000009.b = X0000005;
    if(X0000005 == X0000006) {
        X0000009.r = (X0000009.g = 0.0f);
    } else {
        X0000007 = X0000001 == X0000006 ? X0000002 - X0000003 : (X0000002 == X0000006 ? X0000003 - X0000001 : X0000001 - X0000002);
        X0000008 = X0000001 == X0000006 ? 3 : (X0000002 == X0000006 ? 5 : 1);
        X0000009.r = (float(X0000008) - X0000007 / (X0000005 - X0000006)) / 6.0f;
        X0000009.g = (X0000005 - X0000006) / X0000005;
    }
    X0000009.a = X0000004;
    return X0000009;
}

Color adsk_MSL_FNC_hsvTOrgba(in Color X0000010)
{
    Color X0000011 = float4(0.0f);
    float X0000012 = X0000010.r, X0000013 = X0000010.g, X0000014 = X0000010.b, X0000015 = X0000010.a;
    if(X0000012 == 1.0f || X0000012 == 0.0f)
        X0000012 = .9999f;
    X0000012 *= 6.0f;
    int X0000016;
    float X0000017, X0000018, X0000019, X0000020;
    X0000016 = int(floor(X0000012));
    X0000017 = X0000012 - float(X0000016);
    X0000018 = X0000014 * (1.0f - X0000013);
    X0000019 = X0000014 * (1.0f - X0000013 * X0000017);
    X0000020 = X0000014 * (1.0f - X0000013 * (1.0f - X0000017));
    switch(X0000016) {
    case 0:
        {
            X0000011.r = X0000014;
            X0000011.g = X0000020;
            X0000011.b = X0000018;
            break;
        }
    case 1:
        {
            X0000011.r = X0000019;
            X0000011.g = X0000014;
            X0000011.b = X0000018;
            break;
        }
    case 2:
        {
            X0000011.r = X0000018;
            X0000011.g = X0000014;
            X0000011.b = X0000020;
            break;
        }
    case 3:
        {
            X0000011.r = X0000018;
            X0000011.g = X0000019;
            X0000011.b = X0000014;
            break;
        }
    case 4:
        {
            X0000011.r = X0000020;
            X0000011.g = X0000018;
            X0000011.b = X0000014;
            break;
        }
    case 5:
        {
            X0000011.r = X0000014;
            X0000011.g = X0000018;
            X0000011.b = X0000019;
            break;
        }
    }
    X0000011.a = X0000015;
    return X0000011;
}

shader adsk_TEST_MSL_HSV {

output:

    Color result;

input:

    Color iColor;
    float hue;
    float sat;
    float val;

member:


    void main()
    {
        result = float4(0.0f);
        Color X0000021 = float4(0.0f);
        X0000021 = adsk_MSL_FNC_rgbTOhsva(iColor);
        X0000021.r *= hue;
        X0000021.g *= sat;
        X0000021.b *= val;
        result = adsk_MSL_FNC_hsvTOrgba(X0000021);
    }
};
