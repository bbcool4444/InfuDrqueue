/******************************************************************************
 * The following code was generated by the mental mill(R)                     *
 * code generator gen_msl, build 126420.5925.3501
 *                                                                            *
 * Portions Copyright (c) 1986-2010 mental images GmbH, Berlin, Germany.      *
 ******************************************************************************/

// Option settings:


shader adsk_Utility_MSL_Switch2Shader_SL {

output:

    Color result;

input:

    int switcher = 0;
    int type = 0;
    Shader shader_1;
    Shader shader_2;

member:


    void main()
    {
        Color X0000000 = float4(0.0f,0.0f,0.0f,1.0f);
        Color X0000001 = float4(0.0f,0.0f,0.0f,1.0f);
        switch(switcher) {
        case 0:
            if(type > 2)
                shader_1.call("output","result",result);
            else
                shader_1.call("output","result_bump",X0000001,"output","result",X0000000);
            break;
        case 1:
            if(type > 2)
                shader_2.call("output","result",result);
            else
                shader_2.call("output","result_bump",X0000001,"output","result",X0000000);
            break;
        }
        switch(type) {
        case 0:
            result = X0000000;
            break;
        case 1:
            result = X0000000;
            break;
        case 2:
            result = X0000001;
            break;
        case 3:
            break;
        }
    }
};


shader adsk_Utility_MSL_Switch8Shader_SL {

output:

    Color result;

input:

    int switcher = 0;
    int type = 0;
    Shader shader_1;
    Shader shader_2;
    Shader shader_3;
    Shader shader_4;
    Shader shader_5;
    Shader shader_6;
    Shader shader_7;
    Shader shader_8;

member:


    void main()
    {
        Color X0000002 = float4(0.0f,0.0f,0.0f,1.0f);
        Color X0000003 = float4(0.0f,0.0f,0.0f,1.0f);
        switch(switcher) {
        case 0:
            if(type > 2)
                shader_1.call("output","result",result);
            else
                shader_1.call("output","result_bump",X0000003,"output","result",X0000002);
            break;
        case 1:
            if(type > 2)
                shader_2.call("output","result",result);
            else
                shader_2.call("output","result_bump",X0000003,"output","result",X0000002);
            break;
        case 2:
            if(type > 2)
                shader_3.call("output","result",result);
            else
                shader_3.call("output","result_bump",X0000003,"output","result",X0000002);
            break;
        case 3:
            if(type > 2)
                shader_4.call("output","result",result);
            else
                shader_4.call("output","result_bump",X0000003,"output","result",X0000002);
            break;
        case 4:
            if(type > 2)
                shader_5.call("output","result",result);
            else
                shader_5.call("output","result_bump",X0000003,"output","result",X0000002);
            break;
        case 5:
            if(type > 2)
                shader_6.call("output","result",result);
            else
                shader_6.call("output","result_bump",X0000003,"output","result",X0000002);
            break;
        case 6:
            if(type > 2)
                shader_7.call("output","result",result);
            else
                shader_7.call("output","result_bump",X0000003,"output","result",X0000002);
            break;
        case 7:
            if(type > 2)
                shader_8.call("output","result",result);
            else
                shader_8.call("output","result_bump",X0000003,"output","result",X0000002);
            break;
        }
        switch(type) {
        case 0:
            result = X0000002;
            break;
        case 1:
            result = X0000002;
            break;
        case 2:
            result = X0000003;
            break;
        case 3:
        case 4:
        case 5:
        case 6:
            break;
        }
    }
};


shader adsk_Utility_MSL_Switch3Vector_SL {

output:

    float3 result;

input:

    int switcher = 0;
    float3 vector_1;
    float3 vector_2;
    float3 vector_3;

member:


    void main()
    {
        result = float3(0.0f,0.0f,0.0f);
        switch(switcher) {
        case 0:
            result = vector_1;
            break;
        case 1:
            result = vector_2;
            break;
        case 2:
            result = vector_3;
            break;
        }
    }
};


shader adsk_Utility_MSL_Switch5Vector_SL {

output:

    float3 result;

input:

    int switcher = 0;
    float3 vector_1;
    float3 vector_2;
    float3 vector_3;
    float3 vector_4;
    float3 vector_5;

member:


    void main()
    {
        result = float3(0.0f,0.0f,0.0f);
        switch(switcher) {
        case 0:
            result = vector_1;
            break;
        case 1:
            result = vector_2;
            break;
        case 2:
            result = vector_3;
            break;
        case 3:
            result = vector_4;
            break;
        case 4:
            result = vector_5;
            break;
        }
    }
};


shader adsk_Utility_MSL_Switch2Float_SL {

output:

    float result;

input:

    int switcher = 0;
    float float_1;
    float float_2;

member:


    void main()
    {
        result = 0.0f;
        switch(switcher) {
        case 0:
            result = float_1;
            break;
        case 1:
            result = float_2;
            break;
        }
    }
};
