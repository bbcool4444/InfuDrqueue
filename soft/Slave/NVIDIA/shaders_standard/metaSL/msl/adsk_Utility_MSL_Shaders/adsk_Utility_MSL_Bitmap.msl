/******************************************************************************
 * The following code was generated by the mental mill(R)                     *
 * code generator gen_msl, build 126420.5925.3501
 *                                                                            *
 * Portions Copyright (c) 1986-2010 mental images GmbH, Berlin, Germany.      *
 ******************************************************************************/

// Option settings:


shader adsk_Utility_MSL_Bitmap {

output:

    Color result;
    float3 result_bump;

input:

    texture2D bitmap = "brickwall.dds";
    Color uv_coords;
    float bump_amount = 0.0f;

member:


    float X0000000(in Color X0000001)
    {
        float X0000002 = ((X0000001.r + X0000001.g) + X0000001.b) * 0.333333333f;
        return X0000002;
    }

    void main()
    {
        result = float4(0.0f,0.0f,0.0f,0.0f);
        result_bump = float3(0.0f,0.0f,0.0f);
        float X0000003 = uv_coords.r;
        float X0000004 = uv_coords.g;
        float2 X0000005 = float2(uv_coords.b,uv_coords.a);
        float X0000006 = X0000005.x + X0000005.y;
        bool X0000007 = true;
        if(X0000007 && X0000006 < 0.05f) {
            Color X0000008 = float4(0.0f,0.0f,0.0f,0.0f);
            float X0000009 = 0.0f;
            float3 X0000010 = float3(0.0f,0.0f,0.0f);
            float X0000011 = 0.05f;
            X0000011 = X0000006 < 0.001f ? 0.01f : (X0000005.x + X0000005.y) / 2.0f;
            X0000008 = tex2d(bitmap,float2(X0000003,X0000004));
            X0000009 = X0000000(X0000008);
            X0000009 = X0000009 * X0000011 - X0000011 * 0.5f;
            X0000010 = state::tangent_space[0] * state::direction;
            X0000003 -= X0000010.x * X0000009;
            X0000004 -= X0000010.y * X0000009;
        }
        result = tex2d(bitmap,float2(X0000003,X0000004));
        result_bump = state::normal;
        if(bump_amount != 0.0f) {
            float X0000012 = X0000000(result);
            if(X0000005.x == 0.0f && X0000005.y == 0.0f)
                X0000005 = (abs(ddx((state::texture_coordinate[0])).xyz) + abs(ddy((state::texture_coordinate[0])).xyz)).xy;
            float3 X0000013 = state::texture_tangent_u[0];
            float3 X0000014 = state::texture_tangent_v[0];
            float3 X0000015 = float3(0.0f,0.0f,0.0f);
            float3 X0000016 = float3(0.0f,0.0f,0.0f);
            X0000015.x = X0000003;
            X0000015.y = X0000004;
            X0000015.z = 0.0f;
            Color X0000017;
            if(X0000005.x > 0.0f) {
                X0000017 = tex2d(bitmap,float2(X0000003 + X0000005.x,X0000004));
                float X0000018 = X0000000(X0000017);
                X0000015.x = -(X0000018 - X0000012) / X0000005.x;
            } else
                X0000015.x = 0.0f;
            if(X0000005.y > 0.0f) {
                X0000017 = tex2d(bitmap,float2(X0000003,X0000004 + X0000005.y));
                float X0000019 = X0000000(X0000017);
                X0000015.y = -(X0000019 - X0000012) / X0000005.y;
            } else
                X0000015.y = 0.0f;
            X0000015 *= 0.012f;
            float3 X0000020 = float3(0.0f,0.0f,0.0f);
            X0000020.x = X0000015.x * X0000013.x + X0000015.y * X0000014.x;
            X0000020.y = X0000015.x * X0000013.y + X0000015.y * X0000014.y;
            X0000020.z = X0000015.x * X0000013.z + X0000015.y * X0000014.z;
            X0000020 *= bump_amount;
            X0000020 += state::normal;
            X0000020 = normalize(X0000020);
            result_bump = X0000020;
        }
    }
};
