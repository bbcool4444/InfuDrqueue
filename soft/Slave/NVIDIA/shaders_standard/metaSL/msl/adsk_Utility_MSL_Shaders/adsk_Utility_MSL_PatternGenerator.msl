/******************************************************************************
 * The following code was generated by the mental mill(R)                     *
 * code generator gen_msl, build 126420.5925.3501
 *                                                                            *
 * Portions Copyright (c) 1986-2010 mental images GmbH, Berlin, Germany.      *
 ******************************************************************************/

// Option settings:


shader adsk_Utility_MSL_PatternGenerator {

output:

    Color result;

input:

    int pattern_type;
    Color back_color = float4(0.0f);
    Color item_color = float4(1.0f);
    Shader item_custom;
    float item_width;
    float item_height;
    float3 item_center = float3(.5f,.0f,.0f);
    float3 item_space = float3(.1f,.0f,0.0f);
    float item_bsmooth;
    float3 coords;
    float3 coords_tiling = float3(1.0f,.0f,0.0f);
    float3 coords_shift;

member:


    float X0000000(float3 X0000008)
    {
        return sqrt((X0000008.x * X0000008.x + X0000008.y * X0000008.y) + X0000008.z * X0000008.z);
    }

    float X0000001(float X0000009,float X0000010,float X0000011,float X0000012)
    {
        return smoothstep((X0000009 - X0000011),X0000009,X0000012) - smoothstep((X0000010 - X0000011),X0000010,X0000012);
    }

    float X0000002(float X0000013,float X0000014)
    {
        return X0000013 * X0000014;
    }

    float X0000003(float X0000015,float X0000016)
    {
        return (X0000015 + X0000016) - X0000015 * X0000016;
    }

    float X0000004(float3 X0000017,float3 X0000018,float3 X0000019)
    {
        float3 X0000020, X0000021, X0000022, X0000023, X0000024;
        float X0000025, X0000026;
        X0000020 = X0000018 - X0000017;
        X0000022 = X0000019 - X0000017;
        X0000021 = X0000020;
        X0000021 = normalize(X0000021);
        X0000025 = X0000000(X0000020);
        X0000026 = dot(X0000022,X0000021);
        X0000021.xyz *= X0000026.xxx;
        X0000023 = X0000021;
        if(X0000026 < 0.0f) {
            X0000023.x = 0.0f;
            X0000023.y = 0.0f;
            X0000023.z = 0.0f;
        } else if(X0000026 > X0000025) {
            X0000023 = X0000020;
        }
        X0000024 = X0000022 - X0000023;
        return X0000000(X0000024);
    }

    Color X0000005(Color X0000027,Color X0000028,float X0000029)
    {
        Color X0000030;
        X0000030.r = lerp(X0000027.r,X0000028.r,X0000029);
        X0000030.g = lerp(X0000027.g,X0000028.g,X0000029);
        X0000030.b = lerp(X0000027.b,X0000028.b,X0000029);
        return X0000030;
    }

    void X0000006(in float3 X0000031,in float X0000032,out float3 X0000033,out float3 X0000034,out float3 X0000035,in bool X0000036)
    {
        float X0000037, X0000038;
        float X0000039, X0000040;
        float X0000041, X0000042;
        float X0000043, X0000044, X0000045;
        X0000038 = (X0000040 = floor(X0000031.x) + 0.5f);
        X0000037 = (X0000039 = floor(X0000031.y) + 0.5f);
        X0000033.x = (X0000033.y = 1000.0f);
        for(int X0000046 = -1; X0000046 <= 1; X0000046++) {
            X0000040 = X0000038 + float(X0000046);
            for(int X0000047 = -1; X0000047 <= 1; X0000047++) {
                X0000039 = X0000037 + float(X0000047);
                if(X0000036 && float(abs(int(fmod(X0000040,2.0f) < 1.0f))) != 0.0f)
                    X0000039 += 0.5f;
                X0000041 = X0000040;
                X0000042 = X0000039;
                X0000043 = X0000041 - X0000031.x;
                X0000044 = X0000042 - X0000031.y;
                X0000045 = X0000043 * X0000043 + X0000044 * X0000044;
                if(X0000045 < X0000033.x) {
                    X0000033.y = X0000033.x;
                    X0000035.x = X0000034.x;
                    X0000035.y = X0000034.y;
                    X0000033.x = X0000045;
                    X0000034.x = X0000041;
                    X0000034.y = X0000042;
                } else if(X0000045 < X0000033.y) {
                    X0000033.y = X0000045;
                    X0000035.x = X0000041;
                    X0000035.y = X0000042;
                }
            }
        }
        X0000033.x = sqrt(X0000033.x);
        X0000033.y = sqrt(X0000033.y);
    }

    float X0000007(float3 X0000048,float X0000049,float X0000050,float X0000051,float X0000052)
    {
        if(X0000051 == 0.0f)
            X0000051 = 0.1f;
        float X0000053, X0000054, X0000055, X0000056;
        float X0000057, X0000058;
        float X0000059;
        float3 X0000060 = float3(0.0f);
        float3 X0000061 = float3(0.0f);
        X0000061.y += X0000050;
        X0000059 = X0000004(X0000060,X0000061,X0000048);
        X0000053 = 1.0f - smoothstep((X0000051 - X0000052),X0000051,X0000059);
        X0000060 = X0000061;
        X0000061.x += X0000049;
        X0000059 = X0000004(X0000060,X0000061,X0000048);
        X0000055 = 1.0f - smoothstep((X0000051 - X0000052),X0000051,X0000059);
        X0000060 = X0000061;
        X0000061.y -= X0000050;
        X0000059 = X0000004(X0000060,X0000061,X0000048);
        X0000054 = 1.0f - smoothstep((X0000051 - X0000052),X0000051,X0000059);
        X0000060 = X0000061;
        X0000061.x -= X0000049;
        X0000059 = X0000004(X0000060,X0000061,X0000048);
        X0000056 = 1.0f - smoothstep((X0000051 - X0000052),X0000051,X0000059);
        X0000060 = X0000061;
        X0000061.x += X0000049;
        X0000061.y += X0000050;
        X0000059 = X0000004(X0000060,X0000061,X0000048);
        X0000057 = 1.0f - smoothstep((X0000051 - X0000052),X0000051,X0000059);
        X0000060.x = 0.0f;
        X0000060.y = X0000050;
        X0000061.x = X0000049;
        X0000061.y = 0.0f;
        X0000059 = X0000004(X0000060,X0000061,X0000048);
        X0000058 = 1.0f - smoothstep((X0000051 - X0000052),X0000051,X0000059);
        float X0000062, X0000063, X0000064, X0000065;
        X0000062 = X0000003(X0000053,X0000055);
        X0000063 = X0000003(X0000054,X0000056);
        X0000064 = X0000003(X0000057,X0000058);
        X0000065 = X0000003(X0000062,X0000063);
        return X0000003(X0000065,X0000064);
    }

    void main()
    {
        result = float4(0.0f);
        int X0000066 = pattern_type;
        Color X0000067 = back_color;
        Color X0000068 = item_color;
        float X0000069 = item_width;
        float X0000070 = item_height;
        float3 X0000071 = item_center;
        float3 X0000072 = item_space;
        float X0000073 = item_bsmooth;
        float X0000074 = X0000073 / 2.0f;
        float3 X0000075 = coords;
        float3 X0000076 = coords_tiling;
        float3 X0000077 = coords_shift;
        float X0000078 = 1.0f;
        float X0000079 = 0.0f;
        if(X0000076.y == 0.0f)
            X0000076.y = X0000076.x;
        float3 X0000080 = X0000075;
        if(X0000072.y == 0.0f)
            X0000072.y = X0000072.x;
        float X0000081 = X0000072.x;
        float X0000082 = X0000072.y;
        if(X0000070 == 0.0f)
            X0000070 = X0000069;
        X0000071.x -= 0.5f;
        X0000071.y = X0000071.x;
        X0000071.z = 0.0f;
        float X0000083 = 0.0f;
        float X0000084 = X0000076.x + X0000072.x;
        float X0000085 = 1.0f / X0000084;
        X0000084 = X0000085 * X0000078;
        X0000075.x *= X0000084;
        X0000075.y *= X0000084;
        X0000075.x -= X0000071.x;
        X0000075.y -= X0000071.y;
        X0000069 = 1.0f;
        X0000070 = 1.0f;
        X0000080.x = X0000075.x / X0000069;
        X0000080.y = X0000075.y / X0000070;
        switch(X0000066) {
        case 0:
            X0000068.a = 0.0f;
            break;
        case 1:
            {
                float3 X0000086 = float3(0.0f);
                float3 X0000087 = float3(0.0f);
                float3 X0000088 = float3(0.0f);
                X0000006(X0000080,X0000083,X0000086,X0000087,X0000088,true);
                X0000069 = (X0000085 * X0000076.x) / 2.0f;
                X0000068.a = 1.0f - smoothstep((X0000069 - X0000073),X0000069,X0000086.x);
            }
            break;
        case 2:
            {
                X0000080.x -= floor(X0000080.x);
                X0000080.y -= floor(X0000080.y);
                X0000069 = (X0000085 * X0000076.x) / 2.0f;
                X0000071.x = 0.5f;
                X0000071.y = 0.5f;
                X0000079 = distance(X0000071,X0000080);
                X0000068.a = 1.0f - smoothstep((X0000069 - X0000073),X0000069,X0000079);
            }
            break;
        case 3:
            {
                if(fmod(X0000080.y * 0.5f,1.0f) > 0.5f)
                    X0000080.x += X0000077.x;
                X0000080.x -= floor(X0000080.x);
                X0000080.y -= floor(X0000080.y);
                float X0000089 = X0000085 * X0000072.x;
                float X0000090 = X0000085 * X0000072.y;
                float X0000091 = X0000069 - X0000089;
                float X0000092 = X0000089 / 2.0f;
                float X0000093 = X0000092 + X0000091;
                float X0000094 = X0000092;
                float X0000095 = X0000093;
                X0000068.a = X0000002(X0000001(X0000092 + X0000074,X0000093 + X0000074,X0000073,X0000080.x),X0000001(X0000094 + X0000074,X0000095 + X0000074,X0000073,X0000080.y));
            }
            break;
        case 4:
            {
                X0000080.x -= floor(X0000080.x);
                X0000080.y -= floor(X0000080.y);
                X0000081 = (X0000085 * X0000072.x) / 2.0f;
                X0000068.a = 1.0f - X0000007(X0000080,X0000069,X0000070,X0000081,X0000073);
            }
            break;
        case 5:
            {
                float3 X0000096 = float3(0.0f);
                float3 X0000097 = float3(0.0f);
                float3 X0000098 = float3(0.0f);
                X0000006(X0000080,X0000083,X0000096,X0000097,X0000098,true);
                float3 X0000099 = X0000080;
                X0000099.x += .2f;
                float3 X0000100 = X0000099;
                X0000100.x -= .4f;
                float X0000101 = X0000004(X0000099,X0000100,X0000097);
                float X0000102 = 1.0f - smoothstep((.2f - X0000074),.2f,X0000101);
                X0000099 = X0000080;
                X0000099.y += .2f;
                X0000100 = X0000099;
                X0000100.y -= .4f;
                X0000101 = X0000004(X0000099,X0000100,X0000097);
                float X0000103 = 1.0f - smoothstep((.2f - X0000074),.2f,X0000101);
                X0000068.a = X0000003(X0000102,X0000103);
            }
            break;
        case 6:
            {
                X0000076.x = X0000084;
                X0000076.y = (X0000076.x / 2.f) * sqrt(3.f);
                X0000075.x *= X0000076.x;
                X0000075.y *= X0000076.y;
                X0000075.x -= X0000071.x;
                X0000075.y -= X0000071.y;
                X0000080.x = X0000075.x;
                X0000080.y = X0000075.y;
                float3 X0000104 = float3(0.0f);
                float3 X0000105 = float3(0.0f);
                float3 X0000106 = float3(0.0f);
                X0000006(X0000080,0.0f,X0000104,X0000105,X0000106,true);
                float X0000107 = distance(X0000105,X0000106) / (distance(X0000105,X0000080) + distance(X0000080,X0000106));
                float X0000108 = X0000085 * X0000072.x;
                X0000108 *= X0000107;
                X0000068.a = smoothstep(X0000108 - X0000073,X0000108,X0000104.y - X0000104.x);
            }
            break;
        case 7:
            {
                Color X0000109 = float4(0.0f);
                item_custom.call("output","result",X0000109);
                X0000068.a = 1.0f - ((X0000109.r + X0000109.g) + X0000109.b) / 3.0f;
            }
        }
        result = X0000005(X0000067,X0000068,X0000068.a);
    }
};
