/******************************************************************************
 * The following code was generated by the mental mill(R)                     *
 * code generator gen_msl, build 126420.5925.3501
 *                                                                            *
 * Portions Copyright (c) 1986-2010 mental images GmbH, Berlin, Germany.      *
 ******************************************************************************/

// Option settings:


shader adsk_Utility_MSL_CallShader {

output:

    Color result;
    float3 result_bump;

input:

    Shader the_shader;
    float bump_amount = 0.0f;

member:


    void main()
    {
        result = float4(0.0f,0.0f,0.0f,1.0f);
        result_bump = float3(0.0f,0.0f,0.0f);
        if(bump_amount != 0.0f) {
            if(!the_shader.call("input","bump_amount",bump_amount,"output","result",result,"output","result_bump",result_bump)) {
                result = float4(0.0f,0.0f,0.0f,1.0f);
                result_bump = float3(0.0f,0.0f,0.0f);
            }
        } else {
            if(!the_shader.call("output","result",result)) {
                result = float4(0.0f,0.0f,0.0f,1.0f);
                result_bump = float3(0.0f,0.0f,0.0f);
            }
        }
    }
};


shader adsk_Utility_MSL_CallShader_X {

output:

    Color result;

input:

    Shader the_shader;
    Color the_color = float4(1.0f,1.0f,1.0f,1.0f);

member:


    void main()
    {
        result = float4(0.0f,0.0f,0.0f,1.0f);
        if(!the_shader.call("output","result",result)) {
            result = the_color;
        }
    }
};


shader adsk_Utility_MSL_BumpCombiner {

output:

    Color result;

input:

    Shader iMaterial;
    Shader iBump;
    float bump_amount = 0.0f;

member:


    void main()
    {
        result = float4(0.0f);
        float3 X0000000 = float3(0.0f);
        if(!iBump.call("output","result_bump",X0000000))
            X0000000 = state::normal;
        iMaterial.call("input","normal",X0000000,"output","result",result);
    }
};


shader adsk_Utility_MSL_ShaderPassthrough_MultiOutputs {

output:

    Color result;
    Color result_bump;

input:

    Shader the_col_shader;
    Shader the_bump_shader;

member:


    void main()
    {
        the_col_shader.call("output","result",result);
        the_bump_shader.call("output","result_bump",result_bump);
    }
};
