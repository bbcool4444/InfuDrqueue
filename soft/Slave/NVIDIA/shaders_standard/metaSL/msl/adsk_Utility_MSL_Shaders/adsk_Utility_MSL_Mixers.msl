/******************************************************************************
 * The following code was generated by the mental mill(R)                     *
 * code generator gen_msl, build 126420.5925.3501
 *                                                                            *
 * Portions Copyright (c) 1986-2010 mental images GmbH, Berlin, Germany.      *
 ******************************************************************************/

// Option settings:


struct layer {
    Shader the_shader;
    Color opacity;
    int mode;
    float offset;
    bool disabled;
};


struct layer_col {
    Color the_color;
    Color opacity;
    int mode;
    float offset;
    bool disabled;
};


shader adsk_Utility_MSL_Mix3Bump {

output:

    Color result;

input:

    Shader bump_1;
    float factor_1;
    Shader bump_2;
    float factor_2;
    Shader bump_3;
    float factor_3;
    bool set_normal;

member:


    void main()
    {
        result = float4(0.0f,0.0f,0.0f,0.0f);
    }
};


shader adsk_Utility_MSL_Mix8Shader {

output:

    Color result;

input:

    Shader shader1;
    Shader shader2;
    int mix2_mode;
    Color mix2_factor;
    Shader shader3;
    int mix3_mode;
    Color mix3_factor;
    Shader shader4;
    int mix4_mode;
    Color mix4_factor;
    Shader shader5;
    int mix5_mode;
    Color mix5_factor;
    Shader shader6;
    int mix6_mode;
    Color mix6_factor;
    Shader shader7;
    int mix7_mode;
    Color mix7_factor;
    Shader shader8;
    int mix8_mode;
    Color mix8_factor;

member:


    void main()
    {
        result = float4(0.0f,0.0f,0.0f,0.0f);
    }
};


shader adsk_Utility_MSL_Mix2Shader {

output:

    Color result;

input:

    Shader shader1;
    Shader shader2;
    int mixing_mode;
    float mixing_factor;
    bool disable_shader2;

member:


    void main()
    {
        Color X0000000 = float4(0.0f,0.0f,0.0f,1.0f);
        Color X0000001 = float4(0.0f,0.0f,0.0f,1.0f);
        float X0000002 = mixing_factor;
        Color X0000003 = float4(0.0f,0.0f,0.0f,1.0f);
        Color X0000004 = float4(0.0f,0.0f,0.0f,1.0f);
        result = X0000003;
        shader1.call("output","result",X0000003);
        X0000001 = X0000003;
        if(disable_shader2) {
            result = X0000001;
            return;
        }
        shader2.call("output","result",X0000004);
        switch(mixing_mode) {
        case 0:
            X0000001 = X0000004;
            break;
        case 1:
            X0000001 = X0000003 + X0000004;
            break;
        case 2:
            X0000001 = X0000003 * X0000004;
            break;
        case 3:
            X0000001 = (1.0f - (1.0f - X0000003) * (1.0f - X0000004)) * X0000002;
            break;
        case 4:
            X0000001 = (X0000003 + X0000004 * X0000002) - 1.0f;
            break;
        case 5:
            X0000001 = X0000003 < X0000004 ? X0000003 : X0000004;
            break;
        case 6:
            X0000001 = X0000003 > X0000004 ? X0000003 : X0000004;
            break;
        case 7:
            X0000001 = abs(X0000003 - X0000004 * X0000002);
            break;
        case 8:
            X0000001 = (X0000003 + X0000004 * X0000002) / 2.0f;
            break;
        case 9:
            X0000001 = 1.0f - abs(((1.0f - X0000003) - X0000004 * X0000002));
            break;
        case 10:
            X0000001 = (X0000003 + X0000004 * X0000002) - ((2.0f * X0000003) * X0000004) * X0000002;
            break;
        case 11:
            X0000001.r = X0000003.r < 0.5f ? (X0000001.r = (X0000003.r * 2.0f) * X0000004.r) : 1.0f - (2.0f * (1.0f - X0000003.r)) * (1.0f - X0000004.r);
            X0000001.g = X0000003.g < 0.5f ? (X0000001.g = (X0000003.g * 2.0f) * X0000004.g) : 1.0f - (2.0f * (1.0f - X0000003.g)) * (1.0f - X0000004.g);
            X0000001.b = X0000003.b < 0.5f ? (X0000001.b = (X0000003.b * 2.0f) * X0000004.b) : 1.0f - (2.0f * (1.0f - X0000003.b)) * (1.0f - X0000004.b);
            X0000001.a = X0000003.a < 0.5f ? (X0000001.a = (X0000003.a * 2.0f) * X0000004.a) : 1.0f - (2.0f * (1.0f - X0000003.a)) * (1.0f - X0000004.a);
            break;
        }
        result = lerp(X0000003,X0000001,X0000002);
    }
};


shader adsk_Utility_MSL_Mix2Color {

output:

    Color result;

input:

    Color color1;
    Color color2;
    int mixing_mode;
    float mixing_factor;

member:


    void main()
    {
        Color X0000005 = float4(0.0f,0.0f,0.0f,1.0f);
        Color X0000006 = float4(0.0f,0.0f,0.0f,1.0f);
        float X0000007 = mixing_factor;
        Color X0000008 = color1;
        Color X0000009 = color2;
        result = X0000008;
        switch(mixing_mode) {
        case 0:
            X0000006 = X0000009;
            break;
        case 1:
            X0000006 = X0000008 + X0000009;
            break;
        case 2:
            X0000006 = X0000008 * X0000009;
            break;
        case 3:
            X0000006 = (1.0f - (1.0f - X0000008) * (1.0f - X0000009)) * X0000007;
            break;
        case 4:
            X0000006 = (X0000008 + X0000009 * X0000007) - 1.0f;
            break;
        case 5:
            X0000006 = X0000008 < X0000009 ? X0000008 : X0000009;
            break;
        case 6:
            X0000006 = X0000008 > X0000009 ? X0000008 : X0000009;
            break;
        case 7:
            X0000006 = abs(X0000008 - X0000009 * X0000007);
            break;
        case 8:
            X0000006 = (X0000008 + X0000009 * X0000007) / 2.0f;
            break;
        case 9:
            X0000006 = 1.0f - abs(((1.0f - X0000008) - X0000009 * X0000007));
            break;
        case 10:
            X0000006 = (X0000008 + X0000009 * X0000007) - ((2.0f * X0000008) * X0000009) * X0000007;
            break;
        case 11:
            X0000006.r = X0000008.r < 0.5f ? (X0000006.r = (X0000008.r * 2.0f) * X0000009.r) : 1.0f - (2.0f * (1.0f - X0000008.r)) * (1.0f - X0000009.r);
            X0000006.g = X0000008.g < 0.5f ? (X0000006.g = (X0000008.g * 2.0f) * X0000009.g) : 1.0f - (2.0f * (1.0f - X0000008.g)) * (1.0f - X0000009.g);
            X0000006.b = X0000008.b < 0.5f ? (X0000006.b = (X0000008.b * 2.0f) * X0000009.b) : 1.0f - (2.0f * (1.0f - X0000008.b)) * (1.0f - X0000009.b);
            X0000006.a = X0000008.a < 0.5f ? (X0000006.a = (X0000008.a * 2.0f) * X0000009.a) : 1.0f - (2.0f * (1.0f - X0000008.a)) * (1.0f - X0000009.a);
            break;
        }
        result = lerp(X0000008,X0000006,X0000007);
    }
};


shader adsk_Utility_MSL_Mix2ColorCompact {

output:

    Color result;

input:

    Color color1 = float4(0.0f,0.0f,0.0f,1.0f);
    Color color2 = float4(1.0f,1.0f,1.0f,1.0f);
    int mixing_mode = 0
            {
                hard_range(0,2);
            };
    float mixing_factor = 0.5f
            {
                hard_range(0.0f,1.0f);
            };

member:


    void main()
    {
        result = color1;
        Color X0000010 = float4(0.0f,0.0f,0.0f,1.0f);
        switch(mixing_mode) {
        case 0:
            X0000010 = color2;
            break;
        case 1:
            X0000010 = color1 + color2;
            break;
        case 2:
            X0000010 = color1 * color2;
            break;
        }
        result = lerp(color1,X0000010,mixing_factor);
    }
};


shader adsk_Utility_MSL_Mix2Float {

output:

    float result;

input:

    float iFloat1 = 0.0f;
    float iFloat2 = 1.0f;
    int mixing_mode = 0
            {
                hard_range(0,2);
            };
    float mixing_factor = 0.5f
            {
                hard_range(0.0f,1.0f);
            };

member:


    void main()
    {
        result = 0.0f;
        float X0000011 = 0.0f;
        switch(mixing_mode) {
        case 0:
            X0000011 = iFloat2;
            break;
        case 1:
            X0000011 = iFloat1 + iFloat2;
            break;
        case 2:
            X0000011 = iFloat1 * iFloat2;
            break;
        }
        result = lerp(iFloat1,X0000011,mixing_factor);
    }
};


shader adsk_Utility_MSL_MultiMixer {

output:

    Color result;

input:

    layer layers[8];
    int switcher;
    int is_switcher;
    int type;

member:


    void main()
    {
        result = float4(0.0f,0.0f,0.0f,1.0f);
        Color X0000012 = float4(0.34f,0.26f,0.4f,1.0f);
        Color X0000013[8];
        for(int X0000014 = 0; X0000014 < 8; X0000014++)
            X0000013[X0000014] = X0000012;
        if(type == 0 || type == 1) {
            (layers[0]).the_shader.call("output","result",(X0000013[0]));
            (layers[1]).the_shader.call("output","result",(X0000013[1]));
            (layers[2]).the_shader.call("output","result",(X0000013[2]));
            (layers[3]).the_shader.call("output","result",(X0000013[3]));
            (layers[4]).the_shader.call("output","result",(X0000013[4]));
            (layers[5]).the_shader.call("output","result",(X0000013[5]));
            (layers[6]).the_shader.call("output","result",(X0000013[6]));
            (layers[7]).the_shader.call("output","result",(X0000013[7]));
        } else {
            (layers[0]).the_shader.call("output","result_bump",(X0000013[0]));
            (layers[1]).the_shader.call("output","result_bump",(X0000013[1]));
            (layers[2]).the_shader.call("output","result_bump",(X0000013[2]));
            (layers[3]).the_shader.call("output","result_bump",(X0000013[3]));
            (layers[4]).the_shader.call("output","result_bump",(X0000013[4]));
            (layers[5]).the_shader.call("output","result_bump",(X0000013[5]));
            (layers[6]).the_shader.call("output","result_bump",(X0000013[6]));
            (layers[7]).the_shader.call("output","result_bump",(X0000013[7]));
        }
        layer_col X0000015[8] = {layer_col(X0000013[0],(layers[0]).opacity,(layers[0]).mode,(layers[0]).offset,(layers[0]).disabled),layer_col(X0000013[1],(layers[1]).opacity,(layers[1]).mode,(layers[1]).offset,(layers[1]).disabled),layer_col(X0000013[2],(layers[2]).opacity,(layers[2]).mode,(layers[2]).offset,(layers[2]).disabled),layer_col(X0000013[3],(layers[3]).opacity,(layers[3]).mode,(layers[3]).offset,(layers[3]).disabled),layer_col(X0000013[4],(layers[4]).opacity,(layers[4]).mode,(layers[4]).offset,(layers[4]).disabled),layer_col(X0000013[5],(layers[5]).opacity,(layers[5]).mode,(layers[5]).offset,(layers[5]).disabled),layer_col(X0000013[6],(layers[6]).opacity,(layers[6]).mode,(layers[6]).offset,(layers[6]).disabled),layer_col(X0000013[7],(layers[7]).opacity,(layers[7]).mode,(layers[7]).offset,(layers[7]).disabled)};
        layer_col X0000016 = X0000015[0];
        if(is_switcher == 1) {
            for(int X0000017 = 0; X0000017 < 8; X0000017++) {
                if(X0000017 == switcher) {
                    X0000016 = X0000015[X0000017];
                    break;
                }
            }
            result = X0000016.the_color;
            return;
        }
        if((X0000016.the_color.r == X0000012.r && X0000016.the_color.g == X0000012.g) && X0000016.the_color.b == X0000012.b) {
            result = float4(0.0f,1.0f,0.0f,1.0f);
            if(type == 2)
                result.rgb = state::normal.xyz;
            return;
        }
        Color X0000018 = float4(0.0f,1.0f,0.0f,1.0f);
        Color X0000019 = float4(1.0f,0.0f,0.0f,1.0f);
        Color X0000020 = X0000019;
        Color X0000021 = X0000019;
        float X0000022 = 1.0f;
        int X0000023 = 0;
        float X0000024 = 1.0f;
        bool X0000025 = false;
        float3 X0000026 = state::normal;
        bool X0000027 = false;
        switch(type) {
        case 0:
            break;
        case 1:
            break;
        case 2:
            Color X0000028 = float4(0.0f,0.0f,0.0f,1.0f);
            X0000026 = state::normal;
            Color X0000029 = float4(0.0f,0.0f,0.0f,1.0f);
            X0000029.rgb = state::normal.xyz;
            for(int X0000030 = 1; X0000030 < 8; X0000030++) {
                X0000028 = (X0000015[X0000030]).the_color;
                if(((X0000015[X0000030]).the_color.r == X0000012.r && (X0000015[X0000030]).the_color.g == X0000012.g) && (X0000015[X0000030]).the_color.b == X0000012.b)
                    break;
                X0000028 -= X0000029;
                X0000016.the_color += X0000028;
            }
            result = X0000029 + X0000016.the_color;
            break;
        case 3:
            X0000026 = state::normal;
            float3 X0000031 = float3(0.0f,0.0f,0.0f);
            float3 X0000032 = float3(0.0f,0.0f,0.0f);
            for(int X0000033 = 1; X0000033 < 8; X0000033++) {
                X0000031 = (X0000015[X0000033]).the_color.xyz;
                if(((X0000015[X0000033]).the_color.r == X0000012.r && (X0000015[X0000033]).the_color.g == X0000012.g) && (X0000015[X0000033]).the_color.b == X0000012.b)
                    break;
                X0000031 -= X0000026;
                X0000032 += X0000031;
            }
            state::normal = X0000032;
            result.rgb = state::normal.xyz;
            break;
        }
        X0000018 = X0000016.the_color;
        for(int X0000034 = 1; X0000034 < 8; X0000034++) {
            X0000016 = X0000015[X0000034];
            X0000025 = X0000016.disabled;
            X0000024 = X0000016.offset;
            if(X0000024 == 0.0f)
                X0000025 = true;
            if(!X0000025) {
                X0000020 = X0000016.the_color;
            }
            if(!X0000025) {
                X0000021 = X0000016.opacity;
                X0000023 = X0000016.mode;
                X0000019 = X0000018;
                X0000022 = ((X0000021.r + X0000021.g) + X0000021.b) / 3.0f;
                X0000020 *= X0000024;
                switch(X0000023) {
                case 0:
                    X0000018 = X0000020;
                    break;
                case 1:
                    X0000018 = X0000019 + X0000020;
                    break;
                case 2:
                    X0000018 = X0000019 * X0000020;
                    break;
                case 3:
                    X0000018 = (1.0f - (1.0f - X0000019) * (1.0f - X0000020)) * X0000022;
                    break;
                case 4:
                    X0000018 = (X0000019 + X0000020 * X0000022) - 1.0f;
                    break;
                case 5:
                    X0000018 = X0000019 < X0000020 ? X0000019 : X0000020;
                    break;
                case 6:
                    X0000018 = X0000019 > X0000020 ? X0000019 : X0000020;
                    break;
                case 7:
                    X0000018 = abs(X0000019 - X0000020 * X0000022);
                    break;
                case 8:
                    X0000018 = (X0000019 + X0000020 * X0000022) / 2.0f;
                    break;
                case 9:
                    X0000018 = 1.0f - abs(((1.0f - X0000019) - X0000020 * X0000022));
                    break;
                case 10:
                    X0000018 = (X0000019 + X0000020 * X0000022) - ((2.0f * X0000019) * X0000020) * X0000022;
                    break;
                case 11:
                    X0000018.r = X0000019.r < 0.5f ? (X0000018.r = (X0000019.r * 2.0f) * X0000020.r) : 1.0f - (2.0f * (1.0f - X0000019.r)) * (1.0f - X0000020.r);
                    X0000018.g = X0000019.g < 0.5f ? (X0000018.g = (X0000019.g * 2.0f) * X0000020.g) : 1.0f - (2.0f * (1.0f - X0000019.g)) * (1.0f - X0000020.g);
                    X0000018.b = X0000019.b < 0.5f ? (X0000018.b = (X0000019.b * 2.0f) * X0000020.b) : 1.0f - (2.0f * (1.0f - X0000019.b)) * (1.0f - X0000020.b);
                    X0000018.a = X0000019.a < 0.5f ? (X0000018.a = (X0000019.a * 2.0f) * X0000020.a) : 1.0f - (2.0f * (1.0f - X0000019.a)) * (1.0f - X0000020.a);
                    break;
                case 12:
                    X0000018.r = X0000020.r < 0.5f ? (X0000018.r = (X0000019.r * 2.0f) * X0000020.r) : 1.0f - (2.0f * (1.0f - X0000019.r)) * (1.0f - X0000020.r);
                    X0000018.g = X0000020.g < 0.5f ? (X0000018.g = (X0000019.g * 2.0f) * X0000020.g) : 1.0f - (2.0f * (1.0f - X0000019.g)) * (1.0f - X0000020.g);
                    X0000018.b = X0000020.b < 0.5f ? (X0000018.b = (X0000019.b * 2.0f) * X0000020.b) : 1.0f - (2.0f * (1.0f - X0000019.b)) * (1.0f - X0000020.b);
                    X0000018.a = X0000020.a < 0.5f ? (X0000018.a = (X0000019.a * 2.0f) * X0000020.a) : 1.0f - (2.0f * (1.0f - X0000019.a)) * (1.0f - X0000020.a);
                    break;
                case 13:
                    X0000018.r = X0000020.r < 0.5f ? (X0000018.r = (2.0f * X0000019.r) * X0000020.r + pow(X0000019.r,2.0f) * (1.0f - 2.0f * X0000020.r)) : sqrt(X0000019.r) * (2.0f * X0000020.r - 1.0f) + (2.0f * X0000019.r) * (1.0f - X0000020.r);
                    X0000018.g = X0000020.g < 0.5f ? (X0000018.g = (2.0f * X0000019.g) * X0000020.g + pow(X0000019.g,2.0f) * (1.0f - 2.0f * X0000020.g)) : sqrt(X0000019.g) * (2.0f * X0000020.g - 1.0f) + (2.0f * X0000019.g) * (1.0f - X0000020.g);
                    X0000018.b = X0000020.b < 0.5f ? (X0000018.b = (2.0f * X0000019.b) * X0000020.b + pow(X0000019.b,2.0f) * (1.0f - 2.0f * X0000020.b)) : sqrt(X0000019.b) * (2.0f * X0000020.b - 1.0f) + (2.0f * X0000019.b) * (1.0f - X0000020.b);
                    X0000018.a = X0000020.a < 0.5f ? (X0000018.a = (2.0f * X0000019.a) * X0000020.r + pow(X0000019.a,2.0f) * (1.0f - 2.0f * X0000020.a)) : sqrt(X0000019.a) * (2.0f * X0000020.a - 1.0f) + (2.0f * X0000019.a) * (1.0f - X0000020.a);
                    break;
                case 14:
                    X0000018.r = X0000020.r == 1.0f ? (X0000018.r = 1.0f) : X0000019.r / (1.0f - X0000020.r);
                    X0000018.g = X0000020.g == 1.0f ? (X0000018.g = 1.0f) : X0000019.g / (1.0f - X0000020.g);
                    X0000018.b = X0000020.b == 1.0f ? (X0000018.b = 1.0f) : X0000019.b / (1.0f - X0000020.b);
                    X0000018.a = X0000020.a == 1.0f ? (X0000018.a = 1.0f) : X0000019.a / (1.0f - X0000020.a);
                    break;
                case 15:
                    X0000018.r = X0000020.r == 0.0f ? (X0000018.r = 0.0f) : 1.0f - (1.0f - X0000019.r) / X0000020.r;
                    X0000018.g = X0000020.g == 0.0f ? (X0000018.g = 0.0f) : 1.0f - (1.0f - X0000019.g) / X0000020.g;
                    X0000018.b = X0000020.b == 0.0f ? (X0000018.b = 0.0f) : 1.0f - (1.0f - X0000019.b) / X0000020.b;
                    X0000018.a = X0000020.a == 0.0f ? (X0000018.a = 0.0f) : 1.0f - (1.0f - X0000019.a) / X0000020.a;
                    break;
                case 16:
                    X0000018.r = X0000020.r == 1.0f ? (X0000018.r = 1.0f) : pow(X0000019.r,2.0f) / (1.0f - X0000020.r);
                    X0000018.g = X0000020.g == 1.0f ? (X0000018.g = 1.0f) : pow(X0000019.g,2.0f) / (1.0f - X0000020.g);
                    X0000018.b = X0000020.b == 1.0f ? (X0000018.b = 1.0f) : pow(X0000019.b,2.0f) / (1.0f - X0000020.b);
                    X0000018.a = X0000020.a == 1.0f ? (X0000018.a = 1.0f) : pow(X0000019.a,2.0f) / (1.0f - X0000020.a);
                    break;
                case 17:
                    X0000018.r = X0000019.r == 1.0f ? (X0000018.r = 1.0f) : pow(X0000020.r,2.0f) / (1.0f - X0000019.r);
                    X0000018.g = X0000019.g == 1.0f ? (X0000018.g = 1.0f) : pow(X0000020.g,2.0f) / (1.0f - X0000019.g);
                    X0000018.b = X0000019.b == 1.0f ? (X0000018.b = 1.0f) : pow(X0000020.b,2.0f) / (1.0f - X0000019.b);
                    X0000018.a = X0000019.a == 1.0f ? (X0000018.a = 1.0f) : pow(X0000020.a,2.0f) / (1.0f - X0000019.a);
                    break;
                case 18:
                    X0000018 = (X0000019 + 2.0f * X0000020) - 1.0f;
                    break;
                case 19:
                    X0000018.r = X0000020.r == 0.0f ? (X0000018.r = 0.0f) : 1.0f - pow((1.0f - X0000019.r),2.0f) / X0000020.r;
                    X0000018.g = X0000020.g == 0.0f ? (X0000018.g = 0.0f) : 1.0f - pow((1.0f - X0000019.g),2.0f) / X0000020.g;
                    X0000018.b = X0000020.b == 0.0f ? (X0000018.b = 0.0f) : 1.0f - pow((1.0f - X0000019.b),2.0f) / X0000020.b;
                    X0000018.a = X0000020.a == 0.0f ? (X0000018.a = 0.0f) : 1.0f - pow((1.0f - X0000019.a),2.0f) / X0000020.a;
                    break;
                case 20:
                    X0000018.r = X0000019.r == 0.0f ? (X0000018.r = 0.0f) : 1.0f - pow((1.0f - X0000020.r),2.0f) / X0000019.r;
                    X0000018.g = X0000019.g == 0.0f ? (X0000018.g = 0.0f) : 1.0f - pow((1.0f - X0000020.g),2.0f) / X0000019.g;
                    X0000018.b = X0000019.b == 0.0f ? (X0000018.b = 0.0f) : 1.0f - pow((1.0f - X0000020.b),2.0f) / X0000019.b;
                    X0000018.a = X0000019.a == 0.0f ? (X0000018.a = 0.0f) : 1.0f - pow((1.0f - X0000020.a),2.0f) / X0000019.a;
                    break;
                }
                if(X0000022 != 1.0f) {
                    X0000018 = lerp(X0000019,X0000018,X0000022);
                }
            }
        }
        result = X0000018;
    }
};
