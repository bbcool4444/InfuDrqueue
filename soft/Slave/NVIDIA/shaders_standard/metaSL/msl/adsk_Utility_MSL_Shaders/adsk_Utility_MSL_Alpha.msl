/******************************************************************************
 * The following code was generated by the mental mill(R)                     *
 * code generator gen_msl, build 126420.5925.3501
 *                                                                            *
 * Portions Copyright (c) 1986-2010 mental images GmbH, Berlin, Germany.      *
 ******************************************************************************/

// Option settings:


shader adsk_Utility_MSL_Alpha_Extract {

output:

    float result;

input:

    Color the_color = float4(1.0f,1.0f,0.0f,1.0f);
    bool is_opacity = false;

member:


    void main()
    {
        result = the_color.a;
        if(is_opacity)
            result = 1.0f - the_color.a;
    }
};


shader adsk_Utility_MSL_Alpha_Inject {

output:

    Color result;

input:

    Color the_color = float4(1.0f,1.0f,0.0f,1.0f);
    float alpha = 1.0f;
    bool premult = false;

member:


    void main()
    {
        result = float4(.0f,.0f,.0f,.0f);
        if(premult) {
            result.r *= alpha;
            result.g *= alpha;
            result.b *= alpha;
        } else
            result = the_color;
        result.a = alpha;
    }
};


shader adsk_Utility_MSL_NodeVisibility {

output:

    float result;

input:

    Color input = float4(1.0f,1.0f,1.0f,1.0f);
    bool reverse = false
            {
                display_name("Mode");
            };
    float wireColorAlpha = 1.0f
            {
                description("Internal parameter to be hooked by translator to pass wireColor.a property thats actually holding object visibility");
                hard_range(0.0f,1.0f);
            };

member:


    void main()
    {
        result = 1.0f;
        if(!reverse)
            result = input.a * wireColorAlpha;
        else
            result = 1.0f - input.a * wireColorAlpha;
    }
};
