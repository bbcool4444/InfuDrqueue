/******************************************************************************
 * The following code was generated by the mental mill(R)                     *
 * code generator gen_msl, build 126420.5925.3501
 *                                                                            *
 * Portions Copyright (c) 1986-2010 mental images GmbH, Berlin, Germany.      *
 ******************************************************************************/

// Option settings:


shader adsk_Utility_MSL_Bitmap_Simple {

output:

    Color result;
    Color result_bump;

input:

    texture2D bitmap = "brickwall.dds";
    Shader coords;
    int uv_space = 0
            {
                literal();
            };
    float u_scale = 1.0f;
    float v_scale = 1.0f;
    float u_offset = 0.0f;
    float v_offset = 0.0f;
    float angle = 0.0f;
    float bump_amount;

member:


    float X0000000(in Color X0000001)
    {
        float X0000002 = ((X0000001.r + X0000001.g) + X0000001.b) * 0.333333333f;
        return X0000002;
    }

    void main()
    {
        result = float4(0.0f,0.0f,0.0f,0.0f);
        result_bump = float4(0.0f,0.0f,0.0f,0.0f);
        float2 X0000003 = float2(0.0f,0.0f);
        float2 X0000004 = (state::texture_coordinate[0]).xy;
        float2 X0000005 = float2(0.0f,0.0f);
        X0000005.x = X0000004.x * u_scale - u_offset;
        X0000005.y = X0000004.y * v_scale - v_offset;
        float X0000006 = sin(angle);
        float X0000007 = cos(angle);
        X0000003.x = X0000005.x * X0000007 - X0000005.y * X0000006;
        X0000003.y = X0000005.x * X0000006 - X0000005.y * X0000007;
        float2 X0000008 = float2(0.0f,0.0f);
        X0000008 = (abs(ddx((state::texture_coordinate[0])).xyz) + abs(ddy((state::texture_coordinate[0])).xyz)).xy;
        if(X0000008.x == 0.0f && X0000008.y == 0.0f)
            X0000008 = float2(0.002f,0.002f);
        X0000008.x *= u_scale;
        X0000008.y *= v_scale;
        if(X0000008.x < 0.0f)
            X0000008.x = -X0000008.x;
        if(X0000008.y < 0.0f)
            X0000008.y = -X0000008.y;
        X0000008.x = abs(X0000008.x * X0000007 - X0000008.y * X0000006);
        X0000008.y = abs(X0000008.x * X0000006 - X0000008.y * X0000007);
        bool X0000009 = true;
        float X0000010 = 0.012f / u_scale;
        Color X0000011 = float4(0.0f,0.0f,0.0f,0.0f);
        float X0000012 = 0.0f;
        float3 X0000013 = float3(0.0f,0.0f,0.0f);
        if(X0000009) {
            X0000011 = tex2d(bitmap,X0000003);
            X0000012 = ((X0000011.x + X0000011.y) + X0000011.z) / 3.0f;
            X0000012 = X0000012 * X0000010 - X0000010 * 0.5f;
            X0000013 = state::tangent_space[0] * state::direction;
            X0000003.x -= X0000013.x * X0000012;
            X0000003.y -= X0000013.y * X0000012;
        }
        result = tex2d(bitmap,X0000003);
        result_bump.rgb = state::normal.xyz;
        if(bump_amount != 0.0f) {
            float X0000014 = X0000003.x;
            float X0000015 = X0000003.y;
            float X0000016 = X0000000(result);
            float2 X0000017 = float2(X0000008.x,X0000008.y);
            float3 X0000018 = state::texture_tangent_u[0];
            float3 X0000019 = state::texture_tangent_v[0];
            float3 X0000020 = float3(0.0f,0.0f,0.0f);
            float3 X0000021 = float3(0.0f,0.0f,0.0f);
            X0000020.x = X0000014;
            X0000020.y = X0000015;
            X0000020.z = 0.0f;
            Color X0000022;
            if(X0000017.x > 0.0f) {
                X0000022 = tex2d(bitmap,float2(X0000014 + X0000017.x,X0000015));
                float X0000023 = X0000000(X0000022);
                X0000020.x = -(X0000023 - X0000016) / X0000017.x;
            } else
                X0000020.x = 0.0f;
            if(X0000017.y > 0.0f) {
                X0000022 = tex2d(bitmap,float2(X0000014,X0000015 + X0000017.y));
                float X0000024 = X0000000(X0000022);
                X0000020.y = -(X0000024 - X0000016) / X0000017.y;
            } else
                X0000020.y = 0.0f;
            X0000020.x *= 0.01f;
            X0000020.y *= 0.01f;
            X0000020.z *= 0.01f;
            float3 X0000025 = float3(0.0f,0.0f,0.0f);
            X0000025.x = X0000020.x * X0000018.x + X0000020.y * X0000019.x;
            X0000025.y = X0000020.x * X0000018.y + X0000020.y * X0000019.y;
            X0000025.z = X0000020.x * X0000018.z + X0000020.y * X0000019.z;
            X0000025 *= bump_amount;
            X0000025 += state::normal;
            X0000025 = normalize(X0000025);
            result_bump.rgb = X0000025.xyz;
        }
    }
};
