/******************************************************************************
 * Copyright 1986-2009 by mental images GmbH, Fasanenstr. 81, D-10623 Berlin,
 * Germany. All rights reserved.
 *****************************************************************************/

#define NOISE_DIM        20
#define NOISE_DIM_PLUS_1 21
#define FNOISE_DIM       20.0
#define NOISE_TABLE_DIM  9261 // (NOISE_DIM+1) ^ 3

shader hlsl_Wood_EvalNormal {
 input:
  Shader Map1;
  Shader Map1Normal; // additional input !!!
  Shader Map2;
  Shader Map2Normal; // additional input !!!
  Color Color1 = Color(0.79, 0.69, 0.27, 1.0) {
    display_name("Color #1");
  };
  Color Color2 = Color(0.51, 0.32, 0.05, 1.0) {
    display_name("Color #2");
  };
  const bool Map1Enabled = false {
    display_name("Map1 Enabled");
  };
  const bool Map2Enabled = false {
    display_name("Map2 Enabled");
  };
  float Thickness = 5.0 {
    display_name("Grain Thickness");
  }; 
  float RadialNoise = 0.5 {
    display_name("Radial Noise");
  }; 
  float AxialNoise = 0.5 {
    display_name("Axial Noise");
  }; 
  Shader Coords;
  // TODO: int GBufferID

  // textures
  Texture2d noise_tables = "dent_noise_out.dds" {
    disable_filtering();
    texture_coord_u("clamp");
    texture_coord_v("clamp");
  };

 output:
  Color result;

  // see max_support.cpp
  float maxIntensity(in Color c) {
    float f = (c.r + c.g + c.b) * 0.333333333;
    return f;
  } // maxIntensity

  // see tex_wood.cpp
  float maxWoodSmoothStep(in float x0,
			  in float x1,
			  in float v) {
    if (v <= x0) return 0.0;
    else if (v >= x1) return 1.0;
    else {
      float u = (v - x0) / (x1 - x0);
      return (u * u * (3.0 - 2.0 * u));
    }
  } // maxWoodSmoothStep

  // see tex_wood.cpp
  float maxWoodNoise(in float x) {
    float mx = fmod(x, FNOISE_DIM);
    if (mx < 0.0) mx += FNOISE_DIM;
    int ix = (int) mx;
    float fx = fmod(mx, 1.0);
    int index0 = ix;
    int index1 = (ix + 1);
    float x0 = (2.0 * float(index0) + 1.0) / (2.0 * 441.0);
    float y0 = (2.0 * float(0) + 1.0) / (2.0 * 21.0);
    float x1 = (2.0 * float(index1) + 1.0) / (2.0 * 441.0);
    float y1 = (2.0 * float(0) + 1.0) / (2.0 * 21.0);
    // n0 = noiseTable[ix][0][0];
    Color c =  
      Texture2D_sampler_color(noise_tables, 0.0, "none").lookup(float2(x0, y0));
    float n0 = c.r;
    // n1 = noiseTable[ix+1][0][0];
    c =  
      Texture2D_sampler_color(noise_tables, 0.0, "none").lookup(float2(x1, y1));
    float n1 = c.r;
    return ((n0 + fx * (n1 - n0)) / 32768.0);
  } // maxWoodNoise

  // see tex_wood.cpp
  float maxWoodFunc(// others
		    in float px,
		    in float py,
		    in float pz,
		    in float size) {
    float r = 0.0;
    float local_px = px / size;
    float local_py = py / size;
    float local_pz = pz / size;
    local_px += maxWoodNoise(local_px) * RadialNoise;
    local_py += maxWoodNoise(local_py) * RadialNoise;
    local_pz += maxWoodNoise(local_pz) * RadialNoise;
    r = sqrt(local_py * local_py + local_pz * local_pz);
    local_px /= 4.0;
    r += (maxWoodNoise(r) +
	  AxialNoise * maxWoodNoise(local_px));
    // be periodic
    r = fmod(r, 1.0);
    r = maxWoodSmoothStep(0.0, 0.8, r) - maxWoodSmoothStep(0.83, 1.0, r);
    return r;
  } // maxWoodFunc

  Color maxWood_EvalColor(in Color p,
			  // shader parameters
			  in bool useMap1, in Color Map1,
			  in bool useMap2, in Color Map2) {
    Color res = Color(0.0, 0.0, 0.0, 0.0);
    float size = (Thickness != 0.0) ? Thickness : 0.0001;
    float d = maxWoodFunc(// others
			  p.r, p.g, p.b, size);
    if (d < 0.0005) {
      // TODO if (paras_tex1Enabled && ...)
      return Color1;
    } // if (d < 0.0005)
    else if (d >= 0.9995) {
      // TODO: if (paras_tex2Enabled && ...)
      return Color2;
    } // else if (d >= 0.9995)
    Color c1 = Color1;
    if (useMap1) {
      c1 = Map1;
    } // if (useMap1)
    Color c2 = Color2;
    if (useMap2) {
      c2 = Map2;
    } // if (useMap2)
    res.r = (1.0 - d) * c1.r + d * c2.r;
    res.g = (1.0 - d) * c1.g + d * c2.g;
    res.b = (1.0 - d) * c1.b + d * c2.b;
    res.a = (1.0 - d) * c1.a + d * c2.a;
    return res;
  } // maxWood_EvalColor

  void main() {
    result = Color(0.0, 0.0, 0.0, 0.0);
    // xyz-coords
    float3 xyz_coords = transform_point("internal", "object", position);
    float3 xtra_dP = float3(0.0, 0.0, 0.0);
    float3 xtra_bumpDP_0 = float3(1.0, 0.0, 0.0);
    float3 xtra_bumpDP_1 = float3(0.0, 1.0, 0.0);
    float3 xtra_bumpDP_2 = float3(0.0, 0.0, 1.0);
    // try to call hlsl_base_UVGenerator
    Color shader_return = Color(0.0, 0.0, 0.0, 0.0);
    if (Coords.call("output", "result", shader_return,
		    "output", "xtra_dP", xtra_dP,
		    "output", "xtra_bumpDP_0", xtra_bumpDP_0,
		    "output", "xtra_bumpDP_1", xtra_bumpDP_1,
		    "output", "xtra_bumpDP_2", xtra_bumpDP_2)) {
      xyz_coords.xyz = shader_return.rgb;
    }
    else {
      xyz_coords *= 100.0;
    }
    // call other shader parameters
    Color Map1Color = Color(0.0, 0.0, 0.0, 0.0);
    Color Map1NormalColor = Color(0.0, 0.0, 0.0, 0.0);
    bool useMap1 = false;
    if (Map1Enabled &&
	Map1.call("output", "result", Map1Color) &&
	Map1Normal.call("output", "result", Map1NormalColor)) {
      useMap1 = true;
    }
    Color Map2Color = Color(0.0, 0.0, 0.0, 0.0);
    Color Map2NormalColor = Color(0.0, 0.0, 0.0, 0.0);
    bool useMap2 = false;
    if (Map2Enabled &&
	Map2.call("output", "result", Map2Color) &&
	Map2Normal.call("output", "result", Map2NormalColor)) {
      useMap2 = true;
    }
    // use xyz-coords
    float3 np = float3(0.0, 0.0, 0.0);
    float size = (Thickness != 0.0) ? Thickness : 0.0001;
    float d = maxWoodFunc(// others
			  xyz_coords.x, xyz_coords.y, xyz_coords.z, size);
    float del = 0.1;
    np.x = (maxWoodFunc(xyz_coords.x + del * xtra_bumpDP_0.x,
			xyz_coords.y + del * xtra_bumpDP_0.y,
			xyz_coords.z + del * xtra_bumpDP_0.z,
			size) - d) / del;
    np.y = (maxWoodFunc(xyz_coords.x + del * xtra_bumpDP_1.x,
			xyz_coords.y + del * xtra_bumpDP_1.y,
			xyz_coords.z + del * xtra_bumpDP_1.z,
			size) - d) / del;
    np.z = (maxWoodFunc(xyz_coords.x + del * xtra_bumpDP_2.x,
			xyz_coords.y + del * xtra_bumpDP_2.y,
			xyz_coords.z + del * xtra_bumpDP_2.z,
			size) - d) / del;
    float4x4 m = get_transform("object", "internal");
    float3 v = float3(0.0, 0.0, 0.0);
    float3 vn = float3(0.0, 0.0, 0.0);
    v = float3(m[0][0], m[1][0], m[2][0]);
    vn = normalize(v);
    m[0][0] = vn.x;
    m[1][0] = vn.y;
    m[2][0] = vn.z;
    v = float3(m[0][1], m[1][1], m[2][1]);
    vn = normalize(v);
    m[0][1] = vn.x;
    m[1][1] = vn.y;
    m[2][1] = vn.z;
    v = float3(m[0][2], m[1][2], m[2][2]);
    vn = normalize(v);
    m[0][2] = vn.x;
    m[1][2] = vn.y;
    m[2][2] = vn.z;
    float3x3 m2;
    m2[0] = m[0].xyz;
    m2[1] = m[1].xyz;
    m2[2] = m[2].xyz;
    np = m2 * np;
    if (useMap1 || useMap2) {
      float a = 0.0;
      float b = 0.0;
      float k = 0.0;
      float3 da = float3(0.0, 0.0, 0.0);
      float3 db = float3(0.0, 0.0, 0.0);
      Color res = maxWood_EvalColor(Color(xyz_coords.x, 
					  xyz_coords.y, 
					  xyz_coords.z, 
					  1.0),
				    // shader parameters
				    useMap1, Map1Color,
				    useMap2, Map2Color);
      k = maxIntensity(res);
      if (useMap1) {
	a = (Map1Color.r + Map1Color.g + Map1Color.b) / 3.0; // COLOR->MONO
	da.x = Map1NormalColor.r;
	da.y = Map1NormalColor.g;
	da.z = Map1NormalColor.b;
      } // if (useMap1)
      else {
	a = maxIntensity(Color1);
	da = float3(0.0, 0.0, 0.0);
      } // if (useMap1)
      if (useMap2) {
       	b = (Map2Color.r + Map2Color.g + Map2Color.b) / 3.0; // COLOR->MONO
	db.x = Map2NormalColor.r;
	db.y = Map2NormalColor.g;
	db.z = Map2NormalColor.b;
      } // if (useMap2)
      else {
	b = maxIntensity(Color2);
	db = float3(0.0, 0.0, 0.0);
      } // if (useMap2)
      np.x = (b - a) * np.x + d * (db.x - da.x) + da.x;
      np.y = (b - a) * np.y + d * (db.y - da.y) + da.y;
      np.z = (b - a) * np.z + d * (db.z - da.z) + da.z;
    } // if (useMap1 || useMap2)
    else {
      float a = maxIntensity(Color1);
      float b = maxIntensity(Color2);
      np.x = (b-a) * np.x;
      np.y = (b-a) * np.y;
      np.z = (b-a) * np.z ;
    } // else [ if (useMap1 || useMap2) ]
    result.rgb = np.xyz;
    result.a = 1.0;
  } // main
};
