/******************************************************************************
 * Copyright 1986-2010 by mental images GmbH, Fasanenstr. 81, D-10623 Berlin,
 * Germany. All rights reserved.
 *****************************************************************************/

// $Revision$

#import <mi_msl_shared.msl>

#define TRANSP_SUB		0
#define TRANSP_ADD		1
#define TRANSP_FILTER	2

#define HLSL
          // Max structs and macros
  
    
   struct mrIllumParams {
        Color ambIllumOut;
        Color diffIllumOut;
        Color specIllumOut;
        Color selfIllumOut;
        Color reflIllumOut;
        Color transIllumOut;         /* This is really for storing refraction*/
        Color realTransIllumOut;	 /* This is for storing the real transparency 
                                         (non-additive)*/
        Color additiveTransIllumOut; /* This is for storing additive transparency, 
                                     which is handled differently*/
        Color irradianceIllumOut;
        float diffIllumIntens;
        float finalOpac;
        float finalAttenuation;
        Color finalC;
        Color finalT;                /* This is the final transparency color of 
                                     all the layers composited together */
        Color localT;                /* This is the transparency color of the 
                                     current layer/material only */
    };


shader max_StandardStraussMaterial {
input:


    Color Parameters_Diffuse = Color(0.588235, 0.588235, 0.588235, 1.0){
    };
    float Parameters_Glossiness = 0.1{
    };
    float Parameters_Metalness = 0.0{
    };

    //from max_StandardMaterial
    const bool StdParameters_Wire = false{
    };
    const bool StdParameters_TwoSided = false{
    };
    const bool StdParameters_FaceMap = false{
    };
    const bool StdParameters_Faceted = false{
    };

    int StdExtendedParameters_OpacityType = 0{
    };
    float StdExtendedParameters_Opacity = 1.0{
    };
    Color StdExtendedParameters_FilterColor = Color(0.5){
    };
    Texture2d StdExtendedParameters_FilterMap = "default.dds"{
    };
    int StdExtendedParameters_OpacityFallOffType = 0{
    };
    float StdExtendedParameters_OpacityFallOff = 0{
    };
    float StdExtendedParameters_Ior = 1.5{
    };
    float StdExtendedParameters_WireSize = 1{
    };
    int StdExtendedParameters_WireUnits = 0{
    };
    const bool StdExtendedParameters_ApplyReflectionDimming = false{
    };
    float StdExtendedParameters_DimLevel = 0.0{
    };
    float StdExtendedParameters_ReflectionLevel = 3.0{
    };

    const bool StdMaps_On__0 = true;
    Shader     StdMaps_Map_0 = Shader();
    float      StdMaps_Amt_0 = 0.0;

    const bool StdMaps_On__1 = true;
    Shader     StdMaps_Map_1 = Shader();
    float      StdMaps_Amt_1 = 0.0;

    const bool StdMaps_On__2 = true;
    Shader     StdMaps_Map_2 = Shader();
    float      StdMaps_Amt_2 = 0.0;

    const bool StdMaps_On__3 = true;
    Shader     StdMaps_Map_3 = Shader();
    float      StdMaps_Amt_3 = 0.0;

    const bool StdMaps_On__4 = true;
    Shader     StdMaps_Map_4 = Shader();
    float      StdMaps_Amt_4 = 0.0;

    const bool StdMaps_On__5 = true;
    Shader     StdMaps_Map_5 = Shader();
    float      StdMaps_Amt_5 = 0.0;

    const bool StdMaps_On__6 = true;
    Shader     StdMaps_Map_6 = Shader();
    float      StdMaps_Amt_6 = 0.0;

    const bool StdMaps_On__7 = true;
    Shader     StdMaps_Map_7 = Shader();
    float      StdMaps_Amt_7 = 0.0;

    const bool    StdMaps_ADTextureLock = true{
    };


output:
    Color result;

#define SOFT_THRESH  0.15
#define SPEC_BOOST 1.3
/* Strauss's Magic Constants */
#define KF  1.12
#define KG  1.01

#define KF2  1.0 / (KF * KF)
#define KF3  1.0 / ((1.0 - KF) * (1.0 - KF))


#define KG2  1.0 / (KG * KG)
#define KG3  1.0 / ((1.0 - KG) * (1.0 - KG))
#define KJ  0.1 /*.1 strauss */

#define REFL_BRIGHTNESS_ADJUST 3.0f

#define LIMITMINMAX(x, min, max) if ((x) < (min)) (x) = (min); else if ((x) > (max)) (x) = (max);

#define ColorMax(c)   ((c.r > c.g) ? ((c.r > c.b) ? c.r : c.b) : \
                        ((c.g > c.b) ? c.g : c.b))
#define maxMAX3(a,b,c) ((a)>(b)?((a)>(c)?(a):(c)):((b)>(c)?(b):(c)))
#define maxMIN3(a,b,c) ((a)<(b)?((a)<(c)?(a):(c)):((b)<(c)?(b):(c)))

    // Evaluate a bump map. 
#define doBumps(enabled, amount, map) if (enabled) \
        { \
            Color bumpresult = Color(0); \
            map.call("input", "evalNormal", true, \
                     "output", "result", bumpresult)  ;\
            normal += float3(bumpresult.rgb) * amount; \
            normal = normalize(normal); \
        } 

// Evaulate a color map into the mapArray
#define doColorMap(enabled, map, res) if (enabled) \
        { \
            map.call("output", "result", res); \
        } 

// Check the mono output of the map, if any
#define doMonoMap(enabled, map, res) if (enabled) \
        { \
            float f; \
            if (map.call("output", "mono_result", f)) \
            { \
               res = Color(f,f,f,f); \
            } \
            else \
            { \
               map.call("output", "result", res); \
            } \
        } 

  // Evaulate a reflection map into the mapArray
#define doReflMap(enabled, map, res) if (enabled)	\
    {									\
      map.call(	 "output", "result", res);		\
    } 

  // Evaulate a refraction map into the mapArray
#define doRefrMap(enabled, map, res) if (enabled)	\
    {									\
      map.call(	 "output", "result", res);		\
    } 

  // Macros used to evaluate a given texture in the illumination shader

#define lerpColorMap(enabled, map, amount, variable, c) if (enabled)	\
    {\
      c *= amount;\
      variable = (variable * (1.0 - c.a)) + c;\
    }

#define lerpMonoMap(enabled, map, amount, variable, c) if (enabled)	\
    {\
      float a = amount;\
      variable = (variable * (1.0 - a)) + (c.r * a);\
    }

#define maxSoften(r)	((r) * ( 2.0f - (r)))

    float F( float x )
    { 
        float xb = clamp( x, 0.0, 1.0 );
        float xkf = 1.0 / ((xb - KF)*(xb - KF));
        return (xkf - KF2) / (KF3 - KF2);
    }

    float G( float x )
    { 
        float xb = clamp(x, 0.0, 1.0);
        float xkg = 1.0 / ((xb - KG)*(xb - KG));
        return (KG3 - xkg) / (KG3 - KG2);
    }

    float MaxChannelP( in Color a ) 
    { 
        float m = a.r; 
        if( a.g > m )m = a.g; 
        if( a.b > m ) m = a.b; 
        return m; 
    }
    float NormClrP( inout Color a ) 
    { 
      float m = MaxChannelP( a ); 
      if ( m != 0.0f ) 
      { 
          a /= m;
      }
      return m; 
    }


    /* does not use weight for r,g, b */
    float maxIntensity(Color c) 
    {	
        float f = (c.r + c.g + c.b)*0.333333333f;
        return f;
    }

    Color strauss_AffectReflection(in Color param_reflection,
                                   in Color param_diffuse,
                                   in float param_opacity,
                                   in float param_glossy,
                                   in float param_metal)
    {
        float rn = param_opacity - (1.0 - param_glossy*param_glossy*param_glossy)*param_opacity;
         /* the reflection of the reflection vector is just the view vector
            so dot(v, r) is 1, to any power is still 1
         */
        float a, b;
        float NV = dot(direction, normal);
        float3 R = direction - 2.0 * NV * normal;
        float NR = dot(normal, R);
        float fa, j, rj;
        Color white = Color(1.0);
        Color Cs;

        a = acos(NR) * 2.0/PI;
        b = acos(NR) * 2.0/PI;

        fa = F(a);
        j = fa * G(a)*G(b);
        rj = clamp(rn + (rn+KJ)*j, 0.0, 1.0);

        Cs = white + param_metal * (1.0 - fa) * (param_diffuse - white);
        param_reflection *= Cs * rj * REFL_BRIGHTNESS_ADJUST;
        return param_reflection;
    }

    Color max_transpColor(in int type, in float opac, in Color filt, in Color diff)
    {
        Color fc = Color(0);
        if(type == TRANSP_FILTER)
        {
            if(opac > 0.5)
            {
                /* darken as opac goes ( 0.5--> 1.0)
                  ** so that max component reaches 0.0f when opac reaches 1.0
                  ** find max component of filt
                  */
                float m = maxMAX3(filt.r, filt.g, filt.b);
                float d = 2.0 * (opac - 0.5) * m;
                fc = filt - d;
                fc = saturate(fc);
                fc.a = 0.0;
               
                
            }
            else
            {
                /* lighten as opac goes ( 0.5--> 0.0)
                 ** so that min component reaches 1.0f when opac reaches 1.0
                 ** find min component of filt
                 */
                float m = maxMIN3(filt.r, filt.g, filt.b);
                float d = (1.0 - 2.0 * opac) * (1.0 - m);
                fc = filt + d;
                fc = saturate(fc);
                fc.a = 0.0;
                

            }
        }
        return fc;

    }

   void max_ShadeReflection(inout mrIllumParams param_ip, 
                             in Color param_reflection, 
                             in float param_amount,
                             in Color param_diffuse,
                             in float param_opacity,
                             in float param_glossy,
                             in float param_metal)
    {

        //translucent_AffectReflection
        param_reflection = strauss_AffectReflection(param_reflection,
                                                    param_diffuse,
                                                    param_opacity,
                                                    param_glossy,
                                                    param_metal);
        param_ip.reflIllumOut = param_reflection * param_amount;
    }


    void max_ShadeTransmission(inout mrIllumParams param_ip, 
                               in Color param_refraction, 
                               in float param_amount,
                               in float param_opacity,
                               in int param_tr_type,
                               in Color param_filter,
                               in Color param_diffuse)
    {
        if(any(param_refraction))
        {
            float max, newOpac;
            Color transpColor;

            /* Set up attenuation opacity for Refraction map. dim diffuse &
                spec by this */
            param_ip.finalAttenuation = param_opacity * (1.0f - param_amount);

            /* Make more opaque when specular hilite occurs */
            max = ColorMax(param_ip.specIllumOut);
            if(max > 1.0)
                max = 1.0;
            newOpac = param_opacity + max - param_opacity * max;

            /* Evaluate refraction map, filtered by filter color */
            
            transpColor = max_transpColor(param_tr_type, newOpac, 
				          param_filter,  param_diffuse);
            param_ip.transIllumOut += param_refraction * transpColor;
            
            /* no transparency when doing refraction */
            param_ip.finalT = Color(0);

        }
        else
        {
            if(param_opacity != 1.0)
            {
                Color t_ray_col = Color(0);
                Color tCol = Color(0);

                param_ip.finalAttenuation = param_opacity;
                /* Make more opaque where specular hilite occurs, 
	                so you can still see the hilite */
	           
                param_diffuse = param_filter = 0.3 + 0.3 * param_diffuse;

                /* Compute the color of the transparent filter color */
	
	            tCol = max_transpColor( param_tr_type, param_opacity, 
				            param_filter, 
				            param_diffuse);
	            param_ip.localT = param_ip.finalT = param_diffuse;

//in viewport, we do not want the trace to happen but the integration to composite  based on alpha value
#ifndef HLSL                 //trace a transparent ray
                Trace_options to;
                to.set_ray_type("transparent");

                Ray ray = Ray(position, direction);
                Ray dx;
                Ray dy;
                trace(ray, dx, dy, to, "result", t_ray_col);
#endif
                switch(param_tr_type)
                {
                case TRANSP_ADD:
                    param_ip.additiveTransIllumOut.rgb = t_ray_col.rgb;
                    break;
                default:
                case TRANSP_SUB:
                case TRANSP_FILTER:
                    param_ip.realTransIllumOut.rgb = tCol.rgb * t_ray_col.rgb;
                    break;
                }//end switch
                param_ip.finalT *= (1.0 - t_ray_col.a);
            }
            else
            {
                param_ip.finalT = Color(0);
                param_ip.finalAttenuation = 1.0;
            }

        }
    }

    void strauss_CombineComponents ( inout mrIllumParams ip )
    { 
      float o = ip.finalAttenuation;
      ip.finalC = (o * ( ip.ambIllumOut  + 
			             ip.diffIllumOut + 
			             ip.irradianceIllumOut ) + 
		                 ip.specIllumOut + ip.reflIllumOut + 
		                 ip.transIllumOut + ip.realTransIllumOut + 
		                 ip.additiveTransIllumOut); 

    }

   
    float max_GetEffOpacity ( in float param_opacity_falloff, 
                              in int param_opacity_falloff_type,
                              in float param_opacity)
    {
      if (( param_opacity != 1.0f ) || ( param_opacity_falloff != 0.0f )) 
      {
          if ( param_opacity_falloff != 0.0f) 
	      {
              float d = abs (dot(normal, direction));
	          if( param_opacity_falloff_type == 1 ) 
	                d = 1.0f-d;
	          return param_opacity * (1.0f - param_opacity_falloff * d);
	      }
          else
          {
	          return param_opacity;
          }
      }
      else
      {
          return 1.0f;
      }
    }

    Color compute_bumped_irradiance(in float3 param_orig_normal, 
                in float param_bump_scale)
    {
        Color res;
        Irradiance_options io;
        res = irradiance(io);
        res /= PI;

        return res;
    }

    // The original code has complicated remapping tables, but for
        // efficiency these are hardcoded for the MetaSL conversion,
        // since they never change. Here is the texture map order for:
        //    Strauss
        //      0 = Color
        //      1 = Glossiness
        //      2 = Metalness
        //      3 = opacity
        //      4 = filter color
        //      5 = bump
        //      6 = Reflection
        //      7 = refraction
        //      8 = displacement
    void main()
    {

        result = Color(0);
        Color map_color = Color(0);

       // Faceted? 
        if (StdParameters_Faceted)
            normal = geometry_normal;     
        

        
        // Optimized code destilling the "essence" from
        // max_base_BlinnIllumination() function with the callback
        // functions unrolled and map channel remappings resolved

        Color	diffuse		= Parameters_Diffuse;
        float	glossiness	= Parameters_Glossiness;
        float   metalness   = Parameters_Metalness;
        float   filter      = StdExtendedParameters_Opacity;
        Color white = Color(1);


        diffuse = clamp(diffuse, 0.0, 1.0);
        glossiness = clamp(glossiness, 0.0, 1.0);
        metalness = clamp(metalness, 0.0, 1.0);
        Color refl_color = Color(0);
        Color filter_color = StdExtendedParameters_FilterColor;

        float3 orig_normal = normal;
        doBumps(StdMaps_On__5, StdMaps_Amt_5, StdMaps_Map_5);

        Color irradiance = compute_bumped_irradiance(orig_normal, 1.0);

        doColorMap (StdMaps_On__0, StdMaps_Map_0, map_color); 
        LIMITMINMAX ( map_color.a, 0.0f, 1.0f );
        lerpColorMap(StdMaps_On__0, StdMaps_Map_0, StdMaps_Amt_0, diffuse, map_color);
        doMonoMap (StdMaps_On__1, StdMaps_Map_1, map_color); 
        lerpMonoMap(StdMaps_On__1, StdMaps_Map_1, StdMaps_Amt_1, glossiness, map_color);
        doMonoMap (StdMaps_On__2, StdMaps_Map_2, map_color);
        lerpMonoMap(StdMaps_On__2, StdMaps_Map_2, StdMaps_Amt_2, metalness, map_color);

        doColorMap (StdMaps_On__4, StdMaps_Map_4, map_color);
        lerpColorMap(StdMaps_On__4, StdMaps_Map_4, StdMaps_Amt_4, filter_color, map_color);

         doReflMap(StdMaps_On__6, StdMaps_Map_6, refl_color);
        

       float g3 = glossiness*glossiness*glossiness;

        float rd;
        if(any(refl_color) && StdMaps_Amt_6 != 0.0)
        {
            rd = (1.0 - g3) * filter;
        }
        else
        {
            rd = (1.0 - metalness * g3)*filter;
        }

        float rn = filter - (1.0 - g3)*filter;
        float h;
        if(glossiness == 1.0)
        {
            h = 600.0;
        }
        else
        {
            h = 3.0/(1.0 - glossiness);
        }

        float d = 1.0 - metalness * glossiness;


        mrIllumParams ip = mrIllumParams(Color(0),
                                         Color(0),
                                         Color(0),
                                         Color(0),
                                         Color(0),
                                         Color(0),
                                         Color(0),
                                         Color(0),
                                         Color(0),
                                         0,
                                         0,
                                         0,
                                         Color(0),
                                         Color(0),
                                         Color(0));
       
        
        ip.irradianceIllumOut = irradiance * diffuse; 

        float3 vdir = direction;


         // The light loop: enumerate lights (see maxBlinn2_IllumAccumulator)
        Color lcolor;
        Light_iterator light;
        foreach (light)
        {
            lcolor = light.contribution/PI;
            bool ambient_only = false;
            float diff_amt = 1.0, spec_amt = 1.0, diffuseCoef = -1;
            // Is this an "ambient" light?
            light.get_light_parameter("ambient_only",    ambient_only);
            // Are specular on or off?
            light.get_light_parameter("affect_diffuse",  diff_amt);
            light.get_light_parameter("affect_specular", spec_amt);
            // Diffuse Coefficient (== custom dot_nl)
            light.get_light_parameter("diffuseCoef",     diffuseCoef);

            if (false == ambient_only)
            {
            

                // Supports the 3ds Max "diffuseCoefficient" return allowing a light
                // shader to return a custom "dot_nl" value other than the actual dot_nl
                if (diffuseCoef < 0) 
                    diffuseCoef = light.dot_nl;


                // If the (possibly adjusted above) dot_nl < 0, do nuttin'
                if (diffuseCoef >= 0) 
                {
                    // Diffuse
                    if (diff_amt > 0)
                    {
                        ip.diffIllumOut += lcolor * diffuseCoef * diff_amt * d * rd;
                    }

                    if (spec_amt > 0)
                    {
                        float3 R;
                        float RV;
                        float s;
                        float a, b;
                        float fa;
                        float j;
                        float rj;
                        Color Cl;
                        float I;
                        Color Cs;
                       

                        /* strauss uses the reflected LIGHT vector */
                        R = light.direction - 2.0*light.dot_nl * normal;
                        R = normalize(R);

                        RV = -dot(R, vdir);

                        if(RV < 0.0)
                        {
                            if(light.dot_nl < SOFT_THRESH)
                                RV *= maxSoften( light.dot_nl / SOFT_THRESH );
                            s = SPEC_BOOST * pow(-RV, h);

                            a = acos(light.dot_nl)/(0.5*PI);
                            b = acos(-dot(normal, vdir))/(0.5*PI);

                            fa = F(a);
                            j = fa * G(a) * G(b);
                            if(rn > 0.0)
                            {
                                rj = clamp(rn + (rn+KJ)*j, 0.0, 1.0);
                            }
                            else
                            {
                                rj = rn;
                            }
                            Cl = lcolor;
                            I = NormClrP(Cl);
                            Cs = Cl + metalness * (1.0 - fa) * (diffuse - Cl);

                            ip.specIllumOut += s * rj * I * Cs;
                        }
                    }
                }
            }
            else
            {
                ip.ambIllumOut += lcolor;
            }
        }

        
        ip.ambIllumOut  *= 0.5 * rd * diffuse;
        ip.diffIllumIntens = maxIntensity(ip.diffIllumOut);
        ip.diffIllumOut *= diffuse;

        // ShadeReflection callback evaluates to max_ShadeReflection
        // And our reflection map (already evaluated) is 9
         max_ShadeReflection(ip, 
                            refl_color, 
                            StdMaps_Amt_6,
                            diffuse,
                            filter,
                            glossiness,
                            metalness
                            );

        // ShadeTransmission callback evaluates to max_ShadeTransmission
        // And our refraction map (already evaluated) is 10
		map_color = Color(0);
         doRefrMap(StdMaps_On__7, StdMaps_Map_7, map_color);
         max_ShadeTransmission(ip, 
                              map_color, 
                              StdMaps_Amt_7,
                              filter,
                              StdExtendedParameters_OpacityType,
                              diffuse,
                              diffuse);

         // combineComponents callback evaluates to max_CombineComponentsAdd
        strauss_CombineComponents(ip);

        // Return final color
        result.rgb = ip.finalC.rgb;
        result.a = 1.0 - maxIntensity(ip.finalT);
    }
};
