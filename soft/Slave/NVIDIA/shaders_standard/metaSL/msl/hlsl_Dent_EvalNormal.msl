/******************************************************************************
 * Copyright 1986-2009 by mental images GmbH, Fasanenstr. 81, D-10623 Berlin,
 * Germany. All rights reserved.
 *****************************************************************************/

// see tex_dent.cpp
#define DENTSIZE         50.0
#define NOISE_DIM_PLUS_1 21
#define FNOISE_DIM       20.0

shader hlsl_Dent_EvalNormal {
 input:
  Shader Map1;
  Shader Map1Normal; // additional input !!!
  Shader Map2;
  Shader Map2Normal; // additional input !!!
  Color Color1 = Color(0.0, 0.0, 0.0, 1.0) {
    display_name("Color #1");
  };
  Color Color2 = Color(1.0, 1.0, 1.0, 1.0) {
    display_name("Color #2");
  };
  const bool Map1Enabled = false {
    display_name("Map1 Enabled");
  };
  const bool Map2Enabled = false {
    display_name("Map2 Enabled");
  };
  float Size = 200.0 {
    display_name("Size");
    hard_range(0.0, 1000.0);
  };
  float Strength = 20.0 {
    display_name("Strength");
    hard_range(0.0, 1000.0);
  };
  const int Iterations = 2 {
    display_name("Iterations");
    hard_range(2, 5);
  };
  Shader Coords;
  // TODO: int GBufferID

  // textures
  Texture2d noise_table = "dent_noise_out.dds" {
    disable_filtering();
    texture_coord_u("clamp");
    texture_coord_v("clamp");
  };

 output:
  Color result;

  // see max_support.cpp
  float maxIntensity(in Color c) {
    float f = (c.r + c.g + c.b) * 0.333333333;
    return f;
  } // maxIntensity

  // see tex_dent.cpp
  float maxDentNoise(in float x,
		     in float y,
		     in float z) {
    float mx = fmod(x, FNOISE_DIM);
    if (mx < 0.0) mx += FNOISE_DIM;
    float my = fmod(y, FNOISE_DIM);
    if (my < 0.0) my += FNOISE_DIM;
    float mz = fmod(z, FNOISE_DIM);
    if (mz < 0.0) mz += FNOISE_DIM;
    int ix = (int) mx;
    int iy = (int) my;
    int iz = (int) mz;
    float fx = fmod(mx, 1.0);
    float fy = fmod(my, 1.0);
    float fz = fmod(mz, 1.0);
    int index = 0;
    float tx = 0.0;
    float ty = 0.0;
    float n = 0.0;
    // n = noiseTable[ix][iy][iz];
    index = iy * NOISE_DIM_PLUS_1 + ix;
    tx = (2.0 * float(index) + 1.0) / (2.0 * 441.0);
    ty = (2.0 * float(iz) + 1.0) / (2.0 * 21.0);
    Color c =  
      Texture2D_sampler_color(noise_table, 0.0, "none").lookup(float2(tx, ty));
    n = c.r;
    // n00 = n + fx*(noiseTable[ix+1][iy][iz]-n);
    index = iy * NOISE_DIM_PLUS_1 + (ix + 1);
    tx = (2.0 * float(index) + 1.0) / (2.0 * 441.0);
    ty = (2.0 * float(iz) + 1.0) / (2.0 * 21.0);
    c =  
      Texture2D_sampler_color(noise_table, 0.0, "none").lookup(float2(tx, ty));
    float n00 = n + fx * (c.r - n);
    // n = noiseTable[ix][iy][iz+1];
    index = iy * NOISE_DIM_PLUS_1 + ix;
    tx = (2.0 * float(index) + 1.0) / (2.0 * 441.0);
    ty = (2.0 * float(iz + 1) + 1.0) / (2.0 * 21.0);
    c =  
      Texture2D_sampler_color(noise_table, 0.0, "none").lookup(float2(tx, ty));
    n = c.r;
    // n01 = n + fx*(noiseTable[ix+1][iy][iz+1]-n);
    index = iy * NOISE_DIM_PLUS_1 + (ix + 1);
    tx = (2.0 * float(index) + 1.0) / (2.0 * 441.0);
    ty = (2.0 * float(iz + 1) + 1.0) / (2.0 * 21.0);
    c =  
      Texture2D_sampler_color(noise_table, 0.0, "none").lookup(float2(tx, ty));
    float n01 = n + fx * (c.r - n);
    // n = noiseTable[ix][iy+1][iz];
    index = (iy + 1) * NOISE_DIM_PLUS_1 + ix;
    tx = (2.0 * float(index) + 1.0) / (2.0 * 441.0);
    ty = (2.0 * float(iz) + 1.0) / (2.0 * 21.0);
    c =  
      Texture2D_sampler_color(noise_table, 0.0, "none").lookup(float2(tx, ty));
    n = c.r;
    // n10 = n + fx*(noiseTable[ix+1][iy+1][iz]-n);
    index = (iy + 1) * NOISE_DIM_PLUS_1 + (ix + 1);
    tx = (2.0 * float(index) + 1.0) / (2.0 * 441.0);
    ty = (2.0 * float(iz) + 1.0) / (2.0 * 21.0);
    c =  
      Texture2D_sampler_color(noise_table, 0.0, "none").lookup(float2(tx, ty));
    float n10 = n + fx * (c.r - n);
    // n = noiseTable[ix][iy+1][iz+1];
    index = (iy + 1) * NOISE_DIM_PLUS_1 + ix;
    tx = (2.0 * float(index) + 1.0) / (2.0 * 441.0);
    ty = (2.0 * float(iz+1) + 1.0) / (2.0 * 21.0);
    c =  
      Texture2D_sampler_color(noise_table, 0.0, "none").lookup(float2(tx, ty));
    n = c.r;
    // n11 = n + fx*(noiseTable[ix+1][iy+1][iz+1]-n);
    index = (iy + 1) * NOISE_DIM_PLUS_1 + (ix + 1);
    tx = (2.0 * float(index) + 1.0) / (2.0 * 441.0);
    ty = (2.0 * float(iz+1) + 1.0) / (2.0 * 21.0);
    c =  
      Texture2D_sampler_color(noise_table, 0.0, "none").lookup(float2(tx, ty));
    float n11 = n + fx * (c.r - n);
    float n0 = n00 + fy * (n10 - n00);
    float n1 = n01 + fy * (n11 - n01);
    return (n0 + fz * (n1 - n0)) / 32768.0;
  } // maxDentNoise

  // see tex_dent.cpp
  float maxDentFunc(in float px, in float py, in float pz) {
    int i = 0;
    float s = 1.0;
    float mag = 0.0;
    for (i = 0; i < Iterations; i++) {
      mag += abs(0.5 - maxDentNoise(px, py, pz)) / s;
      s *= 2.0;
      px *= 2.0;
      py *= 2.0;
      pz *= 2.0;
    } // for (i = 0; i < Iterations; i++)
    return mag * mag * mag * Strength;
  } // maxDentFunc

  void main() {
    result = Color(0.0, 0.0, 0.0, 0.0);
    // xyz-coords
    float3 xyz_coords = transform_point("internal", "object", position);
    float3 xtra_dP = float3(0.0, 0.0, 0.0);
    float3 xtra_bumpDP_0 = float3(1.0, 0.0, 0.0);
    float3 xtra_bumpDP_1 = float3(0.0, 1.0, 0.0);
    float3 xtra_bumpDP_2 = float3(0.0, 0.0, 1.0);
    // try to call hlsl_base_UVGenerator
    Color shader_return = Color(0.0, 0.0, 0.0, 0.0);
    if (Coords.call("output", "result", shader_return,
		    "output", "xtra_dP", xtra_dP,
		    "output", "xtra_bumpDP_0", xtra_bumpDP_0,
		    "output", "xtra_bumpDP_1", xtra_bumpDP_1,
		    "output", "xtra_bumpDP_2", xtra_bumpDP_2)) {
      xyz_coords.xyz = shader_return.rgb;
    }
    else {
      xyz_coords *= 100.0;
    }
    // call other shader parameters
    Color Map1Color = Color(0.0, 0.0, 0.0, 0.0);
    Color Map1NormalColor = Color(0.0, 0.0, 0.0, 0.0);
    bool useMap1 = false;
    if (Map1Enabled &&
	Map1.call("output", "result", Map1Color) &&
	Map1Normal.call("output", "result", Map1NormalColor)) {
      useMap1 = true;
    }
    Color Map2Color = Color(0.0, 0.0, 0.0, 0.0);
    Color Map2NormalColor = Color(0.0, 0.0, 0.0, 0.0);
    bool useMap2 = false;
    if (Map2Enabled &&
	Map2.call("output", "result", Map2Color) &&
	Map2Normal.call("output", "result", Map2NormalColor)) {
      useMap2 = true;
    }
    // use xyz-coords
    float3 np = float3(0.0, 0.0, 0.0);
    float size = (Size != 0.0) ? Size : 0.0001;
    xyz_coords.x *= DENTSIZE / size;
    xyz_coords.y *= DENTSIZE / size;
    xyz_coords.z *= DENTSIZE / size;
    float d = maxDentFunc(xyz_coords.x, xyz_coords.y, xyz_coords.z);
    float del = 0.1;
    np.x = ((maxDentFunc(xyz_coords.x + del * xtra_bumpDP_0.x,
			 xyz_coords.y + del * xtra_bumpDP_0.y,
			 xyz_coords.z + del * xtra_bumpDP_0.z) - d) / del);
    np.y = ((maxDentFunc(xyz_coords.x + del * xtra_bumpDP_1.x,
			 xyz_coords.y + del * xtra_bumpDP_1.y,
			 xyz_coords.z + del * xtra_bumpDP_1.z) - d) / del);
    np.z = ((maxDentFunc(xyz_coords.x + del * xtra_bumpDP_2.x,
			 xyz_coords.y + del * xtra_bumpDP_2.y,
			 xyz_coords.z + del * xtra_bumpDP_2.z) - d) / del);
    // miMatrix  *tm;
    // mi_query (miQ_TRANS_OBJECT_TO_INTERNAL, state, miNULLTAG, &tm);
    float4x4 m = get_transform("object", "internal");
    // mi_matrix_copy (m, *tm);
    float3 v = float3(0.0, 0.0, 0.0);
    float3 vn = float3(0.0, 0.0, 0.0);
    // mi_vector_normalize ((miVector *)&(m)[0]);
    v = float3(m[0][0], m[1][0], m[2][0]);
    vn = normalize(v);
    m[0][0] = vn.x;
    m[1][0] = vn.y;
    m[2][0] = vn.z;
    // mi_vector_normalize ((miVector *)&(m)[4]);
    v = float3(m[0][1], m[1][1], m[2][1]);
    vn = normalize(v);
    m[0][1] = vn.x;
    m[1][1] = vn.y;
    m[2][1] = vn.z;
    // mi_vector_normalize ((miVector *)&(m)[8]);
    v = float3(m[0][2], m[1][2], m[2][2]);
    vn = normalize(v);
    m[0][2] = vn.x;
    m[1][2] = vn.y;
    m[2][2] = vn.z;
    float3x3 m2;
    m2[0] = m[0].xyz;
    m2[1] = m[1].xyz;
    m2[2] = m[2].xyz;
    // mi_vector_transform (&np, &np, m);
    np = m2 * np;
    if (useMap1 || useMap2) {
      // d((1-k)*a + k*b ) = dk*(b-a) + k*(db-da) + da
      float a = 0.0;
      float b = 0.0;
      float deltaAB = 0.0;
      float3 da = float3(0.0, 0.0, 0.0);
      float3 db = float3(0.0, 0.0, 0.0);
      if (useMap1) {
	a = (Map1Color.r + Map1Color.g + Map1Color.b) / 3.0; // COLOR->MONO
	da.x = Map1NormalColor.r;
	da.y = Map1NormalColor.g;
	da.z = Map1NormalColor.b;
      } // if (useMap1)
      else {
	a = maxIntensity(Color1);
	da = float3(0.0, 0.0, 0.0);
      } // else [ if (useMap1) ]
      if (useMap2) {
	b = (Map2Color.r + Map2Color.g + Map2Color.b) / 3.0; // COLOR->MONO
	db.x = Map2NormalColor.r;
	db.y = Map2NormalColor.g;
	db.z = Map2NormalColor.b;
      } // if (useMap2)
      else {
	b = maxIntensity(Color2);
	db = float3(0.0, 0.0, 0.0);
      } // else [ if (useMap2) ]
      deltaAB = b - a;
      np.x = deltaAB * np.x + d * (db.x - da.x) + da.x;
      np.y = deltaAB * np.y + d * (db.y - da.y) + da.y;
      np.z = deltaAB * np.z + d * (db.z - da.z) + da.z;
    } // if (useMap1 || useMap2)
    else {
      float delta = (maxIntensity(Color2) - maxIntensity(Color1));
      np.x *= delta;
      np.y *= delta;
      np.z *= delta;
    } // else [ if (useMap1 || useMap2) ]
    result.rgb = np.xyz;
    result.a = 1.0;
  } // main
};
