/******************************************************************************
 * Copyright 1986-2011 by mental images GmbH, Fasanenstr. 81, D-10623 Berlin,
 * Germany. All rights reserved.
 *****************************************************************************/

shader Texture_lookup_1d
{
  input:
	Texture1d texture = "default_1d.dds"
	{
		display_name("Texture");
		description( "The texture from which colors will be sampled." );
	};
	int texture_space = 0 
	{
		display_name("Texture Space");
		literal();
		description( "Texture coordinates to use when sampling the "
					 "input texture." );
		hard_range(0, 3);
	};
	float texture_u = texture_coordinate[texture_space].x
	{
		display_name("Texture U");
		description("If connected, the shader will read the texture coordinates "
					"from this input");
	};
	
  output:
	Color result;

	void main()
	{
		result = tex1D(texture, texture_u);
	}
};

shader Texture_lookup_2d
{
  input:
	Texture2d texture = "default.dds"
	{
		display_name("Texture");
		description( "The texture from which colors will be sampled." );
	};
	int texture_space = 0 
	{ 
		display_name("Texture Space");
		literal(); 
		description( "Texture coordinates to use when sampling the "
					 "input texture." );		
		hard_range(0, 3);
	};
	float2 texture_uv = float2(texture_coordinate[texture_space].x,
							texture_coordinate[texture_space].y)
	{
		display_name("Custom UV Input");
		description("When this parameter is connected, the shader will read "
					"the UV values from there. No effect when not connected.");
	};

  output:
	Color result;
	
	void main()
	{	
		result = tex2D(texture, texture_uv);
	}
};

shader Texture_lookup_2d_alpha
{
	input:
	    Texture2d texture = "default.dds"
	    {
			description( "The texture from which colors will be sampled." );
	    };    
	    int texture_space = 0 
	    { 
			literal(); 
			description( "Texture coordinates to use when sampling the "
			             "input texture." );		
			hard_range(0, 3);
	    };
	    float2 texture_uv = float2(texture_coordinate[texture_space].x,
				       texture_coordinate[texture_space].y)
		{
		display_name("Custom UV Input");
		description("When this parameter is connected, the shader will read "
					"the UV values from there. No effect when not connected.");
		};

	output:
		Color result;
		float alpha;
		
	void main()
	{
		result = tex2D(texture, texture_uv);
		alpha = result.a;
		result.a = 1.0;
	}
};


shader Texture_lookup_3d
{
  input:
	Texture3d texture = "default.dds"
	{
		display_name("Texture");
		description( "The exture from which colors will be sampled." );
	};
	int texture_space = 0
	{
		display_name("Texture Space");
		literal(); 
		description( "Texture coordinates to use when sampling the "
					 "input texture." );
		hard_range(0, 3);
	};
	float3 texture_uvw = float3(texture_coordinate[texture_space].x,
					texture_coordinate[texture_space].y,
					texture_coordinate[texture_space].z)
	{
		display_name("Custom UVW Input");
		description("When this parameter is connected, the shader will read "
					"the UVW values from there. No effect when not connected.");
	};
	
  output:
	Color result;
	
	void main()
	{	
		result = tex3D(texture, texture_uvw);
	}
};

shader Texture_lookup_cube
{
  input:
	Texture_cube texture = "default_reflection.dds"
	{
		display_name("Cube Map Texture");
		description( "The texture from which colors will be sampled." );
	};
	int texture_space = 0 
	{
		display_name("Texture Space");
		literal(); 
		description( "Texture coordinates to use when sampling the "
					 "input texture." );
		hard_range(0, 3);
	};
	float3 texture_uvw = float3(texture_coordinate[texture_space].x,
					texture_coordinate[texture_space].y,
					texture_coordinate[texture_space].z)
	{
		display_name("Custom UVW Input");
		description("When this parameter is connected, the shader will read "
					"the UVW values from there. No effect when not connected.");
	};

  output:
	Color result;

	void main()
	{	
		result = texCUBE(texture, texture_uvw);
	}
};
