/******************************************************************************
 * Copyright 1986-2010 by mental images GmbH, Fasanenstr. 81, D-10623 Berlin,
 * Germany. All rights reserved.
 *****************************************************************************/

shader hlsl_Bitmap_EvalNormal {
 input:
  float ClipU = 0.0 {
    display_name("U");
    hard_range(0.0, 1.0);
  };
  float ClipV = 0.0 {
    display_name("V");
    hard_range(0.0, 1.0);
  };
  float ClipW = 1.0 {
    display_name("W");
    hard_range(0.0, 1.0);
  };
  float ClipH = 1.0 {
    display_name("H");
    hard_range(0.0, 1.0);
  };
  // because maxJitter(...) uses maxNTsrand(...) based on parameter
  // values we can't bake the noise into textures !!!
  // TODO: float Jitter
  // TODO: bool UseJitter
  const bool Apply = false {
    display_name("Apply crop?");
  };
  const bool CropPlace = false {
    display_name("Crop (or place)?");
  };
  // TODO: int Filtering
  // TODO: int MonoOutput
  // TODO: int RGBOutput
  // TODO: int AlphaSource
  // TODO: bool PreMultAlpha
  Texture2d Bitmap = "brickwall.dds";
  Shader Coords;
  Shader Output;
  // TODO: struct "time parameters"
  // TODO: struct "ExtraParameters"

 output:
  Color result;

  // see max_support.cpp
  float maxIntensity(in Color c) {
    float f = (c.r + c.g + c.b) * 0.333333333;
    return f;
  } // maxIntensity

  // see max_support.h
  float maxFLOOR(in float x) {
    if (x < 0.0) return ((int) x - 1.0);
    else return (int) x;
  } // maxFLOOR

  // see max_support.h
  float maxFRAC(in float x) {
    return x - maxFLOOR(x);
  } // maxFRAC

  // see tex_bitmap.cpp
  bool maxPlaceUVFilter(inout float u, inout float v) {
    float ufac = ClipW;
    float vfac = ClipH;
    // avoid division by zero: make sure we don't have zero
    if((ufac != 0) && (vfac != 0)) {
      float u0 = ClipU;
      float u1 = ClipU + ufac;
      // note: v is the inverse from the 3dsmax implementation
      float v0 = 1.0 - (ClipV + vfac);
      float v1 = 1.0 - ClipV;
      if (u < u0 || v < v0 || u > u1 || v > v1) return false;
      u = (u - u0) / ufac;
      v = (v - v0) / vfac;
      return true;
    } // if((ufac != 0) && (vfac != 0))
    else {
      return false;
    } // else [ if((ufac != 0) && (vfac != 0)) ]
  } // maxPlaceUVFilter

  // see tex_bitmap.cpp
  Color maxBitmapSampleFilter(// sampler
      in float2 duv,
      // others
      in float u, in float v) {
          Color local_result = Color(0.0, 0.0, 0.0, 0.0);
          float2 uv = float2(0.0, 0.0);
          float fu = maxFRAC(u);
          float fv = maxFRAC(v);
          if (Apply) {
              if (CropPlace != 0) {
                  if (!maxPlaceUVFilter(// inout
                      fu, fv)) {
                          // transpBlack
                          return Color(0.0, 0.0, 0.0, 0.0);
                  }
                  uv.x = fu;
                  uv.y = fv;
              } // if (CropPlace)
              else {
                  uv.x = maxFRAC(ClipU + fu * ClipW);
                  uv.y = maxFRAC(1.0 - ClipV - ClipH + fv * ClipH);
              } // else [ if (CropPlace) ]
			  duv*=float2(ClipW,ClipH);

          } // if (Apply)
          else {
              uv.x = fu;
              uv.y = fv;
          } // else [ if (Apply) ]
          local_result =  
              Texture2D_sampler_color(Bitmap, 1., "default").lookup(uv,duv/4.,duv/4.);
          local_result.a = 1.0;
          return local_result;
  } // maxBitmapSampleFilter

  void main() {
    result = Color(0.0, 0.0, 0.0, 0.0);
    // uv-coords
    float u = texture_coordinate[0].x;
    float v = texture_coordinate[0].y;
    float2 duv = float2(0.0, 0.0);
    float3 dPdu = float3(0.0, 0.0, 0.0);
    float3 dPdv = float3(0.0, 0.0, 0.0);
    // try to call hlsl_base_UVGenerator
	
    Color shader_return = Color(0.0, 0.0, 0.0, 0.0);
    if (Coords.call("output", "result", shader_return,
		    "output", "duv", duv,
		    "output", "dPdu", dPdu,
		    "output", "dPdv", dPdv)) {
      u = shader_return.r;
      v = shader_return.g;
    }
    else {
      duv = (abs(ddx(texture_coordinate[0]).xyz) +
	     abs(ddy(texture_coordinate[0]).xyz)).xy;
      if(duv.x == 0.0 && duv.y == 0.0) {
	duv = float2(0.002, 0.002);
      }
      dPdu = texture_tangent [0];
      dPdv = texture_binormal[0];
    }
    // use uv-coords
    float3 dM = float3(0.0, 0.0, 0.0);
    float3 res = float3(0.0, 0.0, 0.0);
    dM.x = u;
    dM.y = v;
    dM.z = 0.0;
    // TODO: Shouldn't be here, but is a safeguard against zero derivs...
    if (duv.x <=0.0001) duv.x = 0.001;
    if (duv.y <=0.0001) duv.y = 0.001;
    Color tempcol = maxBitmapSampleFilter(duv, u, v);
    float m0 = maxIntensity(tempcol);
    if (duv.x > 0.0) {
      tempcol = maxBitmapSampleFilter(duv, u + duv.x, v);
      float m1 = maxIntensity(tempcol);
      dM.x = -(m1-m0)/duv.x;  
    }
    else {
      dM.x = 0.0;
    }
    if (duv.y > 0.0) {
      tempcol = maxBitmapSampleFilter(duv, u, v + duv.y);
      float m2 = maxIntensity(tempcol);
      dM.y = -(m2-m0)/duv.y;
    }
    else {
      dM.y = 0.0;
    }
    dM.x *= 0.01;
    dM.y *= 0.01;
    dM.z *= 0.01;
    result.r = dM.x * dPdu.x + dM.y * dPdv.x;
    result.g = dM.x * dPdu.y + dM.y * dPdv.y;
    result.b = dM.x * dPdu.z + dM.y * dPdv.z;
    result.a = 1.0;
    // call "output" shader, if any
    Color output_shader_return = Color(0.0, 0.0, 0.0, 0.0);
    if (Output.call("input", "inputColor", result, 
		    "output", "result", output_shader_return)) {
      result = output_shader_return;
    }
  } // main
};
