/******************************************************************************
 * Copyright 1986-2011 by mental images GmbH, Fasanenstr. 81, D-10623 Berlin,
 * Germany. All rights reserved.
 *
 * Library: mi cross product shader set
 *
 * File contents: mi cross product shader computing illumination based on our architectural model
 *****************************************************************************/

shader Mcp_architectural {
input:
    float  diffuse_weight = 1.0
    {
    description("the maximum amount of diffuse reflection");
    hard_range(0.0, 1.0);
    };
    Spectrum   diffuse = Spectrum(0.5)
    {
    description("The Spectrum of the diffuse reflection, or, when using 'Metal Material' the "
        "Spectrum of the metal itself");
    soft_range(Spectrum(0.0), Spectrum(1.0));
    };
    float  diffuse_roughness = 0.0
    {
    description("adjusts the material's roughness. Higher values yield more 'powdery' "
        "surfaces like clay");
    hard_range(0.0, 1.0);
    };
    float  reflectivity = 0.6
    {
    description("The maximum amount of glossy/mirror reflectivity. The final also amount "
        "depends on the settings of the BRDF curve as w scales the reflectivy of the material");
    hard_range(0.0, 1.0);
    };
    Spectrum   refl_color = Spectrum(1.0)
    {
    description("The Spectrum/intensity of the reflection. When metal material is on, the Spectrum "
        "of the reflection is influenced as well");
    soft_range(Spectrum(0.0), Spectrum(1.0));
    };
    float  refl_gloss = 1.0
    {
    description("The blurriness / sharpness of reflections. A value of 1.0 means that the "
        "surface is a perfect mirror");
    hard_range(0.0, 1.0);
    };
    const bool refl_is_metal = false
    {
    description("causes reflections to be tint in material's Spectrum");
    };
    float  transparency = 0.0
    {
    description("The maximum amount of transparency");
    hard_range(0.0, 1.0);
    };
    Spectrum   refr_color = Spectrum(1.0)
    {
    description("Spectrum / intensity of refractions. The 'easiest' way to create Spectrumed glass");
    soft_range(Spectrum(0.0), Spectrum(1.0));
    };
    float  refr_gloss = 1.0
    {
    description("The blurriness / sharpness of the transparency. A value of 1.0 means that the"
        " surface is 'clear'. The lower the value the glossier objects appear behind ");
    hard_range(0.0, 1.0);
    };
    float  refr_ior = 1.4
    {
    description("Index of refraction. Water has the value 1.33 ");
    soft_range(0.01, 4.0);
    };
    const bool refr_translucency = false
    {
    description("if on, a surface will be lit even if the light come from the opposite side");
    };
    Spectrum   refr_trans_color = Spectrum(Color(0.7, 0.6, 0.5, 1.0))
    {
    description("transluscent Spectrum for rays exiting a refractive object");
    soft_range(Spectrum(0.0), Spectrum(1.0));

    };
    float  refr_trans_weight = 0.5
    {
    description("attenuation of translucency");
    hard_range(0.0, 1.0);
    };

    float  anisotropy = 1.0
    {
    description("values different from 1.0 will stretch the highlight to give "
        "the impression of a brushed surface");
    soft_range(0.0, 2.0);
    };
    float  anisotropy_rotation = 0.0
    {
    description("orientation of anisotropic highlights. The range from 0 to 1 will be mapped "
        "to 0 to 360 degrees ");
    soft_range(0.0, 1.0);
    };
    const bool    brdf_fresnel = false
    {
    description("When on, uses fresnel term to calculate reflection falloff which is defined "
        "by a physical term. If off, the other BRDF terms will be used to calculate the falloff "
        "function");
    };
    float  brdf_0_degree_refl = 0.2
    {
    description("Reflectivity at 0 degrees, i.e. when the surface is directly facing the "
        "viewer");
    hard_range(0.0, 1.0);
    };
    float  brdf_90_degree_refl = 1.0
    {
    description("Reflectivity at 90 degrees i.e. when the surface is seen at grazing angles ");
    hard_range(0.0, 1.0);
    };
    float  brdf_curve = 5.0
    {
    description("Tweaks the shape of the falloff curve function. ");
    soft_range(0.0, 10.0);
    };
    const bool refr_falloff_on = false
    {
    description("when on, limits the reach of transparency so that it fades with the distance"
            "towards a given Spectrum");
    literal();
    };
    float  refr_falloff_dist = 0.0
    {
    description("maximum length for refractions");
    soft_range(0, 200.0); //depends on the software that implements it
    literal();
    };
    const bool refr_falloff_color_on = false
    {
    description("When active, refractions fade towards an end Spectrum.");
    literal();
    };
    Spectrum   refr_falloff_color = Spectrum(0.0)
    {
    description("when refraction falloff is on, falloff refraction will fade towards this "
        "Spectrum");
    soft_range(Spectrum(0.0), Spectrum(1.0));
    literal();
    };

    const bool    thin_walled = false
    {
    description("When off, objects need to be closed to have correct refractions. When on, "
        "refraction is discarded");
    };
    float  cutout_opacity = 1.0
    {
    description("Best to be mapped with a texture. Where the map is white, the object will be "
        "visible, black means that the object won't be seen at all");
    hard_range(0.0, 1.0);
    };
    Spectrum   additional_color = Spectrum(0.0)
    {
        description("Use this parameter to add self illumination, for example");
        soft_range(Spectrum(0.0), Spectrum(1.0));
        literal();
    };

    float3  bump = normal
    {
    description("This input allows to enable bump- or normal-mapping by connecting a "
                    "corresponding bump- or normal-shader." );
    };

output:
    Spectrum result;

    float mi_orennayar_diffuse(
    float3		lightDir,        	// Direction to light
    float3		eyeDir,          	// Direction from eye
    float3		n,               	// Normal
    float3		tangent,		// Tangent
    float      	diffuse_deviation) 	// Diffuse deviation
    {
    float sigma2 = diffuse_deviation * diffuse_deviation;
    float A = 1.0 - (sigma2 / (2.0 * (sigma2 + 0.33)));
    float B = 0.45 * sigma2 / (sigma2 + 0.09);

    float cosThetaI = dot(lightDir,n);
    float cosThetaO = -dot(eyeDir,n);
    // max is necessary due to numerical imprecision
    float sinThetaI = sqrt(max(0.0, 1.0 - cosThetaI * cosThetaI));
    float sinThetaO = sqrt(max(0.0, 1.0 - cosThetaO * cosThetaO));
    float cosPhiI = dot(lightDir,tangent);
    float cosPhiO = -dot(eyeDir,tangent);
    float sinPhiI = sqrt(max(0.0, 1.0 - cosPhiI * cosPhiI));
    float sinPhiO = sqrt(max(0.0, 1.0 - cosPhiO * cosPhiO));
    // max{0, cos(phi_i - phi_o)}
    float maxcos = max(0.0, cosPhiI * cosPhiO + sinPhiI * sinPhiO);
    float sinAlpha, tanBeta;
    if (cosThetaI > cosThetaO) {
        sinAlpha = sinThetaO;
        tanBeta = sinThetaI / cosThetaI;
    }
    else {
        sinAlpha = sinThetaI;
        tanBeta = sinThetaO / cosThetaO;
    }
    return saturate((A + B * maxcos * sinAlpha * tanBeta) / PI);
    }

    float fresnel(
    in float ior_d,
    in float ior_s,
    in float cos_h)
    {
    if (ior_d == 0 || ior_d == ior_s) return 0;
    float eta = ior_s/ior_d;
    float rn = (eta - 1.f) / (eta + 1.f);
    rn *= rn;
    float c = 1.f - cos_h;
    float c2 = c * c;
    return rn + (1.f - rn) * (c * c2 * c2);
    } // fresnel

    float fresnel_reflection(
    in float my_dot_nd,
    in float ior_d,
    in float ior_s)
    {

    if (my_dot_nd<= -1.f) return 1.f;
    float cos_d_h = sqrt((my_dot_nd + 1.f) * .5f);
    return fresnel(ior_d,ior_s,cos_d_h);
    } // fresnel_reflection

    float fresnel_transmission(
    in float3  dir,
    in float3  samp,
    in float   ior_d,
    in float   ior_s)
    {
    Vector3 h = -ior_d * dir - ior_s * samp;
    h = normalize(h);
    float cos_d_h = abs(dot(dir,h));
    return fresnel(ior_d,ior_s,cos_d_h);
    } // fresnel_transmission


    float microfacet(
    in float3  sampled,
    in float   a_cos_d_s,
    in float   cos_d_h,
    in float   p_h,
    in float3  n)
    {

    float a_cos_s_s = abs(dot(sampled,n));
    return abs(p_h / (4.f * cos_d_h * max(a_cos_d_s,a_cos_s_s)));
    } // microfacet

    float lobe(
    in float3   di,
    in float3   dr,
    in float3   n,
    in float3   t,
    in float3   b,
    in float    gloss,
    in float    iso)
    {
    float3 h;
    float  hn, ht, hb, e;
    float  result = 0;

    float exp_b,exp_t;

    if (gloss < 1) {
        exp_b = exp_t = ( 1 / pow(3000000,-gloss) ) - 1;
        if (iso < 1)
        {
            exp_b *= iso;
            exp_t /= iso;
        }

        h = dr - di;
        h = normalize(h);

        hn = dot(h, n);
        ht = dot(h, t);
        hb = dot(h, b);

        e = (exp_t*ht*ht + exp_b*hb*hb) / (1-hn*hn);
        result = microfacet(dr,abs(dot(di,n)),dot(di,h),
                sqrt((exp_t+1)*(exp_b+1))*(0.5/PI)*pow(abs(hn),e),n);
    } else {
        result = 0;
    }
    return result;
    } // lobe

    //mapping the gloss to a rough as iray does it. slightly different for refl and refr
    float gloss_to_rough_refl(float gloss)
    {
        return gloss >= 1. ? 0. : exp2((-4.) -14. * gloss);
    }
    float gloss_to_rough_refr(float gloss)
    {
        double x_1 = .176776695296637;
        double x_0 = .25;
        return (gloss > .2) ?
            ((gloss >= 1.) ? 0. : exp2(.5 - 15 * gloss) ):
            float(x_0 + (x_1 - x_0) * 5. * gloss); //to avoid energy loss
    }
    //schlick style reflection
    float schlick_reflection(float cos_h,float min_refl, float max_refl)
    {
        float edge_level = pow(1.0 - abs(cos_h), 5.);
        return max_refl * edge_level + min_refl * (1.0 - edge_level);
    }
    float3 gloss_half( float3 tangent_u, float3 tangent_v, float2 refl_exp, float2 sample)
    {
        float sy4 = sample.x*4.0f;
        float cosupper = cos((sy4 - floor(sy4))*PI);

        float2 e = float2(refl_exp.x + 1.0f, refl_exp.y + 1.0f);

        float eu1mcu = e.x*(1.0f-cosupper);
        float ev1pcu = e.y*(1.0f+cosupper);
        float t      = eu1mcu+ev1pcu;

        float tt   = (pow(1.0f-sample.y, -t/(e.x*e.y)) - 1.0f) / t;
        float tttv = sqrt(ev1pcu*tt);
        float tttu = sqrt(eu1mcu*tt);

        return normalize(tangent_v * (((sample.x < 0.75f) && (sample.x >= 0.25f)) ? -tttv : tttv)
          + tangent_u *  ((sample.x >= 0.5f) ? -tttu : tttu)
          + normal);
    }

    void main()
    {
    // Skip result output for shadow rays
    if (ray_type == "shadow")
    {
        result = Spectrum(0.);
        return;
    }
    void(refr_gloss);
    void(refr_translucency);
    void(refr_trans_color);
    void(refr_trans_weight);
    void(brdf_curve);
    void(refr_falloff_on);
    void(refr_falloff_dist);
    void(refr_falloff_color_on);
    void(refr_falloff_color);
    // Using the bump entry to perturbate the normal
    normal = bump;

    result = Spectrum(0.0);
    Spectrum r_diff = Spectrum(0.0);
    Spectrum r_spec = Spectrum(0.0);

    Spectrum diffuse_color = diffuse;
    Spectrum specular_color = refl_color;

    float refl_weight = reflectivity;
    float diff_weight = diffuse_weight;

    // Metals take on the reflective diffuse Spectrum
    if(refl_is_metal)
    {
    //	    Spectrum luminance_weight = Spectrum(0.212671, 0.715160, 0.072169, 0.0);
    //	    diff_weight *= (1.0 - ((specular_color.r * luminance_weight.r +
    //		specular_color.g * luminance_weight.g +
    //		specular_color.b * luminance_weight.b) *
    //		refl_weight));
        diff_weight*=(1.0-max_value(specular_color))*refl_weight;
        diff_weight = max(diff_weight, 0.0);
        specular_color *= diffuse_color;
    }


    //take care of anisotrophy
    //rotate basis according to parameter
    float3 tangent_u = texture_tangent_u[0];
    float3 tangent_v = texture_tangent_v[0];
    if (anisotropy_rotation != 0.0)
    {
        float angle = 2. * PI * anisotropy_rotation;
        float cos_angle = cos(angle);
        float sin_angle = sin(angle);
        tangent_u = cos_angle * texture_tangent_u[0] + sin_angle * texture_tangent_v[0];
        tangent_v = -sin_angle * texture_tangent_u[0] + cos_angle * texture_tangent_v[0];
    }
    float iso;
    if (anisotropy > 1.f)
    {
        iso = 1.f / anisotropy;
        float3 h;
        h=tangent_u;tangent_u=tangent_v;tangent_v=h;
    } else
    {
        iso = anisotropy;
    }
    iso = iso<1e-5 ? 1e-5 : sqrt(iso);

    // Enumerate lights
    Light_iterator light;
    foreach (light)
    {
        float cos_h = saturate(light.dot_nl);
        if (cos_h > 0.0)
        {
            float d = mi_orennayar_diffuse(light.direction,
                direction, normal, texture_tangent_u[0], diffuse_roughness);
            float f;
            if(brdf_fresnel)
            {
                if (backside)
                    f = fresnel_reflection(-dot(direction,light.direction), refr_ior, 1.0);
                else
                    f = fresnel_reflection(-dot(direction,light.direction), 1.0, refr_ior);
            }
            else
                f = schlick_reflection(dot(light.direction,normal),brdf_0_degree_refl,brdf_90_degree_refl);
            r_diff += (d * cos_h) * light.contribution * diffuse_color * diff_weight*
    //			    (1-f * dot((refl_weight*specular_color).rgb,float3(1/3.)));
                (1-f * max_value(refl_weight*specular_color));

            float3 t2 = cross(normal,tangent_u);	
            float3 t1 = -cross(normal,t2);	
    //			float3 t1 = tangent_u;	
    //			float3 t2 = tangent_v;	
            float spec = lobe(
                direction,
                light.direction,
                normal,
                t1,
                t2,
                refl_gloss,
                iso);
            r_spec += cos_h * spec * light.contribution * specular_color * refl_weight * f;
        }
    }

    // Irradiance term
    Irradiance_options irradiance_options = Irradiance_options();
    irradiance_options.set_importance(diffuse_weight);
    r_diff += diffuse_color * (diff_weight / PI) * irradiance(irradiance_options);

    // Refraction
    Spectrum r_refr = Spectrum(0.0);
    bool tir = false;
    if(max_value(refr_color * transparency)>0.0)
    {
        float3 refr_dir;
        float f;

        if (backside) {
            refr_dir = refract(direction, normal, refr_ior);
            f = fresnel_transmission(direction,refr_dir, refr_ior, 1.0);
        } else {
            refr_dir = refract(direction, normal, 1/refr_ior);
            f = fresnel_transmission(direction,refr_dir, 1.0, refr_ior);
        }
        if(thin_walled) //for thin_walled, we do not really refract the lray
            refr_dir = direction;
        if (length(refr_dir) > 10e-5) {
        Ray ray(position, refr_dir);
        Trace_options trace_opt;
        Spectrum trace_result;
        Ray ray_dx(float3(0), float3(0));
        Ray ray_dy(float3(0), float3(0));
        trace(ray, ray_dx, ray_dy, trace_opt, "result", trace_result);

        r_refr =  trace_result * transparency * refr_color * (1-f);
        } else {
        specular_color = Spectrum(1);
        refl_weight = 1;
        tir = true;
        }
    }

    // Reflection
    Spectrum r_refl = Spectrum(0.0);
    if(any(specular_color * refl_weight))
    {

        float f;
        if( refl_gloss ==1)
        {
            float3 refl_dir = reflect(direction, normal);
            Ray ray(position, refl_dir);
            Trace_options trace_opt;
            Spectrum trace_result;
            Ray ray_dx(float3(0), float3(0));
            Ray ray_dy(float3(0), float3(0));
            trace(ray, ray_dx, ray_dy, trace_opt, "result", trace_result);
            float f;
            if (tir)
            f = 1;
            else
            {
                if(brdf_fresnel)
                {
                    if (backside)
                        f = fresnel_reflection(-dot(direction,refl_dir), refr_ior, 1.0);
                    else
                        f = fresnel_reflection(-dot(direction,refl_dir), 1.0, refr_ior);
                }
                else
                {
                    f = schlick_reflection(dot(direction,normal),brdf_0_degree_refl,brdf_90_degree_refl);
                }
            }

            r_refl = trace_result * refl_weight * specular_color * f;

        }
        else
        {
            int samples=4;
            float2 sample;
            float number_samples_traced=0.;
            Spectrum refl_result = Spectrum(0);
            float2 refl_exp = float2(1.0f / gloss_to_rough_refl(refl_gloss));
            if (iso < 1.0f)	{
                refl_exp.x /= iso;
                refl_exp.y *= iso;
            }
            Sample_iterator si(samples);
            foreach (si)
            {
                sample = float2(si.sample2());

                float3 half_v = gloss_half( tangent_v, tangent_u, refl_exp, sample);

                float kh   = dot(-direction,half_v);
                float3 refl_dir  =  half_v*(kh+kh)+direction;

                // Check if direction is below the surface
                if( (dot(refl_dir,geometry_normal) > 0.0) && (kh > 0.0))
                {
                    number_samples_traced += 1.0;
                    Spectrum glossy_refl_contrib = Spectrum(0.0);
                    Ray ray;
                    Ray ray_dx; // ignore for the moment
                    Ray ray_dy; // ignore for the moment
                    //String gather_output_name;
                    ray = Ray(position, refl_dir);
                    Trace_options trace_options;
                    trace_options.set_ray_type("reflect");
                    trace_options.set_ray_dispersal_group("glossy");
                    trace_options.set_importance(refl_weight / samples);

                    trace(ray, ray_dx, ray_dy, trace_options,
                        "result", glossy_refl_contrib);

                    if (tir)
                    f = 1;
                    else
                    {
                        if(brdf_fresnel)
                        {
                            if (backside)
                                f = fresnel_reflection(-dot(direction,refl_dir), refr_ior, 1.0);
                            else
                                f = fresnel_reflection(-dot(direction,refl_dir), 1.0, refr_ior);
                        }
                        else
                        {
                            f = schlick_reflection(dot(direction,normal),brdf_0_degree_refl,brdf_90_degree_refl);
                        }
                    }

                    refl_result += glossy_refl_contrib*f;
                }
            } // foreach (si)
            if (number_samples_traced > 0.0)
            {
                refl_result /= number_samples_traced;
            }
            r_refl = refl_result * refl_weight * refl_color;
        }
    }

    // Result
    result = r_diff + r_spec + r_refl + r_refr;
    result += additional_color;
    //	result.a = 1.0;

    //take care of cutout_opacity
    if (cutout_opacity < 1)
    {
        // shoot a transparency ray to get background to combine the result with.
        //In a gpu environment, it might be an option to use transparency output to solve this
        Ray ray;
        Ray ray_dx(float3(0), float3(0));
        Ray ray_dy(float3(0), float3(0));

        Spectrum background = Spectrum(0.);
        Trace_options trace_options;
        ray = Ray(position, direction);
        trace_options.set_ray_type("transparent");
        trace(ray, ray_dx, ray_dy, trace_options,"result", background);
        result = result * cutout_opacity + background * (1-cutout_opacity);
    }
    }

}
{
    display_name( "Architectural shader (core shader library)" );
};

