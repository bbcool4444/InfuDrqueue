/*** This code was generated by gen_msl ***/

// switch for the HW vs. SW version
#define USE_HW_VERSION

shader max_exposure_photographic {

input:
#ifdef USE_HW_VERSION
  Texture2d env_tex = "max_ToneOpLog.exr" {
    display_name("Texture");
  };
  float2 texture_uv {
		default_to_state("texture_coordinate", "texture_space");
  };
#endif

	bool active = true	
		{
			display_name("Active");
		};
	float cm2_factor = 1.0
		{
			display_name("Cm2 Factor");
			soft_range(float(1.0),float(1000.0));
		};
	Color whitepoint = Color(1.04287,0.983863,1.03358,1.0)
		{
			display_name("Whitepoint");
		};
	float film_iso = 100.0
		{
			display_name("Film speed (ISO)");
			soft_range(float(1.0),float(1000.0));
		};
	float camera_shutter = 0.125
		{
			display_name("Shutter Speed");
			soft_range(float(0.0),float(1000.0));
		};
	float f_number = 8.0
		{
			display_name("Aperture (f-stop)");
			soft_range(float(1.0),float(100.0));
		};
	float vignetting = 0.0
		{
			display_name("Vignetting");
			soft_range(float(0.0),float(10.0));
		};
	float crush_blacks = 0.2
		{
			display_name("Crush Blacks");
			soft_range(float(0.0),float(1.0));
		};
	float burn_highlights = 0.25
		{
			display_name("Highlights (Burn)");
		};
	float saturation = 1.0
		{
			display_name("Color Saturation");
			soft_range(float(0.0),float(1.0));
		};
	float gamma = 2.2
		{
			display_name("Gamma");
			soft_range(float(1.0),float(3.0));
		};

output:

	Color result;

	float X0000000(in Color X0000002,in Color X0000003)
	{
		return (X0000002.r * X0000003.r + X0000002.g * X0000003.g) + X0000002.b * X0000003.b;
	}


	void X0000001(inout Color X0000004,in float X0000005,in Color X0000006,in float X0000007,in float X0000008,in float X0000009,in float X0000010,in float X0000011,in float X0000012,in float X0000013,in float X0000014,in float X0000015,in float X0000016,in int X0000017,in int X0000018,in float X0000019,in float X0000020)
	{
		float3 X0000021 = float3(0.0,0.0,0.0);
		X0000021.x = (X0000015 / float(X0000017) - 0.5) * X0000019;
		X0000021.y = ((X0000016 / float(X0000018) - 0.5) * X0000019) / X0000020;
		X0000021.z = focal_length;
		X0000021 = normalize(X0000021);
		float X0000022 = 1.0;
		if(X0000010 > 0.0)
			{
				X0000022 = pow(X0000021.z,X0000010);
			}
		Color X0000023 = X0000006;
		if(X0000023.r > 0.0)
			{
				X0000023.r = 1.0 / X0000023.r;
			}
		else
			{
				X0000023.r = 1.0;
			}
		if(X0000023.g > 0.0)
			{
				X0000023.g = 1.0 / X0000023.g;
			}
		else
			{
				X0000023.g = 1.0;
			}
		if(X0000023.b > 0.0)
			{
				X0000023.b = 1.0 / X0000023.b;
			}
		else
			{
				X0000023.b = 1.0;
			}
		Color X0000024 = Color(0.212671,0.715160,0.072169,0.0);
		float X0000025 = X0000000(X0000024,X0000023);
		X0000023.r /= X0000025;
		X0000023.g /= X0000025;
		X0000023.b /= X0000025;
		float X0000026 = 0.0;
		float X0000027 = 1.0 / X0000008;
		if(X0000007 > 0.0)
			{
				X0000026 = ((X0000005 * (18.0 / 106.0)) * (X0000007 * X0000027)) / ((15.4 * X0000009) * X0000009);
			}
		else
			{
				X0000026 = X0000005;
			}
		float X0000028 = 1.0 / X0000014;
		X0000004.r = ((X0000004.r * X0000023.r) * X0000026) * X0000022;
		X0000004.g = ((X0000004.g * X0000023.g) * X0000026) * X0000022;
		X0000004.b = ((X0000004.b * X0000023.b) * X0000026) * X0000022;
		X0000004.r = (X0000004.r * (1.0 + X0000004.r * X0000012)) / (1.0 + X0000004.r);
		X0000004.g = (X0000004.g * (1.0 + X0000004.g * X0000012)) / (1.0 + X0000004.g);
		X0000004.b = (X0000004.b * (1.0 + X0000004.b * X0000012)) / (1.0 + X0000004.b);
		float X0000029 = X0000000(X0000024,X0000004);
		float X0000030 = 1.0 - X0000013;
		X0000004.r = X0000004.r * X0000013 + X0000029 * X0000030;
		X0000004.g = X0000004.g * X0000013 + X0000029 * X0000030;
		X0000004.b = X0000004.b * X0000013 + X0000029 * X0000030;
		if(X0000004.r < 0.0)
			X0000004.r = 0.0;
		if(X0000004.g < 0.0)
			X0000004.g = 0.0;
		if(X0000004.b < 0.0)
			X0000004.b = 0.0;
		float X0000031 = X0000011 * 2.0 + 1.0;
		float X0000032 = pow(X0000000(X0000024,X0000004),0.5);
		X0000030 = 1.0 - X0000032;
		if(X0000032 < 1.0)
			{
				X0000004.r = X0000004.r * X0000032 + pow(X0000004.r,X0000031) * X0000030;
				X0000004.g = X0000004.g * X0000032 + pow(X0000004.g,X0000031) * X0000030;
				X0000004.b = X0000004.b * X0000032 + pow(X0000004.b,X0000031) * X0000030;
			}
		X0000004.r = pow(X0000004.r,X0000028);
		X0000004.g = pow(X0000004.g,X0000028);
		X0000004.b = pow(X0000004.b,X0000028);
	}


	void main()
	{
		result = Color(0.0,0.0,0.0,0.0);
#ifdef USE_HW_VERSION
    // instead of tracing a ray into the scene we use a texture !!!
  	result = tex2d(env_tex,texture_uv );
  	// Copied from d3dx9math.h
  	// To get rid of the INF texels from a FP16 texture
		float D3DX_16F_MAX = (6.550400e+004);    // max value of FP16	
		if(result.r > D3DX_16F_MAX)
		{
			result.r = D3DX_16F_MAX;
		}
		if(result.g > D3DX_16F_MAX)
		{
			result.g = D3DX_16F_MAX;
		}
		if(result.b > D3DX_16F_MAX)
		{
			result.b = D3DX_16F_MAX;
		}
#else
		Color X0000033 = Color(0.0,0.0,0.0,0.0);
		float3 X0000034 = transform_vector("internal","camera",direction);
		Ray X0000035;
		Ray X0000036;
		Ray X0000037;
		String X0000038;
		Trace_options X0000039;
		X0000035 = Ray(origin,direction);
		X0000039.set_ray_type("eye");
		if(trace_immediate(X0000035,X0000036,X0000037,X0000039,X0000038,X0000033))
			{
				result += X0000033;
			}
#endif
		if(active)
			{
				Color X0000040 = result;
				X0000001(X0000040,cm2_factor,whitepoint,film_iso,camera_shutter,f_number,vignetting,crush_blacks,burn_highlights,saturation,gamma,raster.x,raster.y,image_x_resolution,image_y_resolution,aperture,aspect_ratio);
				result = X0000040;
			}
	}

}
{ 
#ifdef USE_HW_VERSION
  shader_type( "environment" ); 
#else
  shader_type("lens");
#endif
};


/*** end of file ***/
